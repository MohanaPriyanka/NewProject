// Tested By: ProductionDetailBillTest
@SuppressWarnings('PMD.ApexCRUDViolation')
public without sharing class ProductionDetailBillService implements ZuoraDataQueryService.Processor{
    @TestVisible
    private static ZuoraUsageSelector usageSelector = new ZuoraUsageSelector();
    @TestVisible
    private static JournalEntrySelector journalEntrySelector = new JournalEntrySelector();
    @TestVisible
    private static ProductionDetailSelector productionDetailSelector = new ProductionDetailSelector();
    @TestVisible
    private static UASBSelector uasbSelector = new UASBSelector();
    @TestVisible
    private static AdjustmentSelector adjustmentSelector = new AdjustmentSelector();

    private Set<Id> transferIds = new Set<Id>();
    private Set<String> zuoraUsageIds = new Set<String>();

    @TestVisible
    private Map<String, GLInvoiceItem> invoiceIdToUsageMap = new Map<String, GLInvoiceItem>();
    public Map<Id, List<Transfer_Part__c>> transferToDetailMap = new Map<Id, List<Transfer_Part__c>>();
    public List<Transfer_Part__c> productionDetailToInsert = new List<Transfer_Part__c>();

    public class GLInvoiceItem {
        public List<UsageRecord> bills;
        public Decimal amount;
        public Decimal sumOfAmount;
        public Id jERecordId;
        private Set<Id> transferIds;

        public void populateSFRecordsFromUsage(Map<String,List<UASB__c>> uasbMap, Map<String,List<Bill_Adjustment__c>> adjustMap) {
            this.transferIds = new Set<Id>();
            for (UsageRecord usage : this.bills) {
                usage.relateRecords(uasbMap.get(usage.externalId));
                usage.relateRecords(adjustMap.get(usage.externalId));
                this.transferIds.addAll(usage.transferIds);
                if (usage.sFRecords.size() == 0) {
                    Logger.logNow(
                        'ProductionToBillService',
                        'fromUsageGetUASBsAndProductionAdjustments',
                        'Could not find UASB or Adjustment for: ' + JSON.serialize(usage)
                    );
                }
            }
        }

        public List<SObject> getAllSFRecords(){
            List<SObject> sfRecords = new List<SObject>();
            for (UsageRecord usage : this.bills) {
                sfRecords.addAll(usage.sFRecords);
            }
            return sfRecords;
        }
    }

    @TestVisible
    private class UsageRecord {
        private String customerNumber;
        private Integer billMonth;
        private Integer billYear;
        private String project;
        private String client;
        private Id internalId;
        @TestVisible
        private String externalId;
        private Decimal amount;
        private Datetime billDatetime;
        @TestVisible
        private List<SObject> sFRecords;
        private Set<Id> transferIds;

        private UsageRecord(Journal_Entry__c entry) {
            this.client = entry.Client__c;
            this.project = entry.Project__c;
            this.customerNumber = entry.Customer_Account__c;
            this.billMonth = entry.Date__c.month();
            this.billYear = entry.Date__c.year();
            this.internalId = entry.Id;
            this.externalId = entry.External_Id__c;
            this.amount = entry.Amount__c;
        }

        private String generateKey() {
            if (this.billMonth == null
                && this.billYear == null
                && this.billDatetime.date() != null){
                Date billDate = this.billDatetime.date();
                this.billMonth = billDate.month();
                this.billYear = billDate.year();
            }
            String key = this.customerNumber
                + this.project
                + this.client
                + String.valueOf(this.billMonth)
                + String.valueOf(this.billYear);
            return key;
        }

        private void checkForNullLists(){
            if (this.sFRecords == null){
                this.sFRecords = new List<SObject>();
            }
            if (this.transferIds == null){
                this.transferIds = new Set<Id>();
            }
        }

        private void relateRecords(List<UASB__c> uasbList){
            this.checkForNullLists();
            if (uasbList == null){
                return;
            }
            for (UASB__c uasbRecord : uasbList){
                this.transferIds.add(uasbRecord.Transfer__c);
                this.sFRecords.add(uasbRecord);
            }
        }

        private void relateRecords(List<Bill_Adjustment__c> adjustList){
            this.checkForNullLists();
            if (adjustList == null){
                return;
            }
            for (Bill_Adjustment__c adjustment : adjustList){
                this.transferIds.add(adjustment.Transfer__c);
                this.sFRecords.add(adjustment);
            }
        }
    }

    public void createProductionDetailFromInvoiceItems(List<Journal_Entry__c> invoiceItems, Integer batchSize) {
        Map<String, String> invoiceItemIds = new Map<String, String>();
        Set<String> accountNumbers = new Set<String>();
        Date minDate;
        Date maxDate;

        for (Journal_Entry__c entry : invoiceItems){
            minDate = DateUtil.min(minDate, entry.Date__c);
            maxDate = DateUtil.max(maxDate, entry.Date__c);
            invoiceItemIds.put(entry.External_Id__c, entry.External_Id__c);
            accountNumbers.add(entry.Customer_Account__c);
        }

        ZuoraDataQueryService.ProcessingParameter param = new ZuoraDataQueryService.ProcessingParameter();
        param.className = 'ProductionDetailBillService';
        param.optionalStrings = invoiceItemIds;
        param.enableRetries();
        param.optionalBooleans.put('MoreBillsToProcess',invoiceItems.size() == batchSize);
        param.optionalIntegers.put('BatchSize', batchSize);

        String queryString = usageSelector.getUsageQueryStringFilterByAccountAndDate(accountNumbers,minDate,maxDate);
        ZuoraDataQueryService.callFromApex(queryString,param);
    }

    public void executePostQueryJob(ZuoraDataQueryService.ProcessingParameter method, String response) {
        try {
            fromInvoicesGetUsage(method.optionalStrings.keySet(), response);
            fromUsageGetUASBsAndProductionAdjustments();
            distributeInvoiceItemAmongTransferProductionDetail();
            insert productionDetailToInsert;

            if (method.optionalBooleans.get('MoreBillsToProcess')) {
                queueJob(ProductionToBillService.OperationType.BILL, method.optionalIntegers.get('BatchSize'));
            } else {
                queueJob(ProductionToBillService.OperationType.DEBITMEMO, method.optionalIntegers.get('BatchSize'));
            }
        } catch (Exception excep) {
            String message = JSON.serialize(method)+ '_'+ excep.getMessage() + '_' + excep.getStackTraceString();
            Logger.logNow('ProductionToBillService', 'executePostQueryJob', message);
        }
    }

    public void queueJob(ProductionToBillService.OperationType operation, Integer batchSize) {
        ProductionToBillService billJob = new ProductionToBillService();
        billJob.batchSize = batchSize;
        billJob.opType = operation;
        System.enqueueJob(billJob);
    }

    @TestVisible
    private void fromInvoicesGetUsage(Set<String> invoiceItemIds, String response) {
        List<UsageRecord> allUsage = (List<UsageRecord>)JSON.deserialize(response, List<UsageRecord>.class);
        List<Journal_Entry__c> invoiceItems = journalEntrySelector.getSFJournalEntriesFromExternalId(invoiceItemIds);
        invoiceIdToUsageMap = groupUsageByInvoice(allUsage,invoiceItems);
    }

    @TestVisible
    private void fromUsageGetUASBsAndProductionAdjustments() {
        Map<String,List<UASB__c>> uasbMap = uasbSelector.getUASBMapFromExternalIds(zuoraUsageIds);
        Map<String,List<Bill_Adjustment__c>> adjustMap = adjustmentSelector.getAdjustmentMapFromExternalIds(zuoraUsageIds);

        for (String invoiceItemId : invoiceIdtoUsageMap.keySet()){
            GLInvoiceItem invItem = invoiceIdToUsageMap.get(invoiceItemId);
            invItem.populateSFRecordsFromUsage(uasbMap, adjustMap);
            transferIds.addAll(invItem.transferIds);
        }
    }

    @TestVisible
    private void distributeInvoiceItemAmongTransferProductionDetail() {
        transferToDetailMap = productionDetailSelector.getTransferPartMap(transferIds);

        for (String invoiceItemId : invoiceIdtoUsageMap.keySet()){
            GLInvoiceItem invItem = invoiceIdToUsageMap.get(invoiceItemId);
            for (SObject sfBill : invItem.getAllSFRecords()){
                distributeAmongTransferProductionDetail(sfBill, invItem.JERecordId);
            }
        }
    }

    private void distributeAmongTransferProductionDetail(SObject sfRecord, Id journalRecordId){
        if (sfRecord.getSObjectType() == UASB__c.SObjectType){
            UASB__c bill = (UASB__c)sfRecord;
            createBillProductionDetail(bill.Transfer__c, bill.Discounted_Bill__c, 'Bill', journalRecordId);
            createBillProductionDetail(bill.Transfer__c, bill.Savings__c, 'Customer Savings', journalRecordId);
        } else if (sfRecord.getSObjectType() == Bill_Adjustment__c.SObjectType){
            Bill_Adjustment__c adjust = (Bill_Adjustment__c)sfRecord;
            createBillProductionDetail(adjust.Transfer__c, adjust.Adjustment_Amount__c, 'Bill', journalRecordId);
            createBillProductionDetail(adjust.Transfer__c, adjust.Discount__c, 'Customer Savings', journalRecordId);
        }
    }

    public void createBillProductionDetail(Id transferId, Decimal billAmount, String type, Id relatedRecordId){
        if (billAmount == null || billAmount == 0){
            return;
        }
        billAmount = Util.roundValue(billAmount,2, 'HALF_UP');
        Decimal staticBillAmount = billAmount;
        Decimal decliningBillAmount = billAmount;
        Integer loopCount = 0;

        List<Transfer_Part__c> transferProductionDetail = transferToDetailMap.get(transferId);

        for (Transfer_Part__c transferDetail : transferProductionDetail){
            loopCount += 1;
            Transfer_Part__c part = new Transfer_Part__c(
                Name = type,
                Production__c = transferDetail.Production__c,
                Transfer__c = transferId,
                Type__c = type
            );
            part = setRelatedRecordId(part, type, relatedRecordId);
            Decimal applicationAmount = getWeightedApplicationAmount(transferDetail, staticBillAmount);

            if (Math.abs(applicationAmount) <= Math.abs(decliningBillAmount)){
                part.Amount__c = applicationAmount;
                decliningBillAmount -= applicationAmount;
            } else {
                part.Amount__c = decliningBillAmount;
                decliningBillAmount = 0;
            }
            // In cases of rounding cutoff, put remainder (~0.01 or so on last transfer part):
            if (decliningBillAmount > 0 && loopCount == transferProductionDetail.size()){
                part.Amount__c = part.Amount__c + decliningBillAmount;
            }
            productionDetailToInsert.add(part);
        }
    }

    private Transfer_Part__c setRelatedRecordId(Transfer_Part__c transferProdDetail, String type, Id relatedRecordId){
        if (type == 'Externally Serviced' && relatedRecordId.getSObjectType() == UASB__c.sObjectType){
            transferProdDetail.Externally_Serviced_UASB__c = relatedRecordId;
        } else if (type == 'Externally Serviced' && relatedRecordId.getSObjectType() == Bill_Adjustment__c.sObjectType){
            transferProdDetail.Externally_Serviced_Bill_Adjustment__c = relatedRecordId;
        } else {
            transferProdDetail.Journal_Entry__c = relatedRecordId;
        }
        return transferProdDetail;
    }

    private Decimal getWeightedApplicationAmount(Transfer_Part__c transferProdDetail, Decimal staticBillAmount){
        // If the transfer amount is $0, the transfer PD is also $0 (with the exception of 195 MSBW records which
        // we can ignore). We want 0/0 = 1, so just return the staticBillAmount
        if (Util.nullToZero(transferProdDetail.Transfer__r.Transfer_Amount__c) == 0) {
            return staticBillAmount;
        }
        // We want to allocate based on dollar amount, not on kWh, because the dollar amount accounts for monthly credit rate changes
        Decimal applicationAmount = staticBillAmount * (transferProdDetail.Amount__c / transferProdDetail.Transfer__r.Transfer_Amount__c);
        applicationAmount = Util.roundValue(applicationAmount, 4, 'HALF_UP');
        return applicationAmount;
    }

    @TestVisible
    private Map<String, GLInvoiceItem> groupUsageByInvoice(List<UsageRecord> allUsage, List<Journal_Entry__c> invoiceItems) {
        Map<String, GLInvoiceItem> invoiceToUsageMap = new Map<String, GLInvoiceItem>();
        Map<String,UsageRecord> keyToJournalEntryMap = new Map<String,UsageRecord>();

        for (Journal_Entry__c invoiceItem : invoiceItems){
            UsageRecord invoiceKey = new UsageRecord(invoiceItem);
            keyToJournalEntryMap.put(invoiceKey.generateKey(), invoiceKey);
        }
        for (UsageRecord usageKey : allUsage){
            String matchKey = usageKey.generateKey();
            if (keyToJournalEntryMap.containsKey(matchKey)){
                UsageRecord record = keyToJournalEntryMap.get(matchKey);
                invoiceToUsageMap = addToUsageMap(invoiceToUsageMap, record, usageKey);
                zuoraUsageIds.add(usageKey.externalId);
            }
        }
        return invoiceToUsageMap;
    }

    private Map<String, GLInvoiceItem> addToUsageMap(Map<String, GLInvoiceItem> usageMap, UsageRecord invoiceKey, UsageRecord usageKey) {
        String externalId = invoiceKey.externalId;
        GLInvoiceItem invoiceItem;

        if (usageMap.containsKey(externalId)){
            invoiceItem = usageMap.get(externalId);
            invoiceItem.bills.add(usageKey);
            invoiceItem.sumOfAmount += usageKey.amount;
        } else {
            invoiceItem = new GLInvoiceItem();
            invoiceItem.bills = new List<UsageRecord>{usageKey};
            invoiceItem.amount = invoiceKey.amount;
            invoiceItem.sumOfAmount = usageKey.amount;
            invoiceItem.jERecordId = invoiceKey.internalId;
        }
        if (invoiceItem.sumOfAmount > invoiceItem.amount){
            Logger.logNow('ProductionToBillService','addToUsageMap','Sum of Parts is greater than Invoice Amount ' + JSON.serialize(invoiceItem));
        } else {
            usageMap.put(externalId,invoiceItem);
        }
        return usageMap;
    }

    public void createProductionDetailFromUnservicedUASB(List<UASB__c> unservicedUASBs){
        calculateProductionDetailFromUnservicedUASB(unservicedUASBs);
        insert productionDetailToInsert;
    }

    public void createProductionDetailFromUnservicedAdjustment(List<Bill_Adjustment__c> unservicedAdjusts){
        calculateProductionDetailFromUnservicedAdjustment(unservicedAdjusts);
        insert productionDetailToInsert;
    }

    @TestVisible
    private void calculateProductionDetailFromUnservicedUASB(List<UASB__c> unservicedUASBs){
        for (UASB__c exBill : unservicedUASBs){
            transferIds.add(exBill.Transfer__c);
        }

        transferToDetailMap = productionDetailSelector.getTransferPartMap(transferIds);

        for (UASB__c externalBill : unservicedUASBs){
            createBillProductionDetail(externalBill.Transfer__c, externalBill.Credits_Allocated__c, 'Externally Serviced', externalBill.Id);
        }
    }

    @TestVisible
    private void calculateProductionDetailFromUnservicedAdjustment(List<Bill_Adjustment__c> unservicedUASBs){
        for (Bill_Adjustment__c exBill : unservicedUASBs){
            transferIds.add(exBill.Transfer__c);
        }

        transferToDetailMap = productionDetailSelector.getTransferPartMap(transferIds);

        for (Bill_Adjustment__c externalBill : unservicedUASBs){
            createBillProductionDetail(externalBill.Transfer__c, externalBill.Credits_Allocated__c, 'Externally Serviced', externalBill.Id);
        }
    }

    public static void setUnservicedUASBReadyForProdDetail(List<UASB__c> uasbs){
        for (UASB__c uasb : uasbs) {
            if (uasb.Externally_Serviced__c && uasb.Credits_Allocated__c != null && uasb.Credits_Allocated__c != 0){
                uasb.Ready_For_Production_Detail__c = true;
            }
        }
    }

    public static void setUnservicedAdjustReadyForProdDetail(List<Bill_Adjustment__c> adjustments){
        for (Bill_Adjustment__c adjust : adjustments) {
            if (adjust.Externally_Serviced__c){
                adjust.Ready_For_Production_Detail__c = true;
            }
        }
    }
}