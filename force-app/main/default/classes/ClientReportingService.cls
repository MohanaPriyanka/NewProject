/*************************************************************************************
 * Created By: peteryao on 2019-03-03  
 * Description: Methods to aid with CS Client Reporting, e.g. client owner stamping
 * Test: ClientReportingServiceTest, ContractTriggerTest
 *************************************************************************************/
@SuppressWarnings('PMD.ApexCRUDViolation')
public without sharing class ClientReportingService {
    @TestVisible
    private static FeatureService featureService = new FeatureService();
    private static AccountsSelector accountsSelector = new AccountsSelector();
    @TestVisible
    private static fflib_SObjectUnitOfWork uow = new fflib_SObjectUnitOfWork(
        new List<SObjectType> {
            Account.SObjectType
        }
    );

    // Client Stamps:

    public static void stampClient(List<Bill_Adjustment__c> adjustments) {
        // Called from before insert trigger:
        Set<Id> uasIds = new Set<Id>();
        for (Bill_Adjustment__c billAdjustment : adjustments) {
            if (billAdjustment.Client__c == null &&
                billAdjustment.Utility_Account_Subscription__c != null) {
                uasIds.add(billAdjustment.Utility_Account_Subscription__c);
            }
        }
        Map<Id, Utility_Account_Subscription__c> uasWithClientMap = UASSelector.selectByIdsAsMap(uasIds);
        for (Bill_Adjustment__c billAdjustment : adjustments) {
            Utility_Account_Subscription__c uasWithClient = uasWithClientMap.get(billAdjustment.Utility_Account_Subscription__c);
            if (uasWithClient != null) {
                if (billAdjustment.Client__c == null &&
                    billAdjustment.Utility_Account_Subscription__c != null) {
                    billAdjustment.Client__c =
                        uasWithClient.Opportunity__r.Shared_Solar_System__r.BWC_Project_Entity_Manual__r.Client_Account__c;
                }
                if (uasWithClient.Externally_Serviced__c == true) {
                    billAdjustment.Externally_Serviced__c = uasWithClient.Externally_Serviced__c;
                }
            }
        }
    }
    public static void stampClient(List<UASB__c> uasbs) {
        // Called from before insert trigger:
        Set<Id> uasIds = new Set<Id>();
        for (UASB__c uasb : uasbs) {
            if (uasb.Client__c == null &&
                uasb.Utility_Account_Subscription__c != null) {
                uasIds.add(uasb.Utility_Account_Subscription__c);
            }
        }
        Map<Id, Utility_Account_Subscription__c> uasWithClientMap = UASSelector.selectByIdsAsMap(uasIds);
        for (UASB__c uasb : uasbs) {
            Utility_Account_Subscription__c uasWithClient = uasWithClientMap.get(uasb.Utility_Account_Subscription__c);
            if (uasb.Client__c == null &&
                uasb.Utility_Account_Subscription__c != null &&
                uasWithClient != null) {
                uasb.Client__c =
                    uasWithClient.Opportunity__r.Shared_Solar_System__r.BWC_Project_Entity_Manual__r.Client_Account__c;
            }
        }
    }
    public void stampClient(List<Production__c> productions) {
        Set<Id> sssIds = new Set<Id>();
        for (Production__c prod : productions) {
            sssIds.add(prod.Shared_Solar_System__c);
        }
        SharedSolarSystemsSelector sssSelector = new SharedSolarSystemsSelector();
        Map<Id, Shared_Solar_System__c> sssMap  = sssSelector.getSSSMap(sssIds);
        for (Production__c prod : productions) {
            Shared_Solar_System__c sss = sssMap.get(prod.Shared_Solar_System__c);
            prod.Client_Account__c = sss.Client_Account__c;
        }
    }
    public void stampClient(List<Bill_Period__c> billPeriods) {
        Set<Id> sssIds = new Set<Id>();
        for (Bill_Period__c billPeriod : billPeriods) {
            sssIds.add(billPeriod.Shared_Solar_System__c);
        }
        SharedSolarSystemsSelector sssSelector = new SharedSolarSystemsSelector();
        Map<Id, Shared_Solar_System__c> sssMap  = sssSelector.getSSSMap(sssIds);
        for (Bill_Period__c billPeriod : billPeriods) {
            Shared_Solar_System__c sss = sssMap.get(billPeriod.Shared_Solar_System__c);
            billPeriod.Client_Account__c = sss.Client_Account__c;
        }
    }
    public void stampClient(List<Transfer__c> transfers) {
        Set<Id> sssIds = new Set<Id>();
        for (Transfer__c transfer : transfers) {
            sssIds.add(transfer.Shared_Solar_System__c);
        }
        SharedSolarSystemsSelector sssSelector = new SharedSolarSystemsSelector();
        Map<Id, Shared_Solar_System__c> sssMap  = sssSelector.getSSSMap(sssIds);
        for (Transfer__c transfer : transfers) {
            Shared_Solar_System__c sss = sssMap.get(transfer.Shared_Solar_System__c);
            transfer.Client_Account__c = sss.Client_Account__c;
        }
    }

    // Client Health Score

    public static void updateClientReports( Map<ID, Client_Health_Report__c> oldReportMap,
                                            Map<ID, Client_Health_Report__c> newReportMap) {
        for (Client_Health_Report__c newReport : newReportMap.values()) {
            if (!oldReportMap.get(newReport.Id).Recalculate_Health_Score__c && newReport.Recalculate_Health_Score__c){
                newReport.Client_Health_Score__c = Util.roundValue(calculateClientHealthScore(newReport),2,null);
            }
        }
    }
    public static Decimal calculateClientHealthScore(Client_Health_Report__c clientReport) {
        Decimal countOfVariables = 0;
        Decimal customerDSO = 0;
        Decimal acctScore = 0;
        Decimal nps = 0;
        Decimal bluewaveRating = 0;
        Decimal openCases = 0;
        Decimal utilization = 0;
        if (Util.nullToZero(clientReport.Customer_DSO__c) > 0){
            countOfVariables += 1;
            // For every 30 days late (after 30 days), take away a point
            customerDSO = (((clientReport.Customer_DSO__c-30)/30)*-1);
        }
        if (Util.nullToZero(clientReport.Accounting_Score__c) > 0){
            countOfVariables += 1;
            // For every point below 10 take away a point
            acctScore = (clientReport.Accounting_Score__c-10);
        }
        if (Util.nullToZero(clientReport.NPS__c) > 0){
            countOfVariables += 1;
            // For every point below 10 take away a point
            nps = (clientReport.NPS__c-10);
        }
        if (Util.nullToZero(clientReport.BlueWave_Rating__c) > 0 || Util.nullToZero(clientReport.Open_Cases__c) > 0){
            countOfVariables += 1;
            if (Util.nullToZero(clientReport.Open_Cases__c) > 5){
                // For every 2 cases above 5 cases, take away a point
                openCases = (((clientReport.Open_Cases__c-5)/2)*-1);
            }
            if (Util.nullToZero(clientReport.BlueWave_Rating__c) > 0){
                // For every point below 10 take away a point
                bluewaveRating = (clientReport.BlueWave_Rating__c-10);
            }
        }
        if (Util.nullToZero(clientReport.Management_Projects_Utilization__c) > 0){
            countOfVariables += 1;
            //For every 1% less than 100%, take away a point
            utilization = (clientReport.Management_Projects_Utilization__c-100);
        }
        Decimal healthScore = 10 + (
            (customerDSO*(1/countOfVariables)) + (acctScore *(1/countOfVariables)) + (nps*(1/countOfVariables)) +
            (bluewaveRating*(3/(countOfVariables*4))) + (openCases*(1/(countOfVariables*4))) +
            (utilization*(1/countOfVariables)));
        return healthScore;
    }

    // Client UASes/ALSSes:

    public static void insertClientUAS(List<Utility_Account_Subscription__c> uasList) {
        List<Client_Utility_Account_Subscription__c> clientUASList = new List<Client_Utility_Account_Subscription__c> ();
        Set<Id> parentIds = new Set<Id>();
        for (Utility_Account_Subscription__c uas : uasList) {
            parentIds.add(uas.Id);
        }
        //Have to query for parent records again because Triggers do not maintain relationships
        List<Utility_Account_Subscription__c> parentUASList = UASSelector.selectByIds(parentIds);
        for (Utility_Account_Subscription__c parent : parentUASList) {
            if (parent.Opportunity__c != null) {
                Client_Utility_Account_Subscription__c child = new Client_Utility_Account_Subscription__c(
                    Name = 'C' + parent.Name,
                    Utility_Account_Subscription__c = parent.Id,
                    Shared_Solar_System__c = parent.Shared_Solar_System__c
                );
                clientUASList.add(child);
            }
        }
        insert clientUASList;
    }

    public static void updateClientUAS(List<Utility_Account_Subscription__c> uasList, Map<Id, Utility_Account_Subscription__c> oldMap) {
        Set<Id> uasIds = new Set<Id>();
        for (Utility_Account_Subscription__c uas : uasList) {
            if (uas.Shared_Solar_System__c != oldMap.get(uas.Id).Shared_Solar_System__c) {
                uasIds.add(uas.Id);
            }
        }

        if (uasIds.size() > 0) {
            List<Client_Utility_Account_Subscription__c> clientUASList = ClientReportObjectSelector.getClientUASesByUASIds(uasIds);
            if (clientUASList.size() > 0 ){
                for (Client_Utility_Account_Subscription__c cUAS : clientUASList) {
                    cUAS.Shared_Solar_System__c = cUAS.Utility_Account_Subscription__r.Shared_Solar_System__c;
                }
                update clientUASList;
            }
        }
    }

    public static void insertClientALSS(List<Schedule_Z_Subscription__c> szsList) {
        List<Client_Allocation_Schedule_Subscription__c> clientALSSList = new List<Client_Allocation_Schedule_Subscription__c>();
        Set<Id> parentIds = new Set<Id>();
        for (Schedule_Z_Subscription__c szs : szsList) {
            parentIds.add(szs.Id);
        }
        //Have to query for parent records again because Triggers do not maintain relationships
        List<Schedule_Z_Subscription__c> parentList = ScheduleZSubscriptionSelector.getScheduleZSubscriptionsList(parentIds);
        //Need to get the Child Client UAS object of the ALSS's UAS
        //Map --> key = ALSS ID, value = Client UAS
        Map<Id, Client_Utility_Account_Subscription__c> alssToClientUASMap = new Map<Id, Client_Utility_Account_Subscription__c>();
        alssToClientUASMap = getClientUtilityAccountSubscriptionsByIds(parentList);
        for (Schedule_Z_Subscription__c parent : parentList) {
            Client_Allocation_Schedule_Subscription__c child = new Client_Allocation_Schedule_Subscription__c(
                Name = 'C' + parent.Name,
                Allocation_Schedule_Subscription__c = parent.Id,
                Allocation_Schedule__c = parent.Schedule_Z__r.Id,
                Client_Utility_Account_Subscription__c = alssToClientUASMap.get(parent.Id).Id
            );
            clientALSSList.add(child);
        }
        insert clientALSSList;
    }
    public static void deleteClientUAS(List<Utility_Account_Subscription__c> uasList) {
        Set<Id> uasIds = new Set<Id>();
        for (Utility_Account_Subscription__c uas : uasList) {
            uasIds.add(uas.Id);
        }
        List<Client_Utility_Account_Subscription__c> clientUASList = ClientReportObjectSelector.getClientUASesByUASIds(uasIds);
        delete clientUASList;
    }
    public static void deleteClientALSS(List<Schedule_Z_Subscription__c> szsList) {
        Set<Id> szsIds = new Set<Id>();
        for (Schedule_Z_Subscription__c szs : szsList) {
            szsIds.add(szs.Id);
        }
        List<Client_Allocation_Schedule_Subscription__c> clientALSSList = ClientReportObjectSelector.getClientALSSBySZSIds(szsIds);
        delete clientALSSList;
    }
    private static  Map<Id, Client_Utility_Account_Subscription__c> getClientUtilityAccountSubscriptionsByIds(List<Schedule_Z_Subscription__c> parentSZSs) {
        Set<Id> uasIds = new Set<Id>();
        Map<Id, Id> uasToALSSMap = new Map<Id, Id>();
        Map<Id, Client_Utility_Account_Subscription__c> alssToClientUASMap = new Map<Id, Client_Utility_Account_Subscription__c>();
        //Map --> key: UAS Id, value: ALSS Id
        for (Schedule_Z_Subscription__c alss : parentSZSs) {
            uasIds.add(alss.Utility_Account_Subscription__c);
            uasToALSSMap.put(alss.Utility_Account_Subscription__c, alss.Id);
        }
        List<Client_Utility_Account_Subscription__c> clientUASList = ClientReportObjectSelector.getClientUASesByUASIds(uasIds);
        for (Client_Utility_Account_Subscription__c clientUAS : clientUASList) {
                // Map --> key = ALSS Id, value = client UAS
                alssToClientUASMap.put(uasToALSSMap.get(clientUAS.Utility_Account_Subscription__c), clientUAS);
        }
        return alssToClientUASMap;
    }

    public void rollupActiveContractsToAccounts(Map<Id, Contract> oldMap, Map<Id, Contract> newMap) {
        Set<Id> accountIds;
        switch on Trigger.operationType {
            when AFTER_INSERT, AFTER_UNDELETE {
                accountIds = getAccountIdsWithUpdatedContracts(newMap);
            } when AFTER_UPDATE {
                accountIds = getAccountIdsWithUpdatedContracts(newMap, oldMap);
            } when AFTER_DELETE {
                accountIds = getAccountIdsWithUpdatedContracts(oldMap);
            } when else {
                throw new Util.BWException('Trigger operation not handled: ' + Trigger.operationType);
            }
        }
        List<Account> accountsWithContracts = accountsSelector.selectAll(accountIds);
        for (Account account : accountsWithContracts) {
            if (account.Number_of_Active_Contracts__c != account.Contracts.size()) {
                account.Number_of_Active_Contracts__c = account.Contracts.size();
                uow.registerDirty(account);
            }
        }
        uow.commitWork();
    }

    private Set<Id> getAccountIdsWithUpdatedContracts(Map<Id, Contract> newMap) {
        Set<Id> accountIds = new Set<Id>();
        for (Contract contract : newMap.values()) {
            accountIds.add(contract.AccountId);
        }
        return accountIds;
    }

    private Set<Id> getAccountIdsWithUpdatedContracts(Map<Id, Contract> newMap, Map<Id, Contract> oldMap) {
        Set<Id> accountIds = new Set<Id>();
        for (Contract contract : newMap.values()) {
            if (oldMap.get(contract.Id).AccountId != contract.AccountId) {
                accountIds.add(oldMap.get(contract.Id).AccountId);
                accountIds.add(contract.AccountId);
            }
            if (oldMap.get(contract.Id).Status != contract.Status) {
                accountIds.add(contract.AccountId);
            }
        }
        return accountIds;
    }
}