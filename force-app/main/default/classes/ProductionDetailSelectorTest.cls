@IsTest
public class ProductionDetailSelectorTest {
    @TestSetup
    public static void setupTestData() {
        // Don't need to test Allocation Schedule Population or transfer part creation:
        Util.disableTrigger('Disable_TransferTrigger__c');

        Date today = System.today();
        Date lastMonthStart = Date.newInstance(today.year(),today.month()-1,1);
        Date lastMonthEnd = Date.newInstance(today.year(),today.month(),-1);
        Date lastMonthBilling = Date.newInstance(today.year(),today.month()-1,20);
        Date twoMonthsAgoBilling = Date.newInstance(today.year(),today.month()-2,20);

        Journal_Entry__c entryOne = new Journal_Entry__c(
            Object_Type__c = 'InvoiceItem',
            Query_Type__c = 'InvoiceItem',
            Project__c = 'SSS-000001',
            Client__c = 'BW-0009470',
            Amount__c = 252.73,
            External_Id__c = '2c92c0fa6e3a9391016e3df87b1f687a',
            Customer_Account__c = 'bw-00524',
            Date__c = twoMonthsAgoBilling
        );
        Journal_Entry__c entryTwo = new Journal_Entry__c(
            Object_Type__c = 'InvoiceItem',
            Query_Type__c = 'InvoiceItem',
            Project__c = 'SSS-000001',
            Client__c = 'BW-0009470',
            Amount__c = 135.06,
            External_Id__c = '2c92c0fa6e3a9391016e3e30d48066d2',
            Customer_Account__c = 'bw-00524',
            Date__c = lastMonthBilling
        );
        insert new List<Journal_Entry__c>{entryOne, entryTwo};

        Shared_Solar_System__c sss1 = new Shared_Solar_System__c(
            Name = 'Test Project',
            Billing_Method__c = 'kWh'
        );
        Shared_Solar_System__c sss2 = new Shared_Solar_System__c(
            Name = 'Test Project 2',
            Billing_Method__c = 'NMC'
        );
        insert new List<Shared_Solar_System__c>{sss1, sss2};

        Production__c productionOne = new Production__c(
            Name = 'Production A',
            Shared_Solar_System__c = sss1.Id,
            Production_kWh__c = 126218,
            Credits_Generated__c = 8000,
            Start_Date__c = lastMonthStart,
            End_Date__c = lastMonthEnd
        );
        Production__c productionTwo = new Production__c(
            Name = 'Production B',
            Shared_Solar_System__c = sss1.Id,
            Production_kWh__c = 15000,
            Credits_Generated__c = 8000,
            Start_Date__c = lastMonthStart,
            End_Date__c = lastMonthEnd
        );
        Production__c productionThree = new Production__c(
            Name = 'Production C',
            Shared_Solar_System__c = sss2.Id,
            Production_kWh__c = 15000,
            Credits_Generated__c = 8000,
            Start_Date__c = lastMonthStart,
            End_Date__c = lastMonthEnd
        );
        insert new List<Production__c>{productionOne, productionTwo, productionThree};

        Bill_Period__c billPeriod = new Bill_Period__c(
            Name = 'sssA - August 2016',
            Shared_Solar_System__c = sss1.Id,
            Bill_Date__c = lastMonthStart
        );
        insert billPeriod;

        Transfer__c transferOne = new Transfer__c(
            Name = 'TransferA',
            Transfer_Type__c = 'Main',
            Shared_Solar_System__c = sss1.Id,
            Attempted_Transfer__c = 1000,
            Attempted_kWh_Transfer__c = 126218,
            Transfer_kWh__c = 126218,
            Transfer_Amount__c = 122924,
            Date_of_Transfer__c = lastMonthStart + 4,
            Bill_Period__c = billPeriod.Id,
            Default_Credit_Value__c = .07660100
        );
        Transfer__c transferTwo = new Transfer__c(
            Name = 'TransferB',
            Transfer_Type__c = 'Main',
            Shared_Solar_System__c = sss1.Id,
            Attempted_Transfer__c = 1000,
            Attempted_kWh_Transfer__c = 19000,
            Transfer_kWh__c = 19000,
            Transfer_Amount__c = 1000,
            Date_of_Transfer__c = lastMonthStart + 4,
            Bill_Period__c = billPeriod.Id,
            Default_Credit_Value__c = .07660100
        );
        Transfer__c transferThree = new Transfer__c(
            Name = 'TransferC',
            Transfer_Type__c = 'Main',
            Shared_Solar_System__c = sss2.Id,
            Attempted_Transfer__c = 1000,
            Attempted_kWh_Transfer__c = 19000,
            Transfer_kWh__c = 19000,
            Transfer_Amount__c = 2000,
            Date_of_Transfer__c = lastMonthStart + 4
        );
        insert new List<Transfer__c>{transferOne, transferTwo, transferThree};

        Transfer_Part__c utilityFeeOne = new Transfer_Part__c(
            Name = 'Eversource Utility Fee',
            Production__c = productionOne.Id,
            Type__c = 'Fee',
            Amount__c = 10
        );
        Transfer_Part__c utilityFeeTwo = new Transfer_Part__c(
            Name = 'Eversource Utility Fee',
            Production__c = productionTwo.Id,
            Type__c = 'Fee',
            Amount__c = 10
        );
        Transfer_Part__c transferPartOne = new Transfer_Part__c(
            Transfer__c = transferOne.Id,
            Production__c = productionOne.Id,
            Type__c = 'Transfer',
            Amount__c = 1000,
            kWh_Amount__c = 122924
        );
        Transfer_Part__c transferPartTwo = new Transfer_Part__c(
            Transfer__c = transferTwo.Id,
            Production__c = productionTwo.Id,
            Type__c = 'Transfer',
            Amount__c = 333.33
        );
        Transfer_Part__c transferPartThree = new Transfer_Part__c(
            Transfer__c = transferTwo.Id,
            Production__c = productionTwo.Id,
            Type__c = 'Transfer',
            Amount__c = 333.33
        );
        Transfer_Part__c transferPartFour = new Transfer_Part__c(
            Transfer__c = transferTwo.Id,
            Production__c = productionTwo.Id,
            Type__c = 'Transfer',
            Amount__c = 333.34
        );
        Transfer_Part__c transferPartFive = new Transfer_Part__c(
            Transfer__c = transferThree.Id,
            Production__c = productionThree.Id,
            Type__c = 'Transfer',
            Amount__c = 1999.93
        );
        Transfer_Part__c transferPartSix = new Transfer_Part__c(
            Transfer__c = transferThree.Id,
            Production__c = productionThree.Id,
            Type__c = 'Transfer',
            Amount__c = 0.07
        );
        Transfer_Part__c billPartOne = new Transfer_Part__c(
            Transfer__c = transferOne.Id,
            Production__c = productionOne.Id,
            Journal_Entry__c = entryOne.Id,
            Type__c = 'Bill',
            Amount__c = 100
        );
        Transfer_Part__c billPartTwo = new Transfer_Part__c(
            Transfer__c = transferTwo.Id,
            Production__c = productionTwo.Id,
            Journal_Entry__c = entryOne.Id,
            Type__c = 'Bill',
            Amount__c = 33.33
        );
        Transfer_Part__c billPartThree = new Transfer_Part__c(
            Transfer__c = transferTwo.Id,
            Production__c = productionTwo.Id,
            Journal_Entry__c = entryOne.Id,
            Type__c = 'Bill',
            Amount__c = 33.33
        );
        Transfer_Part__c billPartFour = new Transfer_Part__c(
            Transfer__c = transferTwo.Id,
            Production__c = productionTwo.Id,
            Journal_Entry__c = entryOne.Id,
            Type__c = 'Bill',
            Amount__c = 33.34
        );
        Transfer_Part__c billPartFive = new Transfer_Part__c(
            Transfer__c = transferThree.Id,
            Production__c = productionThree.Id,
            Journal_Entry__c = entryTwo.Id,
            Type__c = 'Bill',
            Amount__c = 199.93
        );
        Transfer_Part__c billPartSix = new Transfer_Part__c(
            Transfer__c = transferThree.Id,
            Production__c = productionThree.Id,
            Journal_Entry__c = entryTwo.Id,
            Type__c = 'Bill',
            Amount__c = 0.07
        );
        insert new List<Transfer_Part__c>{
            transferPartOne, transferPartTwo, transferPartThree,
            transferPartFour, transferPartFive, transferPartSix,
            utilityFeeOne, utilityFeeTwo,
            billPartOne, billPartTwo, billPartThree,
            billPartFour, billPartFive, billPartSix
        };

        Transfer_Part__c paymentPartOne = new Transfer_Part__c(
            Transfer__c = transferThree.Id,
            Production__c = productionThree.Id,
            Journal_Entry__c = entryTwo.Id,
            Type__c = 'Payment',
            Bill_Part__c = billPartOne.Id,
            Amount__c = 50.12
        );
        Transfer_Part__c paymentPartTwo = new Transfer_Part__c(
            Transfer__c = transferThree.Id,
            Production__c = productionThree.Id,
            Journal_Entry__c = entryTwo.Id,
            Type__c = 'Payment',
            Bill_Part__c = billPartFive.Id,
            Amount__c = 60.12
        );
        Transfer_Part__c paymentPartThree = new Transfer_Part__c(
            Transfer__c = transferThree.Id,
            Production__c = productionThree.Id,
            Journal_Entry__c = entryTwo.Id,
            Type__c = 'Payment',
            Bill_Part__c = billPartFive.Id,
            Amount__c = 40.12
        );
        insert new List<Transfer_Part__c>{
            paymentPartOne, paymentPartTwo, paymentPartThree
        };
    }

    @isTest
    public static void testGetTransferPartMap() {
        Set<Id> idSet = new Set<Id>();
        List<Transfer__c> allTransfers = [
            SELECT Id
            FROM Transfer__c
            ORDER BY Name
        ];
        for (Transfer__c transfer : allTransfers){
            idSet.add(transfer.Id);
        }
        System.assertEquals(3, allTransfers.size());

        ProductionDetailSelector selector = new ProductionDetailSelector();
        Map<Id, List<Transfer_Part__c>> partsMap = selector.getTransferPartMap(idSet);

        System.assertEquals(3, partsMap.keySet().size());
        System.assertEquals(1, partsMap.get(allTransfers[0].Id).size());
        System.assertEquals(3, partsMap.get(allTransfers[1].Id).size());
        System.assertEquals(2, partsMap.get(allTransfers[2].Id).size());
    }

    @isTest
    public static void testGetTransferPartList() {
        Set<Id> idSet = new Set<Id>();
        List<Transfer__c> allTransfers = [
            SELECT Id
            FROM Transfer__c
            ORDER BY Name
        ];
        for (Transfer__c transfer : allTransfers){
            idSet.add(transfer.Id);
        }
        System.assertEquals(3, allTransfers.size());

        ProductionDetailSelector selector = new ProductionDetailSelector();
        List<Transfer_Part__c> partsMap = selector.getPartsFromTransfer(idSet);

        System.assertEquals(6, partsMap.size());
    }

    @isTest
    public static void testGetInvoicePartMap(){
        Set<String> entryExternalIds = new Set<String>{
            '2c92c0fa6e3a9391016e3e30d48066d2','2c92c0fa6e3a9391016e3df87b1f687a'
        };

        ProductionDetailSelector selector = new ProductionDetailSelector();
        Map<String, List<Transfer_Part__c>> partsMap = selector.getInvoicePartMap(entryExternalIds);

        System.assertEquals(2,partsMap.keySet().size());
        System.assertEquals(2,partsMap.get('2c92c0fa6e3a9391016e3e30d48066d2').size());
        System.assertEquals(4,partsMap.get('2c92c0fa6e3a9391016e3df87b1f687a').size());
    }

    @isTest
    public static void testGetPaymentSum(){
        Set<String> entryExternalIds = new Set<String>{
            '2c92c0fa6e3a9391016e3e30d48066d2','2c92c0fa6e3a9391016e3df87b1f687a'
        };

        ProductionDetailSelector selector = new ProductionDetailSelector();
        Map<Id,Decimal> paymentMap = selector.getPaymentSum(entryExternalIds);

        List<Transfer_Part__c> entries = [
            SELECT Id, Journal_Entry__r.External_Id__c
            FROM Transfer_Part__c
            WHERE Type__c = 'Bill'
            AND (Amount__c = 100 OR Amount__c = 199.93)
            ORDER BY Amount__c
            LIMIT 2
        ];

        System.assertEquals(50.12,paymentMap.get(entries[0].Id));
        System.assertEquals(100.24,paymentMap.get(entries[1].Id));
    }

    @IsTest
    public static void testGetProductionDetailsByContract() {
        Map<Id, Contract> contractMap = new Map<Id, Contract>([SELECT Id FROM Contract]);
        List<Transfer_Part__c> productionDetails =
            new ProductionDetailSelector().getRecentUtilizationChangesByContract(contractMap.keySet());
        System.assertEquals(0, productionDetails.size());
    }
}