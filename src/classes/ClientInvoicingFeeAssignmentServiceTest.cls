@SuppressWarnings('PMD.AvoidHardcodingId')
@IsTest
public class ClientInvoicingFeeAssignmentServiceTest {
    @IsTest
    private static void testCFDsSpecificToSSSes() {
        ClientInvoicingFeeAssignmentService assignmentService = new ClientInvoicingFeeAssignmentService(null);

        Contract_Fee_Detail__c defaultSSS = new Contract_Fee_Detail__c(
            Id = Util.getFakeId(Contract_Fee_Detail__c.SObjectType),
            Contract__c = Util.getFakeId(Contract.SObjectType),
            Acquisition_Channels_BCS_Acquired__c = true,
            Acquisition_Cust_Group_Residential__c = true,
            Acquisition_Sizing_Type_Upsizing__c = true,
            Acquisition_Type_Acquisition__c = true,
            Acquisition_Cust_Group_Not_Specified__c = true,
            Fee__c = 0.10,
            Approval_Status__c = 'Approved'
        );
        Contract_Fee_Detail__c sssSpecific = new Contract_Fee_Detail__c(
            Id = Util.incrementFakeId(defaultSSS.Id),
            Contract__c = Util.getFakeId(Contract.SObjectType),
            Shared_Solar_System__c = Util.getFakeId(Shared_Solar_System__c.SObjectType),
            Acquisition_Channels_BCS_Acquired__c = true,
            Acquisition_Cust_Group_Residential__c = true,
            Acquisition_Sizing_Type_Upsizing__c = true,
            Acquisition_Type_Acquisition__c = true,
            Acquisition_Cust_Group_Not_Specified__c = true,
            Fee__c = 10,
            Approval_Status__c = 'Approved'
        );
        Contract_Fee_Detail__c duplicateSSSSpecific = new Contract_Fee_Detail__c(
            Id = Util.incrementFakeId(defaultSSS.Id),
            Contract__c = Util.getFakeId(Contract.SObjectType),
            Shared_Solar_System__c = Util.getFakeId(Shared_Solar_System__c.SObjectType),
            Acquisition_Channels_BCS_Acquired__c = true,
            Acquisition_Cust_Group_Residential__c = true,
            Acquisition_Sizing_Type_Upsizing__c = true,
            Acquisition_Type_Acquisition__c = true,
            Acquisition_Cust_Group_Not_Specified__c = true,
            Fee__c = 10,
            Approval_Status__c = 'Approved'
        );
        Contract_Fee_Detail__c otherSSSSpecific = new Contract_Fee_Detail__c(
            Id = Util.incrementFakeId(sssSpecific.Id),
            Contract__c = Util.getFakeId(Contract.SObjectType),
            Shared_Solar_System__c = Util.incrementFakeId(sssSpecific.Shared_Solar_System__c),
            Acquisition_Channels_BCS_Acquired__c = true,
            Acquisition_Cust_Group_Residential__c = true,
            Acquisition_Sizing_Type_Upsizing__c = true,
            Acquisition_Type_Acquisition__c = true,
            Acquisition_Cust_Group_Not_Specified__c = true,
            Fee__c = 10,
            Approval_Status__c = 'Approved'
        );

        SubscriptionOrder subscriptionOrder =
            new SubscriptionOrder(getSubscriptionOrder());
        Subscription_Order__c subscriptionOrderWithCFD;

        ContractRepository.convertContractFeeListToFeeDetailMap(new List<Contract_Fee_Detail__c>{defaultSSS});
        subscriptionOrderWithCFD =
            assignmentService.matchSubscriptionOrderToFee(subscriptionOrder);
        System.assertEquals(defaultSSS.Id, subscriptionOrderWithCFD.Contract_Fee_Detail__c,
            'Since there are no system specific CFDs, we expect the SO to match the non-system specific one'
        );

        ContractRepository.convertContractFeeListToFeeDetailMap(new List<Contract_Fee_Detail__c>{defaultSSS, sssSpecific});
        System.assertEquals(sssSpecific.Shared_Solar_System__c, subscriptionOrder.sharedSolarSystemId,
            'The test setup should have a SSS-specific CFD and a SO specifying that system');
        subscriptionOrderWithCFD =
            assignmentService.matchSubscriptionOrderToFee(subscriptionOrder);
        System.assertEquals(sssSpecific.Id, subscriptionOrderWithCFD.Contract_Fee_Detail__c,
            'Expected to get an SO to update with the SSS-Specific CFD'
        );

        ContractRepository.convertContractFeeListToFeeDetailMap(new List<Contract_Fee_Detail__c>{defaultSSS, otherSSSSpecific});
        subscriptionOrderWithCFD =
            assignmentService.matchSubscriptionOrderToFee(subscriptionOrder);
        System.assertEquals(defaultSSS.Id, subscriptionOrderWithCFD.Contract_Fee_Detail__c,
            'There is another SSS-specific CFD, but not the SSS that is on the SO, so the match should use the default CFD'
        );

        System.assertEquals(null, Logger.logs, 'There should be no logs before matching with duplicates');
        ContractRepository.convertContractFeeListToFeeDetailMap(
            new List<Contract_Fee_Detail__c>{defaultSSS, sssSpecific, otherSSSSpecific, duplicateSSSSpecific}
        );
        subscriptionOrderWithCFD =
            assignmentService.matchSubscriptionOrderToFee(subscriptionOrder);
        System.assert(
            sssSpecific.Id == subscriptionOrderWithCFD.Contract_Fee_Detail__c ||
                duplicateSSSSpecific.Id == subscriptionOrderWithCFD.Contract_Fee_Detail__c,
            'We should have selected one of the SSS specific CFDs for this SO'
        );
        System.assertEquals(1, Logger.logs.size(), 'There should be a single list of messages for matchSubscriptionOrderToFee');
        System.assertEquals(1, Logger.logs.values()[0].size(), 'There should just be one log later message for duplicate CFDs found');
        System.assert(Logger.logs.values()[0][0].message.contains('Multiple CFDs found for SO'), Logger.logs.values()[0][0].message);

        ContractRepository.convertContractFeeListToFeeDetailMap(new List<Contract_Fee_Detail__c>{defaultSSS, sssSpecific});
        System.assertEquals(sssSpecific.Shared_Solar_System__c, subscriptionOrder.sharedSolarSystemId,
            'The test setup should have a SSS-specific CFD and a SO specifying that system');
        subscriptionOrder.contractFeeDetailId = sssSpecific.Id;
        subscriptionOrderWithCFD =
            assignmentService.matchSubscriptionOrderToFee(subscriptionOrder);
        System.assertEquals(sssSpecific.Id, subscriptionOrderWithCFD.Contract_Fee_Detail__c,
            'The SO already had the system-specific CFD on it, and should retain it after running fee assignment'
        );
    }

    @IsTest
    private static void testSetSubscriptionOrderAcquisitionFee() {
        useMocks();
        List<Subscription_Order__c> ordersToRun = getSubscriptionOrderMocks();
        System.assertEquals(14,ordersToRun.size());
        ClientInvoicingFeeAssignmentService service = new ClientInvoicingFeeAssignmentService(CollectionUtil.getIdSet(ordersToRun));
        service.setSubscriptionOrderAcquisitionFee();
        List<Subscription_Order__c> ordersToUpdate = (List<Subscription_Order__c>)
            FFLibHelperTest.getRegisterDirtyListFromUnitOfWork(service.uow, 'Subscription_Order__c');
        for (Subscription_Order__c order : ordersToUpdate){
            String subOrderIdAsString = order.Id;
            String feeDetailIdAsString = order.Contract_Fee_Detail__c;
            String message = 'Could not match contract fee detail to SO where: ';
            switch on subOrderIdAsString {
                when 'a9W3F000000A1P6UAK' {
                    System.assertEquals(
                        'a123F000001VLE7AAA',
                        feeDetailIdAsString,
                        message + 'bcs acquired, residential, upsizing, reacq start date is in future'
                    );
                }
                when 'a9W3F000000A1P7UAK' {
                    System.assertEquals(
                        'a123F000001VLE7BBB',
                        feeDetailIdAsString,
                        message + 'not bcs acquired, residential, upsizing, reacq start date is in future'
                    );
                }
                when 'a9W3F000000A2P6UAK' {
                    System.assertEquals(
                        'a123F000001VLE7EEE',
                        feeDetailIdAsString,
                        message + 'bcs acquired, residential, upsizing, reacq start date is in past'
                    );
                }
                when 'a9W3F000000A2P7UAK' {
                    System.assertEquals(
                        'a123F000001VLE7BBB',
                        feeDetailIdAsString,
                        message + 'not bcs acquired, residential, upsizing, reacq start date is null'
                    );
                }
                when 'a9W3F000000A1P8UAK' {
                    System.assertEquals(
                        'a123F000001VLE7AAA',
                        feeDetailIdAsString,
                        message + 'bcs acquired, residential, downsizing, reacq start date is null'
                    );
                }
                when 'a9W3F000000A1P9UAK' {
                    System.assertEquals(
                        'a123F000001VLE7HHH',
                        feeDetailIdAsString,
                        message + 'bcs acquired, residential, upsizing, reacq start date is null'
                    );
                }
                when 'a9W3F000000A1Q9UAK' {
                    System.assertEquals(
                        'a123F000001VLE7HHH',
                        feeDetailIdAsString,
                        message + 'bcs acquired, non-residential, upsizing, reacq start date is null'
                    );
                }
                when 'a9W3F000000A1R9UAK' {
                    System.assertEquals(
                        'a123F000001VLE7AAA',
                        feeDetailIdAsString,
                        message + 'bcs acquired, non-residential, upsizing, reacq start date is null'
                    );
                }
                when 'a9W3F000000A1S9UAK' {
                    System.assertEquals(
                        'a123F000001VLE7BBB',
                        feeDetailIdAsString,
                        message + 'not bcs acquired, non-residential, upsizing, reacq start date is null'
                    );
                }
                when 'a9W3F000000A1T9UAK' {
                    System.assertEquals(
                        'a123F000001VLE7CCC',
                        feeDetailIdAsString,
                        message + 'not bcs acquired, anchor, upsizing, reacq start date is null'
                    );
                }
                when 'a9W3F000000A1U7UAK' {
                    System.assertEquals(
                        'a123F000001VLE7CCC',
                        feeDetailIdAsString,
                        message + 'bcs acquired, anchor, public offtake, upsizing, reacq start date is null'
                    );
                }
                when 'a9W3F000000A2U7UAK' {
                    System.assertEquals(
                        'a123F000001VLE7DDD',
                        feeDetailIdAsString,
                        message + 'bcs acquired, public offtake, upsizing, reacq start date is in past'
                    );
                }
                when 'a9W3F000000A1V9UAK' {
                    System.assertEquals(
                        'a123F000001VLE7GGG',
                        feeDetailIdAsString,
                        message + 'bcs acquired, non-investment grade anchor, downsizing, reacq start date is null'
                    );
                }
                when 'a9W3F000000A5P7UAK' {
                    System.assertEquals(
                        'a123F000001VLE7III',
                        feeDetailIdAsString,
                        message + 'client acquired, bcs closed'
                    );
                }
                when else {
                    System.assert(false,'Did not expect this Sub. Order ID' + subOrderIdAsString);
                }
            }
        }
        System.assertEquals(14,ordersToUpdate.size());
    }
    @IsTest
    private static void testGetCancellationRate (){
        useMocks();
        ContractRepository.initFromContractIds(new Set<Id>());
        List<Subscription_Order__c> ordersToRun = getSubscriptionOrderMocks();
        System.assertEquals(14, ordersToRun.size());
        System.assertEquals(0.14,new SubscriptionOrder(ordersToRun[0]).getCancellationFee(), 'Expected upsizing reacq rate for BCS Acquired Small Offtake');
        System.assertEquals(0.15,new SubscriptionOrder(ordersToRun[1]).getCancellationFee(), 'Expected upsizing reacq rate for NON-BCS Acquired Small Offtake');
        System.assertEquals(0.14,new SubscriptionOrder(ordersToRun[2]).getCancellationFee(), 'Expected upsizing reacq rate for BCS Acquired Small Offtake');
        System.assertEquals(0.15,new SubscriptionOrder(ordersToRun[3]).getCancellationFee(), 'Expected upsizing reacq rate for NON-BCS Acquired Small Offtake');
        System.assertEquals(0.14,new SubscriptionOrder(ordersToRun[4]).getCancellationFee(), 'Expected upsizing reacq rate for BCS Acquired Small Offtake');
    }
    @IsTest
    private static void testMatchingLogic() {
        SubscriptionOrder so = new SubscriptionOrder(new Subscription_Order__c());
        setDefaultBooleans(so);
        ContractFeeDetail cfd = new ContractFeeDetail();
        setDefaultBooleans(cfd);

        so.residential = true;
        so.acquisition = true;
        so.closedByBCS = true;
        so.bcsAcquired = true;
        so.publicOfftake = false;
        so.notPublicOfftake = true;

        cfd.residential = true;
        cfd.acquisition = true;
        cfd.closedByBCS = true;
        cfd.bcsAcquired = true;
        cfd.publicOfftake = false;
        cfd.notPublicOfftake = true;
        System.assert(cfd.matches(so), 'Simple Acquisition SO and CFD should match');

        cfd.sharedSolarSystemId = Util.getFakeId(Shared_Solar_System__c.SObjectType);
        System.assert(cfd.matches(so), 'CFD should match SO if they both have the same system');

        cfd.sharedSolarSystemId = Util.incrementFakeId(cfd.sharedSolarSystemId);
        System.assert(!cfd.matches(so), 'CFD should not match SO if they do not have the same system');

        cfd.sharedSolarSystemId = null;
        so.publicOfftake = true;
        so.notPublicOfftake = false;
        System.assert(!cfd.matches(so),
            'SOs are usually not public offtake. ' +
                'This should no longer match the CFD, since the CFD does not apply to public offtake or not public offtake');

        cfd.publicOfftake = true;
        cfd.notPublicOfftake = true;
        System.assert(cfd.matches(so),
            'The Not Public Offtake checkbox is checked by default on CFD, and a validation requires that,' +
                ' or the Public Offtake checkbox, or both, to be checked, so this should match now');

        so.residential = false;
        so.anchor = true;
        so.publicOfftake = false;
        so.notPublicOfftake = true;
        so.investmentGradeAnchor = false;
        so.notInvestmentGradeAnchor = true;

        cfd.anchor = true;
        cfd.publicOfftake = false;
        cfd.notPublicOfftake = true;
        cfd.investmentGradeAnchor = false;
        cfd.notInvestmentGradeAnchor = true;
        System.assert(cfd.matches(so),
            'A non-investment grade anchor SO should match a non-investment grade anchor CFD');

        so.investmentGradeAnchor = true;
        so.notInvestmentGradeAnchor = false;
        System.assert(!cfd.matches(so),
            'An investment grade anchor SO should NOT match a non-investment grade anchor CFD');

    }
    private static void useMocks() {
        ContractRepository.contractFeeDetailSelector = (ContractFeeDetailSelector) Test.createStub(ContractFeeDetailSelector.class, new MockFeeDetailSelector());
        ClientInvoicingFeeAssignmentService.subscriptionOrderSelector = (SubscriptionOrderSelector) Test.createStub(SubscriptionOrderSelector.class, new MockSubscriptionOrderSelector());
    }
    private class MockFeeDetailSelector extends MockProvider {
        @SuppressWarnings('PMD.ApexDoc')
        public override Object handleMethodCall(MethodCall methodCall) {
            Contract_Fee_Detail__c acqBcsAcquiredNonAnchor = new Contract_Fee_Detail__c(
                Id = 'a123F000001VLE7AAA',
                Contract__c = '8003F000000KMD9QAO',
                Acquisition_Channels_BCS_Acquired__c = true,
                Acquisition_Channels_Non_BCS_Acquired__c = false,
                Acquisition_Channels_Closed_by_BCS__c = false,
                Acquisition_Cust_Group_Anchor__c = false,
                Acquisition_Cust_Group_Public_Offtake__c = false,
                Acquisition_Cust_Group_Not_Specified__c = true,
                Acquisition_Cust_Group_Residential__c = true,
                Acquisition_Cust_Group_Non_Residential__c = true,
                Acquisition_Sizing_Type_Downsizing__c = false,
                Acquisition_Sizing_Type_Upsizing__c = true,
                Acquisition_Type_Acquisition__c = true,
                Acquisition_Type_Reacquisition__c = false,
                Fee__c = 0.10,
                Approval_Status__c = 'Approved'
            );
            Contract_Fee_Detail__c acqNonBcsAcquiredNonAnchor = new Contract_Fee_Detail__c(
                Id = 'a123F000001VLE7BBB',
                Contract__c = '8003F000000KMD9QAO',
                Acquisition_Channels_BCS_Acquired__c = false,
                Acquisition_Channels_Non_BCS_Acquired__c = true,
                Acquisition_Channels_Closed_by_BCS__c = false,
                Acquisition_Cust_Group_Anchor__c = false,
                Acquisition_Cust_Group_Public_Offtake__c = false,
                Acquisition_Cust_Group_Not_Specified__c = true,
                Acquisition_Cust_Group_Residential__c = true,
                Acquisition_Cust_Group_Non_Residential__c = true,
                Acquisition_Sizing_Type_Downsizing__c = false,
                Acquisition_Sizing_Type_Upsizing__c = true,
                Acquisition_Type_Acquisition__c = true,
                Acquisition_Type_Reacquisition__c = false,
                Fee__c = 0.11,
                Approval_Status__c = 'Approved'
            );
            Contract_Fee_Detail__c acqAnchor = new Contract_Fee_Detail__c(
                Id = 'a123F000001VLE7CCC',
                Contract__c = '8003F000000KMD9QAO',
                Acquisition_Channels_BCS_Acquired__c = true,
                Acquisition_Channels_Non_BCS_Acquired__c = true,
                Acquisition_Channels_Closed_by_BCS__c = false,
                Acquisition_Cust_Group_Anchor__c = true,
                Acquisition_Cust_Group_Public_Offtake__c = true,
                Acquisition_Cust_Group_Not_Specified__c = true,
                Acquisition_Cust_Group_Residential__c = false,
                Acquisition_Cust_Group_Non_Residential__c = false,
                Acq_Anchor_Qualif_Investment_Grade__c = true,
                Acq_Anchor_Qualif_Not_Investment_Grade__c = false,
                Acquisition_Sizing_Type_Downsizing__c = false,
                Acquisition_Sizing_Type_Upsizing__c = true,
                Acquisition_Type_Acquisition__c = true,
                Acquisition_Type_Reacquisition__c = false,
                Fee__c = 0.12,
                Approval_Status__c = 'Approved'
            );
            Contract_Fee_Detail__c reacqAnchor = new Contract_Fee_Detail__c(
                Id = 'a123F000001VLE7DDD',
                Contract__c = '8003F000000KMD9QAO',
                Acquisition_Channels_BCS_Acquired__c = true,
                Acquisition_Channels_Non_BCS_Acquired__c = true,
                Acquisition_Channels_Closed_by_BCS__c = false,
                Acquisition_Cust_Group_Anchor__c = true,
                Acquisition_Cust_Group_Public_Offtake__c = true,
                Acquisition_Cust_Group_Not_Specified__c = false,
                Acquisition_Cust_Group_Residential__c = false,
                Acquisition_Cust_Group_Non_Residential__c = false,
                Acq_Anchor_Qualif_Investment_Grade__c = true,
                Acq_Anchor_Qualif_Not_Investment_Grade__c = true,
                Acquisition_Sizing_Type_Downsizing__c = false,
                Acquisition_Sizing_Type_Upsizing__c = true,
                Acquisition_Type_Acquisition__c = false,
                Acquisition_Type_Reacquisition__c = true,
                Fee__c = 0.13,
                Approval_Status__c = 'Approved'
            );
            Contract_Fee_Detail__c reacqBcsAcquiredNonAnchor = new Contract_Fee_Detail__c(
                Id = 'a123F000001VLE7EEE',
                Contract__c = '8003F000000KMD9QAO',
                Acquisition_Channels_BCS_Acquired__c = true,
                Acquisition_Channels_Non_BCS_Acquired__c = false,
                Acquisition_Channels_Closed_by_BCS__c = false,
                Acquisition_Cust_Group_Anchor__c = false,
                Acquisition_Cust_Group_Public_Offtake__c = false,
                Acquisition_Cust_Group_Not_Specified__c = true,
                Acquisition_Cust_Group_Residential__c = true,
                Acquisition_Cust_Group_Non_Residential__c = true,
                Acquisition_Sizing_Type_Downsizing__c = false,
                Acquisition_Sizing_Type_Upsizing__c = true,
                Acquisition_Type_Acquisition__c = false,
                Acquisition_Type_Reacquisition__c = true,
                Fee__c = 0.14,
                Approval_Status__c = 'Approved'
            );
            Contract_Fee_Detail__c reacqNonBcsAcquiredNonAnchor = new Contract_Fee_Detail__c(
                Id = 'a123F000001VLE7FFF',
                Contract__c = '8003F000000KMD9QAO',
                Acquisition_Channels_BCS_Acquired__c = false,
                Acquisition_Channels_Non_BCS_Acquired__c = true,
                Acquisition_Channels_Closed_by_BCS__c = false,
                Acquisition_Cust_Group_Anchor__c = false,
                Acquisition_Cust_Group_Public_Offtake__c = false,
                Acquisition_Cust_Group_Not_Specified__c = true,
                Acquisition_Cust_Group_Residential__c = true,
                Acquisition_Cust_Group_Non_Residential__c = true,
                Acquisition_Sizing_Type_Downsizing__c = false,
                Acquisition_Sizing_Type_Upsizing__c = true,
                Acquisition_Type_Acquisition__c = false,
                Acquisition_Type_Reacquisition__c = true,
                Fee__c = 0.15,
                Approval_Status__c = 'Approved'
            );
             Contract_Fee_Detail__c anchorDownsizing = new Contract_Fee_Detail__c(
                Id = 'a123F000001VLE7GGG',
                Contract__c = '8003F000000KNC9QAO',
                Acquisition_Channels_BCS_Acquired__c = true,
                Acquisition_Channels_Non_BCS_Acquired__c = false,
                Acquisition_Channels_Closed_by_BCS__c = false,
                Acquisition_Cust_Group_Anchor__c = true,
                Acquisition_Cust_Group_Public_Offtake__c = false,
                 Acquisition_Cust_Group_Not_Specified__c = true,
                 Acquisition_Cust_Group_Residential__c = false,
                Acquisition_Cust_Group_Non_Residential__c = false,
                Acq_Anchor_Qualif_Investment_Grade__c = false,
                Acq_Anchor_Qualif_Not_Investment_Grade__c = true,
                Acquisition_Sizing_Type_Downsizing__c = true,
                Acquisition_Sizing_Type_Upsizing__c = false,
                Acquisition_Type_Acquisition__c = true,
                Acquisition_Type_Reacquisition__c = false,
                Fee__c = 0.16,
                Approval_Status__c = 'Approved'
            );
            Contract_Fee_Detail__c sameRateForAll = new Contract_Fee_Detail__c(
                Id = 'a123F000001VLE7HHH',
                Contract__c = '8003F000000KHH9QAO',
                Acquisition_Channels_BCS_Acquired__c = true,
                Acquisition_Channels_Non_BCS_Acquired__c = true,
                Acquisition_Channels_Closed_by_BCS__c = false,
                Acquisition_Cust_Group_Anchor__c = true,
                Acquisition_Cust_Group_Public_Offtake__c = true,
                Acquisition_Cust_Group_Not_Specified__c = true,
                Acquisition_Cust_Group_Residential__c = true,
                Acquisition_Cust_Group_Non_Residential__c = true,
                Acq_Anchor_Qualif_Investment_Grade__c = true,
                Acq_Anchor_Qualif_Not_Investment_Grade__c = true,
                Acquisition_Sizing_Type_Downsizing__c = true,
                Acquisition_Sizing_Type_Upsizing__c = true,
                Acquisition_Type_Acquisition__c = true,
                Acquisition_Type_Reacquisition__c = true,
                Fee__c = 0.17,
                Approval_Status__c = 'Approved'
            );
            Contract_Fee_Detail__c acqClientClosedBCS = new Contract_Fee_Detail__c(
                Id = 'a123F000001VLE7III',
                Contract__c = '8003F000000KMD9QAO',
                Acquisition_Channels_BCS_Acquired__c = false,
                Acquisition_Channels_Non_BCS_Acquired__c = true,
                Acquisition_Channels_Closed_by_BCS__c = true,
                Acquisition_Cust_Group_Anchor__c = false,
                Acquisition_Cust_Group_Public_Offtake__c = false,
                Acquisition_Cust_Group_Not_Specified__c = true,
                Acquisition_Cust_Group_Residential__c = true,
                Acquisition_Cust_Group_Non_Residential__c = true,
                Acquisition_Sizing_Type_Downsizing__c = false,
                Acquisition_Sizing_Type_Upsizing__c = true,
                Acquisition_Type_Acquisition__c = true,
                Acquisition_Type_Reacquisition__c = false,
                Fee__c = 0.09,
                Approval_Status__c = 'Approved'
            );
            List<Contract_Fee_Detail__c> cfdList = new List<Contract_Fee_Detail__c>{
                acqBcsAcquiredNonAnchor, acqNonBcsAcquiredNonAnchor, acqClientClosedBCS, acqAnchor,
                reacqBcsAcquiredNonAnchor, reacqNonBcsAcquiredNonAnchor, reacqAnchor,
                anchorDownsizing, sameRateForAll
            };
            switch on methodCall.stubbedMethodName {
                when 'getContractDetailFromContract' {
                    return cfdList;
                }
            }
            return null;
        }
    }
    private class MockSubscriptionOrderSelector extends MockProvider {
        @SuppressWarnings('PMD.ApexDoc')
        public override Object handleMethodCall(MethodCall methodCall) {
            switch on methodCall.stubbedMethodName {
                when 'selectByIds' {
                    return getSubscriptionOrderMocks();
                }
            }
            return null;
        }
    }
    private static List<Subscription_Order__c> getSubscriptionOrderMocks(){
        Date today = System.today();
        Date monthFromToday = today.addMonths(1);
        Date monthAgo = today.addMonths(-1);
        String queryData = '[' +
            '{"Id":"a9W3F000000A1P6UAK","Effective_Date__c":"'+ String.valueOf(today) +'","Utility_Account_Subscription__c":"a1d3F0000013EV1QAM",' +
            '"Approved_Change_in_Subscription__c":12.00,' +
            '"Utility_Account_Subscription__r":{"Id":"a1d3F0000013EV1QAM",' +
            '"Opportunity__c":"0063F00000MVO8EQAX",' +
            '"Shared_Solar_System__c":"a1J3F00000122b7UAA",' +
            '"Shared_Solar_System__r":{"Client_Acquisition_Contract__c":"8003F000000KMD9QAO",' +
            '"Reacquisition_Start_Date__c":"' + String.valueOf(monthFromToday) + '"},' +
            '"Opportunity__r":{"Id":"0063F00000MVO8EQAX","Customer_Group__c":"Residential",' +
            '"Acquired_By_Client_Closed_By_BlueWave__c" : "false",' +
            '"Partner_tag_lookup__c":"a0s3F000000thIBQAY",' +
            '"Partner_tag_lookup__r":{"Id":"a0s3F000000thIBQAY", ' +
            '"Account__r":{"Id":"0013F00000Y6WrnQAF","RecordType":{"Name":"Partner Account"}}}' +
            '}}},' +
            '{"Id":"a9W3F000000A1P7UAK","Effective_Date__c":"'+ String.valueOf(today) +'","Utility_Account_Subscription__c":"a1d3F0000014EV1QAM",' +
            '"Approved_Change_in_Subscription__c":12.00,' +
            '"Utility_Account_Subscription__r":{"Id":"a1d3F0000014EV1QAM",' +
            '"Opportunity__c":"0063F00000MVO9EQAX",' +
            '"Shared_Solar_System__c":"a1J3F00000122b7UAA",' +
            '"Shared_Solar_System__r":{"Client_Acquisition_Contract__c":"8003F000000KMD9QAO",' +
            '"Client_Management_Contract__c":"8003F000000KNC9QAO",' +
            '"Reacquisition_Start_Date__c":"' + String.valueOf(monthFromToday) + '"},' +
            '"Opportunity__r":{"Id":"0063F00000MVO9EQAX","Customer_Group__c":"Residential",' +
            '"Acquired_By_Client_Closed_By_BlueWave__c" : "false",' +
            '"Partner_tag_lookup__c":"a0s3F000000thIBQAY",' +
            '"Partner_tag_lookup__r":{"Id":"a0s3F000000xxIBQAY", ' +
            '"Account__r":{"Id":"0013F00000Y7WrnQAF","RecordType":{"Name":"Client Account"}}}' +
            '}}},' +
            '{"Id":"a9W3F000000A2P6UAK","Effective_Date__c":"'+ String.valueOf(today) +'","Utility_Account_Subscription__c":"a1d3F0000013EV1QAM",' +
            '"Approved_Change_in_Subscription__c":12.00,' +
            '"Utility_Account_Subscription__r":{"Id":"a1d3F0000013EV1QAM",' +
            '"Opportunity__c":"0063F00000AAO8EQAX",' +
            '"Shared_Solar_System__c":"a1J3F00000122b7UAA",' +
            '"Shared_Solar_System__r":{"Client_Acquisition_Contract__c":"8003F000000KMD9QAO",' +
            '"Client_Management_Contract__c":"8003F000000KNC9QAO",' +
            '"Reacquisition_Start_Date__c":"' + String.valueOf(monthAgo) + '"},' +
            '"Opportunity__r":{"Id":"0063F00000AAO8EQAX","Customer_Group__c":"Residential",' +
            '"Acquired_By_Client_Closed_By_BlueWave__c" : "false",' +
            '"Partner_tag_lookup__c":"a0s3F000000thIBQAY",' +
            '"Partner_tag_lookup__r":{"Id":"a0s3F000000thIBQAY", ' +
            '"Account__r":{"Id":"0013F00000Y6WrnQAF","RecordType":{"Name":"Partner Account"}}}' +
            '}}},' +
            '{"Id":"a9W3F000000A2P7UAK","Effective_Date__c":"'+ String.valueOf(today) +'","Utility_Account_Subscription__c":"a1d3F0000014EV1QAM",' +
            '"Approved_Change_in_Subscription__c":12.00,' +
            '"Utility_Account_Subscription__r":{"Id":"a1d3F0000014EV1QAM",' +
            '"Opportunity__c":"0063F00000MVO9EQAX",' +
            '"Shared_Solar_System__c":"a1J3F00000122b7UAA",' +
            '"Shared_Solar_System__r":{"Client_Acquisition_Contract__c":"8003F000000KMD9QAO",' +
            '"Client_Management_Contract__c":"8003F000000KNC9QAO",' +
            '"Reacquisition_Start_Date__c":null},' +
            '"Opportunity__r":{"Id":"0063F00000MVO9EQAX","Customer_Group__c":"Residential",' +
            '"Acquired_By_Client_Closed_By_BlueWave__c" : "false",' +
            '"Partner_tag_lookup__c":"a0s3F000000thIBQAY",' +
            '"Partner_tag_lookup__r":{"Id":"a0s3F000000xxIBQAY", ' +
            '"Account__r":{"Id":"0013F00000Y7WrnQAF","RecordType":{"Name":"Client Account"}}}' +
            '}}},' +
            '{"Id":"a9W3F000000A1P8UAK","Effective_Date__c":"'+ String.valueOf(today) +'","Utility_Account_Subscription__c":"a1d3F0000015EV1QAM",' +
            '"Approved_Change_in_Subscription__c":-12.00,' +
            '"Utility_Account_Subscription__r":{"Id":"a1d3F0000015EV1QAM",' +
            '"Opportunity__c":"0063F00000MXO9EQAX",' +
            '"Shared_Solar_System__c":"a1J3F00000122b7UAA",' +
            '"Shared_Solar_System__r":{"Client_Acquisition_Contract__c":"8003F000000KMD9QAO",' +
            '"Client_Management_Contract__c":"8003F000000KNC9QAO",' +
            '"Reacquisition_Start_Date__c":null},' +
            '"Opportunity__r":{"Id":"0063F00000MXO9EQAX","Customer_Group__c":"Residential",' +
            '"Acquired_By_Client_Closed_By_BlueWave__c" : "false",' +
            '"Partner_tag_lookup__c":"a0s3F000000thIBQAY",' +
            '"Partner_tag_lookup__r":{"Id":"a0s3F000000thIBQAY", ' +
            '"Account__r":{"Id":"0013F00000Y6WrnQAF","RecordType":{"Name":"Partner Account"}}}' +
            '}}},' +
            '{"Id":"a9W3F000000A1P9UAK","Effective_Date__c":"'+ String.valueOf(today) +'","Utility_Account_Subscription__c":"a1d3F0000016EV1QAM",' +
            '"Approved_Change_in_Subscription__c":12.00,' +
            '"Utility_Account_Subscription__r":{"Id":"a1d3F0000016EV1QAM",' +
            '"Opportunity__c":"0063F00000MWO9EQAX",' +
            '"Shared_Solar_System__c":"a1J3F00000122b8UAA",' +
            '"Shared_Solar_System__r":{"Client_Acquisition_Contract__c":"8003F000000KHH9QAO",' +
            '"Client_Management_Contract__c":"8003F000000KHH9QAO",' +
            '"Reacquisition_Start_Date__c":null},' +
            '"Opportunity__r":{"Id":"0063F00000MWO9EQAX","Customer_Group__c":"Residential",' +
            '"Acquired_By_Client_Closed_By_BlueWave__c" : "false",' +
            '"Partner_tag_lookup__c":"a0s3F000000thIBQAY",' +
            '"Partner_tag_lookup__r":{"Id":"a0s3F000000thIBQAY", ' +
            '"Account__r":{"Id":"0013F00000Y6WrnQAF","RecordType":{"Name":"Partner Account"}}}' +
            '}}},' +
            '{"Id":"a9W3F000000A1Q9UAK","Effective_Date__c":"'+ String.valueOf(today) +'","Utility_Account_Subscription__c":"a1d3F0000016EV1QAM",' +
            '"Approved_Change_in_Subscription__c":12.00,' +
            '"Utility_Account_Subscription__r":{"Id":"a1d3F0000016EV1QAM",' +
            '"Opportunity__c":"0063F00000MWO9EQAX",' +
            '"Shared_Solar_System__c":"a1J3F00000122b8UAA",' +
            '"Shared_Solar_System__r":{"Client_Acquisition_Contract__c":"8003F000000KHH9QAO",' +
            '"Client_Management_Contract__c":"8003F000000KHH9QAO",' +
            '"Reacquisition_Start_Date__c":null},' +
            '"Opportunity__r":{"Id":"0063F00000MWO9EQAX","Customer_Group__c":"Non-Residential",' +
            '"Acquired_By_Client_Closed_By_BlueWave__c" : "false",' +
            '"Partner_tag_lookup__c":"a0s3F000000thIBQAY",' +
            '"Partner_tag_lookup__r":{"Id":"a0s3F000000thIBQAY", ' +
            '"Account__r":{"Id":"0013F00000Y6WrnQAF","RecordType":{"Name":"Partner Account"}}}' +
            '}}},' +
            '{"Id":"a9W3F000000A1R9UAK","Effective_Date__c":"'+ String.valueOf(today) +'","Utility_Account_Subscription__c":"a1d3F0000016EV1QAM",' +
            '"Approved_Change_in_Subscription__c":12.00,' +
            '"Utility_Account_Subscription__r":{"Id":"a1d3F0000016EV1QAM",' +
            '"Opportunity__c":"0063F00000MWO9EQAX",' +
            '"Shared_Solar_System__c":"a1J3F00000122b7UAA",' +
            '"Shared_Solar_System__r":{"Client_Acquisition_Contract__c":"8003F000000KMD9QAO",' +
            '"Client_Management_Contract__c":"8003F000000KNC9QAO",' +
            '"Reacquisition_Start_Date__c":null},' +
            '"Opportunity__r":{"Id":"0063F00000MWO9EQAX","Customer_Group__c":"Non-Residential",' +
            '"Acquired_By_Client_Closed_By_BlueWave__c" : "false",' +
            '"Partner_tag_lookup__c":"a0s3F000000thIBQAY",' +
            '"Partner_tag_lookup__r":{"Id":"a0s3F000000thIBQAY", ' +
            '"Account__r":{"Id":"0013F00000Y6WrnQAF","RecordType":{"Name":"Partner Account"}}}' +
            '}}},' +
            '{"Id":"a9W3F000000A1S9UAK","Effective_Date__c":"'+ String.valueOf(today) +'","Utility_Account_Subscription__c":"a1d3F0000017EV1QAM",' +
            '"Approved_Change_in_Subscription__c":12.00,' +
            '"Utility_Account_Subscription__r":{"Id":"a1d3F0000017EV1QAM",' +
            '"Opportunity__c":"0063F00000NWO9EQAX",' +
            '"Shared_Solar_System__c":"a1J3F00000122b7UAA",' +
            '"Shared_Solar_System__r":{"Client_Acquisition_Contract__c":"8003F000000KMD9QAO",' +
            '"Client_Management_Contract__c":"8003F000000KNC9QAO",' +
            '"Reacquisition_Start_Date__c":null},' +
            '"Opportunity__r":{"Id":"0063F00000NWO9EQAX","Customer_Group__c":"Non-Residential",' +
            '"Acquired_By_Client_Closed_By_BlueWave__c" : "false",' +
            '"Partner_tag_lookup__c":"a0s3F000000thIBQAY",' +
            '"Partner_tag_lookup__r":{"Id":"a0s3F000000xxIBQAY", ' +
            '"Account__r":{"Id":"0013F00000Y7WrnQAF","RecordType":{"Name":"Client Account"}}}' +
            '}}},' +
            '{"Id":"a9W3F000000A1T9UAK","Effective_Date__c":"'+ String.valueOf(today) +'","Utility_Account_Subscription__c":"a1d3F0000018EV1QAM",' +
            '"Approved_Change_in_Subscription__c":12.00,' +
            '"Utility_Account_Subscription__r":{"Id":"a1d3F0000018EV1QAM",' +
            '"Opportunity__c":"0063F00000XQO9EQAX",' +
            '"Shared_Solar_System__c":"a1J3F00000122b7UAA",' +
            '"Shared_Solar_System__r":{"Client_Acquisition_Contract__c":"8003F000000KMD9QAO",' +
            '"Client_Management_Contract__c":"8003F000000KNC9QAO",' +
            '"Reacquisition_Start_Date__c":null},' +

            '"Opportunity__r":{"Id":"0063F00000NWO9EQAX","Customer_Group__c":"Anchor","Underwriting_Criteria__c":"Investment-Grade",' +
            '"Acquired_By_Client_Closed_By_BlueWave__c" : "false",' +
            '"Partner_tag_lookup__c":"a0s3F000000thIBQAY",' +
            '"Partner_tag_lookup__r":{"Id":"a0s3F000000xxIBQAY", ' +
            '"Account__r":{"Id":"0013F00000Y7WrnQAF","RecordType":{"Name":"Client Account"}}}' +
            '}}},' +
            '{"Id":"a9W3F000000A1U7UAK","Effective_Date__c":"'+ String.valueOf(today) +'","Utility_Account_Subscription__c":"a1d3F0000019EV1QAM",' +
            '"Approved_Change_in_Subscription__c":12.00,' +
            '"Utility_Account_Subscription__r":{"Id":"a1d3F0000019EV1QAM",' +
            '"Opportunity__c":"0063F00000XQO9EAAA",' +
            '"Shared_Solar_System__c":"a1J3F00000122b7UAA",' +
            '"Shared_Solar_System__r":{"Client_Acquisition_Contract__c":"8003F000000KMD9QAO",' +
            '"Client_Management_Contract__c":"8003F000000KNC9QAO",' +
            '"Reacquisition_Start_Date__c":null},' +

            '"Opportunity__r":{"Id":"0063F00000MVO9EQAX","Customer_Group__c":"Anchor","Customer_Sub_Group__c":"Public Offtake",' +
            '"Acquired_By_Client_Closed_By_BlueWave__c" : "false",' +
            '"Underwriting_Criteria__c" : "Investment-Grade",' +
            '"Partner_tag_lookup__c":"a0s3F000000thIBQAY",' +
            '"Partner_tag_lookup__r":{"Id":"a0s3F000000thIBQAY", ' +
            '"Account__r":{"Id":"0013F00000Y6WrnQAF","RecordType":{"Name":"Partner Account"}}}' +
            '}}},' +
            '{"Id":"a9W3F000000A2U7UAK","Effective_Date__c":"'+ String.valueOf(today) +'","Utility_Account_Subscription__c":"a1d3F0000019EV1QAM",' +
            '"Approved_Change_in_Subscription__c":12.00,' +
            '"Utility_Account_Subscription__r":{"Id":"a1d3F0000025EV1QAM",' +
            '"Opportunity__c":"0063F00000ZZO9EAAA",' +
            '"Shared_Solar_System__c":"a1J3F00000122b7UAA",' +
            '"Shared_Solar_System__r":{"Client_Acquisition_Contract__c":"8003F000000KMD9QAO",' +
            '"Client_Management_Contract__c":"8003F000000KNC9QAO",' +
            '"Reacquisition_Start_Date__c":"' + String.valueOf(monthAgo) + '"},' +

            '"Opportunity__r":{"Id":"0063F00000ZZO9EAAA","Customer_Group__c":"Anchor","Customer_Sub_Group__c":"Public Offtake",' +
            '"Acquired_By_Client_Closed_By_BlueWave__c" : "false",' +
            '"Partner_tag_lookup__c":"a0s3F000000thIBQAY",' +
            '"Partner_tag_lookup__r":{"Id":"a0s3F000000thIBQAY", ' +
            '"Account__r":{"Id":"0013F00000Y6WrnQAF","RecordType":{"Name":"Partner Account"}}}' +
            '}}},' +
            '{"Id":"a9W3F000000A5P7UAK","Effective_Date__c":"'+ String.valueOf(today) +'","Utility_Account_Subscription__c":"a1d3F0000021EV1QAM",' +
            '"Approved_Change_in_Subscription__c":12.00,' +
            '"Utility_Account_Subscription__r":{"Id":"a1d3F0000021EV1QAM",' +
            '"Opportunity__c":"0063F00000MVO6EQAX",' +
            '"Shared_Solar_System__c":"a1J3F00000122b7UAA",' +
            '"Shared_Solar_System__r":{"Client_Acquisition_Contract__c":"8003F000000KMD9QAO",' +
            '"Client_Management_Contract__c":"8003F000000KNC9QAO",' +
            '"Reacquisition_Start_Date__c":"' + String.valueOf(monthFromToday) + '"},' +
            '"Opportunity__r":{"Id":"0063F00000MVO6EQAX",' +
            '"Customer_Group__c":"Residential",' +
            '"Acquired_By_Client_Closed_By_BlueWave__c" : "true",' +
            '"Partner_tag_lookup__c":"a0s3F000000thIBQAY",' +
            '"Partner_tag_lookup__r":{"Id":"a0s3F000000xxIBQAY", ' +
            '"Account__r":{"Id":"0013F00000Y7WrnQAF","RecordType":{"Name":"Client Account"}}}' +
            '}}},' +
            '{"Id":"a9W3F000000A1V9UAK","Effective_Date__c":"'+ String.valueOf(today) +'","Utility_Account_Subscription__c":"a1d3F0000020EV1QAM",' +
            '"Approved_Change_in_Subscription__c":-12.00,' +
            '"Utility_Account_Subscription__r":{"Id":"a1d3F0000020EV1QAM",' +
            '"Opportunity__c":"0063F00000ZQO9EQAX",' +
            '"Shared_Solar_System__c":"a1J3F00000122b7UAA",' +
            '"Shared_Solar_System__r":{"Client_Acquisition_Contract__c":"8003F000000KMD9QAO",' +
            '"Client_Management_Contract__c":"8003F000000KNC9QAO",' +
            '"Reacquisition_Start_Date__c":null},' +

            '"Opportunity__r":{"Id":"0063F00000NWO9EQAX","Customer_Group__c":"Anchor","Underwriting_Criteria__c":"Financial Review",' +
            '"Acquired_By_Client_Closed_By_BlueWave__c" : "false",' +
            '"Partner_tag_lookup__c":"a0s3F000000thIBQAY",' +
            '"Partner_tag_lookup__r":{"Id":"a0s3F000000thIBQAY", ' +
            '"Account__r":{"Id":"0013F00000Y6WrnQAF","RecordType":{"Name":"Partner Account"}}}' +
            '}}}' +
            ']';
        return (List<Subscription_Order__c>) JSON.deserialize(queryData, List<Subscription_Order__c>.class);
    }

    private static Subscription_Order__c getSubscriptionOrder() {
        Date today = System.today();
        Map<SObjectField, Object> subscriptionOrderValues = new Map<SObjectField, Object> {
            Subscription_Order__c.Id => Util.getFakeId(Subscription_Order__c.SObjectType),
            Subscription_Order__c.Effective_Date__c => today,
            Subscription_Order__c.Utility_Account_Subscription__c => Util.getFakeId(Utility_Account_Subscription__c.SObjectType),
            Subscription_Order__c.Approved_Change_in_Subscription__c => 12,
            Subscription_Order__c.System_Change_kW_DC_Rounded__c => 25
        };
        sfab_FabricatedSObject fabbedSO = new sfab_FabricatedSObject(Subscription_Order__c.class, subscriptionOrderValues);
        Map<SObjectField, Object> uasValues = new Map<SObjectField, Object> {
            Utility_Account_Subscription__c.Id => Util.getFakeId(Utility_Account_Subscription__c.SObjectType),
            Utility_Account_Subscription__c.Opportunity__c => Util.getFakeId(Opportunity.SObjectType),
            Utility_Account_Subscription__c.Shared_Solar_System__c => Util.getFakeId(Shared_Solar_System__c.SObjectType)
        };
        sfab_FabricatedSObject fabbedUAS = new sfab_FabricatedSObject(Utility_Account_Subscription__c.class, uasValues);
        fabbedSO.setParent('Utility_Account_Subscription__r', fabbedUAS);
        Map<SObjectField, Object> sssValues = new Map<SObjectField, Object> {
            Shared_Solar_System__c.Id => Util.getFakeId(Shared_Solar_System__c.SObjectType),
            Shared_Solar_System__c.Client_Acquisition_Contract__c => Util.getFakeId(Contract.SObjectType),
            Shared_Solar_System__c.Client_Management_Contract__c => Util.incrementFakeId(Util.getFakeId(Contract.SObjectType)),
            Shared_Solar_System__c.Total_System_Size_kWh_DC__c => 1220
        };
        sfab_FabricatedSObject fabbedSSS = new sfab_FabricatedSObject(Shared_Solar_System__c.class, sssValues);
        fabbedUAS.setParent('Shared_Solar_System__r', fabbedSSS);
        Map<SObjectField, Object> opportunityValues = new Map<SObjectField, Object> {
            Opportunity.Id => Util.getFakeId(Opportunity.SObjectType),
            Opportunity.Customer_Group__c => 'Residential',
            Opportunity.Partner_tag_lookup__c => Util.getFakeId(Partner__c.SObjectType)
        };
        sfab_FabricatedSObject fabbedOpp = new sfab_FabricatedSObject(Opportunity.class, opportunityValues);
        fabbedUAS.setParent('Opportunity__r', fabbedOpp);
        Map<SObjectField, Object> partnerTagValues = new Map<SObjectField, Object> {
            Partner__c.Id => Util.getFakeId(Partner__c.SObjectType)
        };
        sfab_FabricatedSObject fabbedPartnerTag = new sfab_FabricatedSObject(Partner__c.class, partnerTagValues);
        fabbedOpp.setParent('Partner_tag_lookup__r', fabbedPartnerTag);
        Map<SObjectField, Object> accountValues = new Map<SObjectField, Object> {
            Account.Id => Util.getFakeId(Account.SObjectType)
        };
        sfab_FabricatedSObject fabbedAccount = new sfab_FabricatedSObject(Account.class, accountValues);
        fabbedPartnerTag.setParent('Account__r', fabbedAccount);
        Map<SObjectField, Object> recordTypeValues = new Map<SObjectField, Object> {
            RecordType.Name => 'Partner Account'
        };
        sfab_FabricatedSObject fabbedRecordType = new sfab_FabricatedSObject(RecordType.class, recordTypeValues);
        fabbedAccount.setParent('RecordType', fabbedRecordType);
        return (Subscription_Order__c) fabbedSO.toSObject();
    }

    private static void setDefaultBooleans(FeeQualification feeQualification) {
        feeQualification.acquisition = false;
        feeQualification.reacquisition = false;
        feeQualification.bcsAcquired = false;
        feeQualification.notBCSAcquired = false;
        feeQualification.closedByBCS = false;
        feeQualification.anchor = false;
        feeQualification.publicOfftake = false;
        feeQualification.notPublicOfftake = false;
        feeQualification.residential = false;
        feeQualification.nonResidential = false;
        feeQualification.investmentGradeAnchor = false;
        feeQualification.notInvestmentGradeAnchor = false;
        feeQualification.downsizing = false;
        feeQualification.upsizing = false;
        feeQualification.sharedSolarSystemId = Util.getFakeId(Shared_Solar_System__c.SObjectType);
    }
}