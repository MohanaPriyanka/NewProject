public without sharing class ZuoraUsageBatchSend implements Database.Batchable<sObject>, Database.Stateful, Database.AllowsCallouts{
    public List<UASB__c> uasbToUpdate = new List<UASB__c>();
    public List<Bill_Adjustment__c> adjustToUpdate = new List<Bill_Adjustment__c>();
    public String queryString;
    public Date invoiceDate;
    public enum UsageType {UASBS, ADJUSTMENTS}
    public UsageType type;

    public void executeBatch(){
        Database.executeBatch(this, 50);
    }

    public ZuoraUsageBatchSend(UsageType usageType, Date invoiceDate) {
        this.type = usageType;
        this.invoiceDate = invoiceDate;
    }

    public Database.QueryLocator start(Database.BatchableContext bc){
        if (queryString != null) {
            return Database.getQueryLocator(queryString);
        } else {
            if (type == UsageType.UASBS) {
                return UASBSelector.uasbsNotYetInZuora(invoiceDate);
            } else if (type == UsageType.ADJUSTMENTS) {
                return AdjustmentSelector.getAdjustmentsNotYetInZuora(true, ZuoraCreditMemoBatchSend.AdjustmentType.PostNextBill);
            } else {
                throw new Util.BWException('Set type to UASBS or ADJUSTMENTS');
            }
        }
    }

    public void execute(Database.BatchableContext bc, List<SObject> scope) {
        try {
            ZuoraUsageService.ZuoraUsageItems zuoraUsage = ZuoraUsageService.convertSFUsageToZuoraUsage(scope, invoiceDate);
            Logger.clearLogs();
            HttpResponse usageUploadResponse = ZuoraAPIHelper.callJsonEndpoint('POST','/v1/action/create',zuoraUsage,false);
            Map<String, List<SObject>> recordsToUpdate = ZuoraUsageService.handleAPIResponse(zuoraUsage.objects, usageUploadResponse, invoiceDate);
            List<UASB__c> newUASBToUpdate = recordsToUpdate.get('UASB');
            List<Bill_Adjustment__c> newAdjustToUpdate = recordsToUpdate.get('Bill_Adjustment');
            if (newUASBToUpdate != null) {
                uasbToUpdate.addAll(newUASBToUpdate);
            }
            if (newAdjustToUpdate != null) {
                adjustToUpdate.addAll(newAdjustToUpdate);
            }
        } catch(Exception excep) {
            Logger.logLater('ZuoraUsageBatchSend', 'execute', excep.getMessage() + '\n' + excep.getStackTraceString());
        }
        Logger.flushLogs();
    }

    public void finish(Database.BatchableContext bc){
        if (Util.getSystemPropertyCheckbox('Update_Usage_Records_With_ZuoraId__c')) {

            // For historical migration, we want to make sure old data doesn't change when we update UASBs and Adjustments,
            // so we track historical changes and log them:

            List<SObject> recordsToUpdate = new List<SObject>();
            if (uasbToUpdate.size() > 0){
                recordsToUpdate.addAll(uasbToUpdate);
            }
            if (adjustToUpdate.size() > 0){
                recordsToUpdate.addAll(adjustToUpdate);
            }
            if (recordsToUpdate.size() > 0){
                GenericBatchDMLOperation batchDML = new GenericBatchDMLOperation(recordsToUpdate, 'Update');
                batchDML.triggersToDisable = new List<String>{
                    'Disable_AccountTrigger__c',
                    'Disable_BillAdjustmentTrigger__c'
                };
                Database.executeBatch(batchDML);
            }
        }
    }
}