/**
 * Created by SarahRenfro on 11/15/2019.
 *
 * Description: Used to create/update/insert Subscription Orders and Shared Solar System Orders
 *
 * Tested By: SubscriptionManagementServiceTest, SubscriptionSizingTestclass
 */
public without sharing class SubscriptionManagementService implements Queueable{
    @TestVisible
    private static UASSelector uasSelector = new UASSelector();
    @TestVisible
    private static SharedSolarSystemsSelector sssSelector = new SharedSolarSystemsSelector();
    @TestVisible
    private static SubscriptionOrderSelector soSelector = new SubscriptionOrderSelector();
    @TestVisible
    private static OpportunitiesSelector oppSelector = new OpportunitiesSelector();
    @TestVisible
    private static FeatureService featureService = new FeatureService();
    public Set<Id> oppIdsWithChangedNMCTariff;
    public Set<Id> oppIdsWithChangedSSS;
    public List<CSUtilityAccountSubscriptionFactory.UASOrder> uasOrders = new List<CSUtilityAccountSubscriptionFactory.UASOrder>();
    public List<Utility_Account_Subscription__c> upsertUASes = new List<Utility_Account_Subscription__c>();
    public List<Subscription_Order__c> soInsertList = new List<Subscription_Order__c>();

    public void execute(QueueableContext context) {
        if (oppIdsWithChangedNMCTariff != null && featureService.isEnabled('Subscription_Orders')) {
            changeNMCTariff(oppIdsWithChangedNMCTariff);
        }
        if (oppIdsWithChangedSSS != null && featureService.isEnabled('Subscription_Orders')) {
            try {
                transferSubscriptionsOnSSSChange();
                //Upsert UASes - for deactivating a uas, update; for inserting new uas, insert
                upsert upsertUASes;
                for (CSUtilityAccountSubscriptionFactory.UASOrder uasOrder : uasOrders){
                    uasOrder.sOrder.Utility_Account_Subscription__c = uasOrder.uas.Id;
                    soInsertList.add(uasOrder.sOrder);
                }
                insert soInsertList;
            } catch (Exception e) {
                Logger.logNow('SubscriptionManagementService', 'handleSSSChange',
                    'Error trying to update Subscriptions after Shared Solar System change on Opportunities:  ' + oppIdsWithChangedSSS +
                        '\n' + e.getMessage() + '\n' + e.getStackTraceString(), Logger.ERROR
                );
            }
        }
    }

    @SuppressWarnings('PMD.ApexCRUDViolation')
    public void changeNMCTariff(Set<Id> oppIds) {
        List<Utility_Account_Subscription__c> uases = uasSelector.selectByOpp(oppIds);
        List<Subscription_Order__c> soList = createSystemChangeSubscriptionOrders(uases, null);
        if (soList.size() > 0 ) {
            insert soList;
        }
    }

    public void populateSubscriptionOrder(List<Subscription_Order__c> soList) {
        Set<Id> uasIds = new Set<Id>();
        for (Subscription_Order__c so : soList) {
            uasIds.add(so.Utility_Account_Subscription__c);
        }
        Map<Id, Utility_Account_Subscription__c> uasMap = uasSelector.getUASMap(uasIds);
        for (Subscription_Order__c so : soList) {
            Utility_Account_Subscription__c uas = uasMap.get(so.Utility_Account_Subscription__c);
            if (uas != null) {
                so.Previous_Annual_Cost__c = uas.Annual_Cost_Future_Rollup__c;
                so.Previous_Annual_kwh__c = uas.Annual_kWh_Subscription_Future_Rollup__c;
                so.Previous_kw_DC_Subscription__c = uas.Future_Customer_Subscription_KWDC_Rollup__c;
                so.Previous_Percent_Share_of_System__c = uas.Future_Share_of_System_Rollup__c;
                so.Client_Account__c = uas.Shared_Solar_System__r.Client_Account__c;
                so.Expected_Yield_kWh_kW__c = uas.Shared_Solar_System__r.Expected_Yield_kWh_kW__c;
                so.Total_System_Size_kW_DC__c = uas.Shared_Solar_System__r.Total_System_Size_kWh_DC__c;
                so.Utility_Number_of_Decimal_Places__c = uas.Shared_Solar_System__r.Utility__r.Number_of_Decimal_Places__c;
                so.Product__c = uas.Opportunity__r.Product__c;
                if(FeatureService.isEnabled('Sizing_Method')) {
                    so.Utility_NMC_Tariff__c = uas.Sizing_Method__c;
                    so.Value_of_NMC__c = uas.Sizing_Method__r.Value_of_NMC__c;
                    so.Size_Ratio__c = uas.Sizing_Method__r.Size_Ratio__c;
                } else {
                    so.Utility_NMC_Tariff__c = uas.Opportunity__r.NMC_Tariff__c;
                    so.Value_of_NMC__c = uas.Opportunity__r.NMC_Tariff__r.Value_of_NMC__c;
                }

            }
        }
    }

    @TestVisible
    private List<Subscription_Order__c> stampApprovedValues(Set<Id> soIds) {
        List<Subscription_Order__c> stampSOs = soSelector.selectByIds(soIds);
        for (Subscription_Order__c so : stampSOs ) {
            so.Effective_Date__c = System.now();
            if (so.System_Change_Percent_Share_of_System__c == null) {
                throw new Util.BWException('A Subscription Order is unable to be created due to the UAS missing required data. Please ensure UAS ' + so.Utility_Account_Subscription__r.Id +' has: ' + '\n' +
                    '1. An Opportunity' +'\n' +
                    '2. A Shared Solar System' +'\n' +
                    '3. A Sizing Method ' + '\n' +
                'After populating the correct fields above, try again. If you still experience an error, contact BizApps');
            }
            so.Approved_Change_in_Percent_Share__c = so.System_Change_Percent_Share_of_System__c - so.Previous_Percent_Share_of_System__c;
            so.Approved_Change_in_Subscription__c = so.System_Change_kW_DC_Rounded__c - so.Previous_kw_DC_Subscription__c;
            if (so.Product__r.Customer_Subscription_Type__c == 'kWh') {
                so.Change_in_Annual_kWh__c = so.New_Annual_kWh__c - so.Previous_Annual_kwh__c;
            } else {
                so.Change_in_Annual_Cost__c = so.New_Annual_Cost__c - so.Previous_Annual_Cost__c;
            }
        }
        return stampSOs;
    }

    @SuppressWarnings('PMD.ApexCRUDViolation')
    public void handleSharedSolarSystemOrders(List<Shared_Solar_System_Order__c> sssoList, Map<Id, Shared_Solar_System_Order__c> oldMap) {
        List<Shared_Solar_System__c> sssToUpdate = new List<Shared_Solar_System__c>();
        List<Subscription_Order__c> soListToInsert = new List<Subscription_Order__c>();
        if (!featureService.isEnabled('Subscription_Orders')) {
            return;
        }
        List<Shared_Solar_System_Order__c> approvedSSSOs = checkSSSOApproval(sssoList, oldMap);
        for(Shared_Solar_System_Order__c ssso : approvedSSSOs) {
            Shared_Solar_System__c sss = updateSSSFromSSSO(ssso);
            sssToUpdate.add(sss);
            List<Utility_Account_Subscription__c> uasList = uasSelector.selectActiveUASBySSS(new Set<Id>{ssso.Shared_Solar_System__c});
            List<Subscription_Order__c> soList = createSystemChangeSubscriptionOrders(uasList, ssso);
            soListToInsert.addAll(soList);
        }
        update sssToUpdate;
        insert soListToInsert;
    }

    public Shared_Solar_System__c updateSSSFromSSSO(Shared_Solar_System_Order__c ssso) {
        Shared_Solar_System__c sssToUpdate = sssSelector.selectOne(ssso.Shared_Solar_System__c);
        sssToUpdate.Apex_Context__c = true;
        if (ssso.Total_System_Size_kW_DC__c != null && (ssso.Total_System_Size_kW_DC__c != sssToUpdate.Total_System_Size_kWh_DC__c)) {
            sssToUpdate.Total_System_Size_kWh_DC__c = ssso.Total_System_Size_kW_DC__c;
        }
        if (ssso.Yield__c != null && (ssso.Yield__c != sssToUpdate.Expected_Yield_kWh_kW__c)) {
            sssToUpdate.Expected_Yield_kWh_kW__c = ssso.Yield__c;
        }
        return sssToUpdate;
    }

    public List<Subscription_Order__c> createSystemChangeSubscriptionOrders(List<Utility_Account_Subscription__c> uasList, Shared_Solar_System_Order__c ssso) {
        List<Subscription_Order__c> soList = new List<Subscription_Order__c>();
        for (Utility_Account_Subscription__c uas : uasList) {
            Subscription_Order__c so = new Subscription_Order__c(
                Utility_Account_Subscription__c = uas.Id,
                Approval_Status__c = 'Approved',
                Effective_Date__c = System.now(),
                New_Annual_kWh__c = uas.Annual_kWh_Subscription_Future_Rollup__c,
                New_Annual_Cost__c = uas.Annual_Cost_Future_Rollup__c
            );
            if (ssso != null) {
                so.Type__c = 'Shared Solar System Update';
                so.Shared_Solar_System_Order__c = ssso.Id;
            } else {
                so.Type__c = 'Resize';
            }
            soList.add(so);
        }
        return soList;
    }
    @SuppressWarnings('PMD.ApexCRUDViolation')
    public void checkSOApproval(List<Subscription_Order__c> soList, Map<Id, Subscription_Order__c> oldMap) {
        Set<Id> approvedSOs = new Set<Id>();
        for (Subscription_Order__c so : soList) {
            if (so.Approval_Status__c == 'Approved' && (oldMap == null || (oldMap != null && oldMap.get(so.Id).Approval_Status__c != 'Approved'))) {
                approvedSOs.add(so.Id);
            }
        }

        if (approvedSOs.isEmpty()) {
            return;
        }

        try {
            List<Subscription_Order__c> updateSOs = stampApprovedValues(approvedSOs);
            update updateSOs;
            publishSubscriptionOrderChangeEvents(updateSOs);
        } catch (Exception e) {
            Logger.logNow(
                'SubscriptionManagementService',
                'checkSOApproval',
                'Did not stamp approved values, publish subscription change events, or set CFDs on these SOs:\n' + JSON.serialize(approvedSOs) + '\n' +
                e.getMessage() + '\n' + e.getStackTraceString(),
                Logger.ERROR);
            return;
        }

        try {
            ClientInvoicingFeeAssignmentService.setSubOrderContractFeeDetailInFuture(approvedSOs);
        } catch (Exception excep){
            String errorMessage = 'Could not run ClientInvoicingFeeAssignmentService ' +
                excep.getStackTraceString() + ' ' +
                excep.getMessage() + ' ' +
                JSON.serialize(approvedSOs);
            Logger.logNow('SubscriptionManagementService', 'checkSOApproval', errorMessage);
        }

    }
    public List<Shared_Solar_System_Order__c> checkSSSOApproval(List<Shared_Solar_System_Order__c> sssoList, Map<Id, Shared_Solar_System_Order__c> oldMap) {
        List<Shared_Solar_System_Order__c> approvedSSSOs = new List<Shared_Solar_System_Order__c>();
        for (Shared_Solar_System_Order__c ssso : sssoList) {
            if (ssso.Approval_Status__c == 'Approved' && oldMap.get(ssso.Id).Approval_Status__c != 'Approved') {
                approvedSSSOs.add(ssso);
            }
        }
        return approvedSSSOs;
    }


    /**
     * When the SSS on an Opportunity changes, the existing subscription must be zeroed (via SO) and set to Inactive. A clone is
     * then created with the same subscription (via SO) and assigned to the new SSS.
     */
    @TestVisible
    private void transferSubscriptionsOnSSSChange() {
        //Get all createable fields for Active Subscriptions - if we add more fields later, this query will still grab them
        List<Utility_Account_Subscription__c> uasList = uasSelector.getUASForCloneByOpp(oppIdsWithChangedSSS);
        Map<Id, Opportunity> oppMap = oppSelector.selectOpportunityMap(oppIdsWithChangedSSS);
        for (Utility_Account_Subscription__c uas : uasList) {
            Utility_Account_Subscription__c cloneUAS = uas.clone(false, true, false, false );
            cloneUAS.Shared_Solar_System__c = oppMap.get(uas.Opportunity__c).Shared_Solar_System__c;
            String comments = 'UAS created as transfer from  ' + uas.Shared_Solar_System__r.Name + ' to ' +
                oppMap.get(uas.Opportunity__c).Shared_Solar_System__r.Name + '; ' +
                (cloneUAS.Subscription_Comment_c__c != NULL ? cloneUAS.Subscription_Comment_c__c : '' );
            cloneUAS.Subscription_Comment_c__c = (comments.length() >= 255 ?  comments.substring(0, 255) : comments);
            upsertUASes.add(cloneUAS);
            CSUtilityAccountSubscriptionFactory.UASOrder uasOrder = new CSUtilityAccountSubscriptionFactory.UASOrder();
            uasOrder.uas = cloneUAS;
            Subscription_Order__c so = new Subscription_Order__c(
                Type__c = 'Transfer',
                New_Annual_kWh__c = uas.Annual_kWh_Subscription_Future_Rollup__c,
                New_Annual_Cost__c = uas.Annual_Cost_Future_Rollup__c,
                Approval_Status__c = 'Approved',
                Effective_Date__c = System.now()
            );
            uasOrder.sOrder = so;
            uasOrders.add(uasOrder);
            uas.Next_Schedule_Z_Status__c = 'Inactive Subscription';
            upsertUASes.add(uas);
        }
        soInsertList.addAll(zeroSubscriptions(uasList, 'Transfer'));
    }

    public List<Subscription_Order__c> zeroSubscriptions(List<Utility_Account_Subscription__c> uasList, String zeroType) {
        List<Subscription_Order__c> zeroedSOs = new List<Subscription_Order__c>();
        for (Utility_Account_Subscription__c uas : uasList) {
            Subscription_Order__c zeroedSO = new Subscription_Order__c(
                Type__c = zeroType,
                Approval_Status__c = 'Approved',
                Effective_Date__c = System.now(),
                Utility_Account_Subscription__c = uas.Id,
                Comments__c = 'Subscription Order was created to zero out UAS'
            );
            if (uas.Subscription_Type__c == 'kWh') {
                zeroedSO.New_Annual_kWh__c = 0;
            } else {
                zeroedSO.New_Annual_Cost__c = 0;
            }
            zeroedSOs.add(zeroedSO);
        }
        return zeroedSOs;
    }

    /**
        * @description In order to get the related Opportunity from the deleted Subscription Orders and UASes, we have to query
        * for the related UAS (as the relationships for the deleted record have already been removed). Method publishes
        * platform event for Opportunity to reevaluate subscription totals
        *
        * @param subscriptionOrders deleted subscription orders from SOTrigger
        * @param deletedUASMap deleted UASes from UASTrigger
    */
    public void publishSubscriptionOrderChangeEventsOnDelete(List<Subscription_Order__c> subscriptionOrders, Map<Id, Utility_Account_Subscription__c> deletedUASMap) {
        Map<Id, Utility_Account_Subscription__c> uasMap = new Map<Id, Utility_Account_Subscription__c>();
        if (deletedUASMap == null) {
            uasMap = UASSelector.getUASMap(new Set<Id>{subscriptionOrders[0].Utility_Account_Subscription__c});
        } else {
            uasMap = deletedUASMap;
        }

        Set<Id> oppIds = new Set<Id>();
        for (Utility_Account_Subscription__c uas : uasMap.values()) {
            oppIds.add(uas.Opportunity__c);
        }
        
        List<Subscription_Order_Change_Event__e> changeEvents = new List<Subscription_Order_Change_Event__e>();
        for (Id oppId : oppIds) {
            Subscription_Order_Change_Event__e event = new Subscription_Order_Change_Event__e(
                Opportunity_Id__c = oppId
            );
            changeEvents.add(event);
        }
        EventBus.publish(changeEvents);
    }

    /**
     * @description Method called to publish a platform event when a subscription order is approved (ie inserted because
     * all subscription orders are inserted as approved). Platform event is passed the Opportunity Id.
     *
     * @param subscriptionOrders Set of Opportunity Ids from Subscription Orders that have been approved
     */
    public void publishSubscriptionOrderChangeEvents(List<Subscription_Order__c> subscriptionOrders) {
        List<Subscription_Order_Change_Event__e> changeEvents = new List<Subscription_Order_Change_Event__e>();

        for (Subscription_Order__c so : subscriptionOrders) {
            Subscription_Order_Change_Event__e event = new Subscription_Order_Change_Event__e(
                Opportunity_Id__c = so.Utility_Account_Subscription__r.Opportunity__r.Id
            );
            changeEvents.add(event);
        }
        EventBus.publish(changeEvents);
    }

    /**
     * @description The Subscription Order Change Event is a platform event that is published to asynchronously summarize
     * an Opportunity's total active subscriptions
     *
     * @param changeEvents Subscription Order Change Events with Opportunity Ids to evaluate
     */
    public void handleSubscriptionOrderChangeEvents(List<Subscription_Order_Change_Event__e> changeEvents) {
        Set<Id> oppIds = new Set<Id>();
        for (Subscription_Order_Change_Event__e event : changeEvents) {
            oppIds.add(event.Opportunity_Id__c);
        }
        Map<Id, Decimal> oppSubscriptionMap = oppSelector.getAggregateOpportunitySubscriptions(oppIds);
        List<Opportunity> oppsToUpdate = new List<Opportunity>();

        for (Id oppId : oppIds) {
            Decimal sumSubscriptions = (oppSubscriptionMap.get(oppId) == null ? 0 : oppSubscriptionMap.get(oppId) );
            Opportunity opp = new Opportunity(
                Id = oppId,
                Total_Subscribed_kW_DC__c = sumSubscriptions
            );
            oppsToUpdate.add(opp);
        }

        update oppsToUpdate;
    }

    /*****************************************************************************************************
     * TEST ONLY METHOD TO CREATE SUBSCRIPTION ORDERS EVERY TIME A UAS IS INSERTED IN A TEST SETUP METHOD
     *****************************************************************************************************/
    public void insertSubscriptionOrdersForTests(List<Utility_Account_Subscription__c> uasList) {
        List<Subscription_Order__c> soList = createSubscriptionOrdersForTests(uasList);
        insert soList;
    }
    public List<Subscription_Order__c> createSubscriptionOrdersForTests(List<Utility_Account_Subscription__c> uasList) {
        List<Subscription_Order__c> soInserts = new List<Subscription_Order__c>();
        Set<Id> oppIds = new Set<Id>();
        //Do not want to create subscription orders for the leads that have undergone Conversion (automatically get SOs)
        for (Utility_Account_Subscription__c uas : uasList) {
            oppIds.add(uas.Opportunity__c);
        }
        Map<Id, Opportunity> oppToSOMap = oppSelector.getOppsForTestMethods(oppIds);
        for (Utility_Account_Subscription__c uas : uasList) {
            //Do not want to create "Initial" subscription orders for uases inserted as a result of SSS change on Opp
            if (oppToSOMap.get(uas.Opportunity__c) != null && uas.Subscription_Comment_c__c == null) {
                Subscription_Order__c so = new Subscription_Order__c(
                    Utility_Account_Subscription__c = uas.Id,
                    Type__c = 'Initial',
                    Effective_Date__c = System.now(),
                    Approval_Status__c = 'Approved'
                );
                if (uas.Subscription_Type__c == 'kWh') {
                    so.New_Annual_kWh__c = uas.Annual_kwh_subscription_future__c;
                } else {
                    so.New_Annual_Cost__c = uas.Subscribed_Annual_Cost_of_Electricity__c;
                }
                soInserts.add(so);
            }
        }
        return soInserts;
    }
}