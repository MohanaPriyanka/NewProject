@IsTest
public class LeadTriggerHandlerTest {

    @SuppressWarnings('PMD.AvoidDmlStatementsInLoops')
    @IsTest static void customerSubscriptionProcessTest() {
        System_Properties__c sysProp = new System_Properties__c(
            Name = 'System',
            DocuSign_API_Account_ID__c = '123',
            DocuSign_Customer_Care_User__c = '123@123.com',
            DocuSign_Guest_User__c = '123@345.com',
            DocuSign_Guest_User_Credential__c = '234234',
            DocuSign_Integrator_Key__c = '123123-123123'
        );
        insert sysProp;

        Utility__c eversource = new Utility__c(
            Name = 'Eversource',
            Number_of_Decimal_Places__c = 2
        );

        Utility__c nationalGrid = new Utility__c(
            Name = 'National Grid',
            Number_of_Decimal_Places__c = 2
        );

        insert new List<Utility__c>{eversource, nationalGrid};

        Utility_NMC_Tariff__c nmcRate =  (Utility_NMC_Tariff__c)TestFactory.createSObject(new Utility_NMC_Tariff__c(Value_of_Net_Metering_Credit__c = 1,
                                                                                                                    Name = 'Nation Grid WCMA Class 2 - S/F 2016',
                                                                                                                    Sizing_Rate__c = true,
                                                                                                                    Date__c = Date.today()));
        insert nmcRate;

        Product2 csProduct = new Product2(
            Name = 'Community Solar - SREC 16-01',
            Family = 'Community Solar',
            Product_Type__c = 'Community Solar',
            Program__c = 'SREC - Community Solar',
            State__c = 'MA',
            ProductCode = 'CS - BlueWave - 10%',
            IsActive = True,
            Lender_of_Record__c = 'BlueWave',
            NMC_Discount__c = 10,
            Annual_kWh_Maximum__c = 100000000,
            Customer_Subscription_Type__c = 'Electricity Cost ($)',
            NM_Rate_Floor__c = 0,
            Monthly_Late_Fee__c = 1);
        insert csProduct;

        Shared_Solar_System__c sss1 = new Shared_Solar_System__c(
            Name = 'Oxford Barrett St. P1',
            Service_Territories__c = 'WCMA; SEMA',
            Open__c = true,
            Reserved_Capacity_kW_DC__c = '0',
            Capacity_Committed_kW_DC__c = 0,
            Total_System_Size_kWh_DC__c = 1445.86,
            Total_System_Size_kW_AC__c  = 996,
            Utility__c = nationalgrid.Id,
            Credit_Score_Requirement__c = 200,
            Assignment_order__c = '1',
            Utility_NMC_Tariff__c = nmcRate.Id,
            Product__c = csProduct.Id,
            Expected_Yield_kWh_kW__c = 1300,
            Assemblage_Count__c = 1,
            Maximum_Subscription_Capacity_kWDC__c = 25,
            Available_SMB_Underwriting_Method_Docs__c = true, 
            Available_SMB_Underwriting_Method_FICO__c = true
        );
        insert sss1;

        Account partnerAccount = new Account(
            Name = 'Boston Solar',
            RecordTypeId = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get('Partner_Account').getRecordTypeId()
        );
        insert partnerAccount;
        Partner__c partner = new Partner__c(
            Name = 'Boston Solar',
            Account__c = partnerAccount.Id
        );
        insert partner;
        partnerAccount.Partner__c = partner.Id;
        update partnerAccount;
        insert SharedSolarSystemsTest.getPartnerEligibilities(sss1, partnerAccount);
        
        BSST__c newSalesTeam = new BSST__c (Name = 'Partner',
                                            Partner__c = partner.Id,
                                            Custom_ID__c = 'partner');
                                            
        insert newSalesTeam;
        
        Lead lead = (Lead)TestFactory.createSObject(
            new Lead(
                LastName = 'Chan',
                FirstName = 'Joey',
                Email = 'test@email.com',
                Electricity_Provider__c = 'National Grid',
                Utility_relationship__c = nationalGrid.Id,
                LoadZone__c = 'WCMA',
                LeadSource = 'CSAP',
                Company = 'Cloud Jedi',
                Status = 'Qualified',
                Partner_Lookup__c = partner.Id,
                Product_Line__c = 'Community Solar',
                Product__c = csProduct.Id,
                Custom_ID__c = 'partner',
                System_Assignment__c = 'Automatic - Assignment Order',
                Underwriting_Criteria__c = 'FICO'
            )
        );
        insert lead;
        
        Lead lead2 = new Lead (
            LastName = 'Jordan',
            FirstName = 'Pentaleri',
            Email = 'test@email.com',
            Electricity_Provider__c = 'National Grid',
            Utility_relationship__c = nationalGrid.Id,
            LoadZone__c = 'WCMA',
            LeadSource = 'CSAP',
            Company = 'Cloud Jedi',
            Status = 'Qualified',
            Partner_Lookup__c = partner.Id,
            Product_Line__c = 'Community Solar',
            Product__c = csProduct.Id,
            System_Assignment__c = 'Automatic - Assignment Order',
            Underwriting_Criteria__c = 'FICO');
        insert lead2;

        LASERCA__Personal_Credit_Report__c pcr = (LASERCA__Personal_Credit_Report__c)TestFactory.createSObject(new LASERCA__Personal_Credit_Report__c(
                                                                                        LASERCA__Lead__c = lead.Id,
                                                                                        LASERCA__Credit_Score_TransUnion__c = '700'), true);
                                                                                        
        LASERCA__Personal_Credit_Report__c pcr2 = (LASERCA__Personal_Credit_Report__c)TestFactory.createSObject(new LASERCA__Personal_Credit_Report__c(
                                                                                        LASERCA__Lead__c = lead2.Id,
                                                                                       LASERCA__Credit_Score_TransUnion__c = '700'), true);
        lead.Personal_Credit_Report__c = pcr.Id;
        lead2.Personal_Credit_Report__c = pcr2.Id;
        lead.Status = 'Qualified';
        lead2.Status = 'Qualified';
        update lead;

        Account propertyAccount = new Account(
            Name = 'Joey Chan',
            Lead__c = lead.Id,
            BillingStreet = '123 Test',
            BillingCity = 'Test',
            BillingStateCode = 'NY',
            BillingPostalCode = '02633',
            RecordTypeId = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Property').getRecordTypeId()
        );
        Account propertyAccount2 = new Account(
            Name = 'Jordan Pentaleri',
            Lead__c = lead2.Id,
            BillingStreet = '456 Test',
            BillingCity = 'Test',
            BillingStateCode = 'NY',
            BillingPostalCode = '02633'
        );
        insert new List<Account>{propertyAccount, propertyAccount2};

        Utility_Account_Log__c ual = new Utility_Account_Log__c(
            Lead__c = lead.Id,
            Annual_Cost_of_Electricity__c = 1000,
            Name_on_Account__c = 'Joey Chan',
            Account__c = propertyAccount.Id
        );
        Utility_Account_Log__c ual2 = new Utility_Account_Log__c(
            Lead__c = lead2.Id,
            Annual_Cost_of_Electricity__c = 1000,
            Name_on_Account__c = 'Jordan Pentaleri',
            Account__c = propertyAccount2.Id
        );
        insert new List<Utility_Account_Log__c>{ual, ual2};

        Contract contract = new Contract(
            Lead__c = lead.Id,
            Product__c = csProduct.Id,
            RecordTypeId = CustomerContractService.RECORD_TYPE_ID,
            AccountId = propertyAccount.Id,
            Contract_Type__c = 'Generic',
            Customer_Signature_Date_Time__c = System.now()
        );
        Contract contract2 = new Contract(
            Lead__c = lead2.Id,
            Product__c = csProduct.Id,
            RecordTypeId = CustomerContractService.RECORD_TYPE_ID,
            AccountId = propertyAccount2.Id,
            Contract_Type__c = 'Project Specific',
            Customer_Signature_Date_Time__c = System.now()
        );
        insert new List<Contract>{contract, contract2};


        Database.leadConvert lc = new Database.leadConvert();
        lc.setLeadId(lead.id);
        LeadStatus convertStatus = [SELECT Id, MasterLabel FROM LeadStatus WHERE IsConverted=true LIMIT 1];
        lc.setConvertedStatus(convertStatus.MasterLabel);
        lc.setDoNotCreateOpportunity(true);
        Database.LeadConvertResult lcr = Database.convertLead(lc);
        System.assert(lcr.isSuccess(), 'Lead should have converted successfully');
        
        Database.leadConvert ld = new Database.leadConvert();
        ld.setLeadId(lead2.id);
        LeadStatus convertStatus2 = [SELECT Id, MasterLabel FROM LeadStatus WHERE IsConverted=true LIMIT 1];
        ld.setConvertedStatus(convertStatus2.MasterLabel);
        ld.setDoNotCreateOpportunity(true);
        Database.convertLead(ld);

        for (Opportunity opp : [SELECT Id FROM Opportunity]){

            dsfs__DocuSign_Status__c newDocStat = new dsfs__DocuSign_Status__c(
                dsfs__Opportunity__c = opp.Id,
                dsfs__Envelope_Status__c = 'Sent',
                dsfs__DocuSign_Envelope_ID__c = 'testEnvelopeId'
            );
            insert newDocStat;

            dsfs__DocuSign_Recipient_Status__c newDRS = new dsfs__DocuSign_Recipient_Status__c(
                Name = 'TestCase',
                dsfs__Parent_Status_Record__c =newDocStat.Id,
                dsfs__DocuSign_Recipient_Id__c = 'D50030',
                dsfs__DocuSign_Recipient_Email__c = 'nobody@bluewavesolar.com',
                dsfs__Recipient_Status__c = 'Sent'
            );
            insert newDRS;
        }
        List<Error_Log__c> errorLogs = [SELECT Id, Class__c, Method__c, Message__c FROM Error_Log__c WHERE Severity__c = 'Error'];
        System.assertEquals(0, errorLogs.size(), 'There should be no error logs resulting from lead conversion or docusign DML ops');

        Test.startTest();
        Test.setMock(WebServiceMock.class, new DocuSignAPIMockImpl());
        Test.setMock(HttpCalloutMock.class, new DocuSignAPIMockImpl());

        List<Id> idList = new List<Id>();
        List<Opportunity> oppList = [SELECT Id, Name, Parent_Account_Name__c, Salesperson_Email__c,
            Sales_tag__c, Application_Type__c,
            Email__c, Co_Applicant_Email__c, Co_Applicant_Full_Name__c,
            Docusign_Template__c, Shared_Solar_System__r.Name,
            AccountId, Shared_Solar_System__c
        FROM Opportunity];
        System.assertEquals(1, oppList.size(), 'Lead conversion should have produced one opportunity');
        idList.add(oppList[0].Id);

        DocuSignHelper.sendCSPackage(oppList[0],1,1);
        Test.stopTest();

        errorLogs = [SELECT Id, Class__c, Method__c, Message__c FROM Error_Log__c WHERE Severity__c = 'Error'];
        // We log the opps for which we're sending contracts: "Sending contracts for these opportunities..." if we send
        // the contract in the trigger, but not if we call sendCSPackage explicitly.
        System.assertEquals(0, errorLogs.size(), 'There should be no error logs resulting from DocuSignHelper.sendCSPackage');

        Opportunity opp = [
            SELECT Id, AccountId, Lead__c, Product__c, ContractId, Contract.AccountId, Contract.Contract_Type__c, 
                Contract.Customer_Signature_Date_Time__c, Contract.Lead__c, Contract.Parent_Contract__c, Contract.Product__c,
            (SELECT Id, dsfs__Envelope_Status__c FROM dsfs__R00N80000002fD9vEAE__r)
            FROM Opportunity
        ];
        System.assertEquals(1, opp.dsfs__R00N80000002fD9vEAE__r.size(), 'There should be one child Docusign Status record');
        System.assertEquals('Sent', opp.dsfs__R00N80000002fD9vEAE__r[0].dsfs__Envelope_Status__c, 'The Envelope Status for the child Docusign Status record should be \'Sent\'');
        System.assertNotEquals(contract.Id, opp.ContractId, 'A new Contract should have been created for this Opportunity');
        System.assertEquals(opp.AccountId, opp.Contract.AccountId, 'Opportunity\'s Contract should have the same Account as its Opportunity');
        System.assertEquals(opp.Lead__c, opp.Contract.Lead__c, 'Opportunity\'s Contract should have the same Lead as its Opportunity');
        System.assertEquals(opp.Product__c, opp.Contract.Product__c, 'Opportunity\'s Contract should have the same Product as its Opportunity');
        System.assertEquals('Project Specific', opp.Contract.Contract_Type__c, 'Opportunity\'s Contract type should be Project-Specific, as the parent Lead has a Generic contract type');
        System.assertEquals(contract.Customer_Signature_Date_Time__c, opp.Contract.Customer_Signature_Date_Time__c, 'Opportunity\'s Contract should have the same customer signature date time as its parent Contract');
        System.assertEquals(contract.Id, opp.Contract.Parent_Contract__c, 'Opportunity\'s Contract should have the parent Lead\'s original Contract as its parent Contract');

    }

    @IsTest static void testCaseandContactConversion() {
        Map<Id,Id> leadContactIdMap = new Map<Id,Id>();
        Map<Id,Id> leadAccountIdMap = new Map<Id,Id>();

        Account accountA = new Account (Name = 'Parent AccountA') ;

        insert accountA;

        Contact contactA = new Contact (FirstName = 'ParentA',
                                        LastName = 'Last',
                                        AccountId = accountA.Id,
                                        Email = 'jpentaleri@bluewavesolar.com');
        insert contactA;

        Lead leadOne = new Lead (   FirstName = 'leadOne',
                                    LastName = 'Test',
                                    Company = 'CompanyCo',
                                    Email = 'EmailOne@bluewavesolar.com',
                                    Parent_Account__c = accountA.Id,
                                    Product_Line__c = 'Community Solar',
                                    Contacted__c = true,
                                    Status = 'Qualified');

        // NOT COMMUNITY SOLAR, DO NOT DELETE CONTACT
        Lead leadTwo = new Lead (   FirstName = 'leadTwo',
                                    LastName = 'Test',
                                    Company = 'CompanyOther',
                                    Email = 'EmailTwo@bluewavesolar.com',
                                    Contacted__c = true,
                                    Status = 'Qualified');
        List<Lead> leadList = new List<Lead>{leadOne, leadTwo};
        insert leadList;

        leadOne.Status = 'Qualified';
        leadTwo.Status = 'Qualified';
        update leadList;

        Case caseOne = new Case (
            Subject = 'Test Case One', 
            Lead_Lookup__c = leadOne.Id);

        Case caseTwo = new Case (
            Subject = 'Test Case Two',
            Lead_Lookup__c = leadTwo.id);

        Case caseThree = new Case (
            Subject = 'Test Case Three' );

        insert new List<Case>{caseOne, caseTwo, caseThree}; 
        Test.startTest();    

        LeadStatus convertStatus = [SELECT Id, MasterLabel FROM LeadStatus WHERE isConverted=true LIMIT 1];

        for (Lead l : leadList){
            Database.LeadConvert lc = new Database.LeadConvert();
            lc.setLeadId(l.Id);
            lc.setConvertedStatus(convertStatus.MasterLabel);
            Database.LeadConvertResult lcr = Database.convertLead(lc, false);
            System.assert(lcr.isSuccess(), 'Lead conversion should be successful');
        }   

        Test.stopTest();

        for (Lead convertedLead : [SELECT Id, ConvertedAccountId, ConvertedContactId, isConverted
                                    FROM Lead] ) {
            leadContactIdMap.put(convertedLead.Id, convertedLead.ConvertedContactId);
            leadAccountIdMap.put(convertedLead.Id, convertedLead.ConvertedAccountId);
        }        

        Boolean accountInserted = false;
        for (Account relatedAccount : [SELECT Id, Name, Send_Bills_Contact__c
                                        FROM Account]){
            if (relatedAccount.Name == 'CompanyCo'){
                System.assertEquals(contactA.Id, relatedAccount.Send_Bills_Contact__c, 'Send Bills Contact for related account should match contact on converted lead\'s parent account');
                accountInserted = true;
            } else {
                System.assertEquals(null, relatedAccount.Send_Bills_Contact__c, 'There should be no Send Bills Contact when non-CS lead does not have a parent account');
            }
        }
        System.assertEquals(accountInserted, true, 'Lead conversion should have resulted in account insertion for lead with parent account');

        List<Contact> relatedContacts = [SELECT Id, FirstName, AccountId
                                        FROM Contact
                                        ORDER BY FirstName];
        System.assertEquals(2, relatedContacts.size(), 'There should be two Contacts in the database - one from setup, one created by lead conversion');
        System.assertEquals(accountA.Id, relatedContacts[1].AccountId, 'Contact from setup should have parent Account from setup');
        System.assertNotEquals(accountA.Id, relatedContacts[0].AccountId, 'Contact from lead conversion should have newly-created Account as parent');

        List<Case> casesList =  [SELECT Id, Lead_Lookup__r.ConvertedAccountId, Lead_Lookup__r.ConvertedContactId, 
                                    Lead_Lookup__r.isConverted, AccountId, ContactId
                                FROM Case
                                WHERE Lead_Lookup__r.isConverted = true];
        System.assertEquals(casesList[0].AccountId, leadAccountIdMap.get(casesList[0].Lead_Lookup__c), 'Case Account should match ConvertedAccountId from Case Lead');
        System.assertEquals(casesList[1].ContactId, leadContactIdMap.get(casesList[1].Lead_Lookup__c), 'Case Contact should match ConvertedContactId from Case Lead');

        List<Opportunity> opps = [SELECT Id, Lead_ID__c, Lead__c FROM Opportunity];
        System.assertEquals(leadList.size(), opps.size(), 'There should be one Opp for each converted Lead');
        for (Opportunity opp : opps) {
            System.assertEquals(opp.Lead_ID__c, opp.Lead__c, 'OpportunityTriggerHandler should have set Lead lookup so that Lead_ID__c = Lead__c');
        }
    }

    @IsTest
    static void testTasktoContactConversion() {
        Account accountA = new Account (Name = 'Parent AccountA') ;

        insert accountA;

        Contact contactA = new Contact (FirstName = 'ParentA',
            LastName = 'Last',
            AccountId = accountA.Id,
            Email = 'jpentaleri@bluewavesolar.com');
        insert contactA;

        Lead leadOne = new Lead (   FirstName = 'leadOne',
            LastName = 'Test',
            Company = 'CompanyCo',
            Email = 'EmailOne@bluewavesolar.com',
            Parent_Account__c = accountA.Id,
            Product_Line__c = 'Community Solar',
            Contacted__c = true,
            Status = 'Qualified');
        insert leadOne;

        Task task = new Task(
            Subject = 'Customer Consent Task',
            WhoId = leadOne.Id,
            Priority = 'Normal',
            Status = 'Completed',
            Start_Date__c = System.today()
        );
        insert task;

        Test.startTest();
        LeadStatus convertStatus = [SELECT Id, MasterLabel FROM LeadStatus WHERE isConverted=true LIMIT 1];

        Database.LeadConvert lc = new Database.LeadConvert();
        lc.setLeadId(leadOne.Id);
        lc.setConvertedStatus(convertStatus.MasterLabel);
        Database.LeadConvertResult lcr = Database.convertLead(lc, false);
        System.assert(lcr.isSuccess(), 'Lead should have converted successfully');

        Task checkTask = [SELECT Id, WhoId FROM Task WHERE Id = :task.Id];
        System.assertEquals(contactA.Id, checkTask.WhoId, 'Task should be linked to Contact on converted Lead\'s parent account');

        Test.stopTest();
    }

    @IsTest static void testLeadUpdateAfterConversion() {
        LoanTestRecordWarehouse.partnerSetup();
        List<Lead> leads = new List<Lead>();
        leads.add(new Lead(
            FirstName = 'Test',
            LastName = 'Testcase',
            Company = 'Testtest',
            Loan_Amount__c = 30000,
            Requested_Loan_Amount__c = 30000,
            Email = 'test@test.com',
            Product_Line__c = 'Residential Loan',
            LASERCA__Home_State__c = 'MA'
        ));
        leads.add(new Lead(
            FirstName = 'Tester',
            LastName = 'Testcase',
            Company = 'Testtest',
            Loan_Amount__c = 30000,
            Requested_Loan_Amount__c = 30000,
            Email = 'tester@test.com',
            Product_Line__c = 'Residential Loan',
            LASERCA__Home_State__c = 'MA'
        ));
        insert leads;
        List<Database.LeadConvert> leadConverts = new List<Database.LeadConvert>();
        for (Lead l :leads){
            Database.LeadConvert lc = new Database.LeadConvert();
            lc.setLeadId(l.Id);
            lc.setConvertedStatus('Interested');
            leadConverts.add(lc);
        }
        List<Database.LeadConvertResult> lcrs = Database.convertLead(leadConverts, false);
        Set<Id> oppIds = new Set<Id>();
        for (Database.LeadConvertResult lcr : lcrs)  {
            System.assert(lcr.isSuccess(), 'Lead should have converted successfully');
            oppIds.add(lcr.getOpportunityId());
        }

        Account coApplicantAccount = new Account( Name = 'CoapplicantAccount');
        insert coApplicantAccount;

        Contact coApplicantContact = new Contact(
            FirstName = 'Cole',
            LastName = 'Swain',
            AccountId = coApplicantAccount.Id,
            Lead__c = leads[0].Id,
            Income__c = 2000,
            LASERCA__Social_Security_Number__c = '000000002');
        insert coApplicantContact;
        leads[0].Co_Applicant_First_Name__c = coApplicantContact.FirstName;
        leads[0].Co_Applicant_Last_Name__c = coApplicantContact.LastName;
        leads[0].Co_Applicant_Income__c = coApplicantContact.Income__c;
        leads[0].LASERCA__Co_Applicant_Social_Security_Number__c = coApplicantContact.LASERCA__Social_Security_Number__c;

        leads[1].System_Cost__c = 32000;
        update leads;
        Map<Id, Lead> leadMap = new Map<Id, Lead>(leads);

        List<Opportunity> opps = [
            SELECT Id, Personal_Credit_Report2__c, Loan_Principle__c,
                Co_Applicant_First_Name__c, Co_Applicant_Last_Name__c, Co_Applicant_Income__c,
                Co_Applicant_Social_Security__c, Lead__c
            FROM Opportunity
            WHERE Id = :oppIds];
        for (Opportunity opp : opps) {
            System.assertEquals(leadMap.get(opp.Lead__c).Personal_Credit_Report__c, opp.Personal_Credit_Report2__c, 'Opp should have Personal Credit Report from converted Lead');
            System.assertEquals(leadMap.get(opp.Lead__c).System_Cost__c, opp.Loan_Principle__c, 'Opp should have same loan principle as converted Lead\'s system cost');
            System.assertEquals(leadMap.get(opp.Lead__c).Co_Applicant_First_Name__c, opp.Co_Applicant_First_Name__c, 'Opp should have same Co_Applicant_First_Name__c as converted Lead');
            System.assertEquals(leadMap.get(opp.Lead__c).Co_Applicant_Last_Name__c, opp.Co_Applicant_Last_Name__c, 'Opp should have Co_Applicant_Last_Name__c as converted Lead');
        }
    }

    @IsTest static void testMultipleSubscriptions() {
        System_Properties__c sysProp = new System_Properties__c(
            Name = 'System',
            DocuSign_API_Account_ID__c = '123',
            DocuSign_Customer_Care_User__c = '123@123.com',
            DocuSign_Guest_User__c = '123@345.com',
            DocuSign_Guest_User_Credential__c = '234234',
            DocuSign_Integrator_Key__c = '123123-123123'
        );
        insert sysProp;


        Entity__c defaultEntity = new Entity__c(
            Name = 'BWC Holdings, LLC'
        );
        insert defaultEntity;

        Utility__c eversource = new Utility__c(
            Name = 'Eversource',
            Number_of_Decimal_Places__c = 2
        );

        Utility__c nationalGrid = new Utility__c(
            Name = 'National Grid',
            Number_of_Decimal_Places__c = 2
        );
        insert new List<Utility__c>{eversource, nationalGrid};

        Utility_NMC_Tariff__c nmcRate =  new Utility_NMC_Tariff__c(
            Value_of_Net_Metering_Credit__c = .1848,
            Name = 'Nation Grid WCMA Class 2 - S/F 2016',
            Sizing_Rate__c = true,
            Date__c = Date.today()
        );
        insert nmcRate;

        Product2 csProduct = new Product2( Name = 'Community Solar - SREC 16-01',
            Family = 'Community Solar',
            Product_Type__c = 'Community Solar',
            Program__c = 'SREC - Community Solar',
            State__c = 'MA',
            ProductCode = 'CS - BlueWave - 10%',
            IsActive = true,
            Lender_of_Record__c = 'BlueWave',
            NMC_Discount__c = 10,
            Annual_kWh_Maximum__c = 100000000,
            NM_Rate_Floor__c = 0,
            Customer_Subscription_Type__c = 'Electricity Cost ($)',
            Monthly_Late_Fee__c = 1);
        insert csProduct;

        Shared_Solar_System__c sss1 = getSharedSolarSystem(nmcRate, csProduct, eversource, 'Eversource P1');
        Shared_Solar_System__c sss2 = getSharedSolarSystem(nmcRate, csProduct, eversource, 'Eversource P2');
        Shared_Solar_System__c sss3 = getSharedSolarSystem(nmcRate, csProduct, nationalGrid, 'National Grid P1');
        List<Shared_Solar_System__c> sharedSolarSystems = new List<Shared_Solar_System__c>{sss1, sss2, sss3};
        insert sharedSolarSystems;

        Shared_Solar_System__c sssCheck = [
            SELECT Maximum_Subscription_Cost__c, Maximum_Subscription_Capacity_kWDC__c
            FROM Shared_Solar_System__c
            WHERE Id = :sss1.Id
        ];
        System.assertEquals(25, sssCheck.Maximum_Subscription_Capacity_kWDC__c, 'SSS should have a Maximum_Subscription_Capacity_kWDC__c of 25');
        System.assertEquals(6006, sssCheck.Maximum_Subscription_Cost__c, 'SSS should have a Maximum_Subscription_Cost__c of 6006');

        Account partnerAccount = new Account(
            Name = 'BlueWave Customer Care',
            RecordTypeId = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get('Partner_Account').getRecordTypeId()
        );
        insert partnerAccount;
        Partner__c partner = new Partner__c(
            Name = 'BlueWave Customer Care',
            Account__c = partnerAccount.Id
        );
        insert partner;
        partnerAccount.Partner__c = partner.Id;
        update partnerAccount;
        insert SharedSolarSystemsTest.getPartnerEligibilities(sharedSolarSystems, [SELECT Id FROM Account WHERE RecordType.Name = 'Partner Account']);
        BSST__c salesTeam = new BSST__c (Name = 'Partner',
            Partner__c = partner.Id,
            Custom_ID__c = 'partner'
        );
        insert salesTeam;

        Account parentAccount = new Account(Name = 'Parent');
        insert parentAccount;

        Lead primaryProperty = new Lead(
            FirstName = 'Test',
            LastName = 'Testcase',
            Email = 'test@test.com',
            Electricity_Provider__c = 'Eversource',
            Utility_relationship__c = eversource.Id,
            LoadZone__c = 'WCMA',
            Company = 'Test',
            Status = 'Qualified',
            Product_line__c = 'Community Solar',
            Product__c = csProduct.Id,
            Custom_ID__c = 'partner',
            System_Assignment__c = 'Automatic - Assignment Order',
            Parent_Account__c = parentAccount.Id,
            Underwriting_Criteria__c = 'Past Payment History',
            Partner_Lookup__c = partner.Id
        );
        Lead additionalProperty = primaryProperty.clone();
        additionalProperty.Utility_relationship__c = nationalGrid.Id;
        additionalProperty.Electricity_Provider__c = 'National Grid';
        insert new List<Lead>{primaryProperty, additionalProperty};
        CSQualificationTestclass.pullCreditForLead(primaryProperty.Id, 'High FICO');


        // kW DC = Annual Cost / NMC Rate / Yield
        Utility_Account_Log__c ual1 = new Utility_Account_Log__c(
            Lead__c = primaryProperty.Id,
            Annual_Cost_of_Electricity__c = 7207, // should result in 30 kW DC
            Name_on_Account__c = 'Primary 1'
        );
        Utility_Account_Log__c ual2 = new Utility_Account_Log__c(
            Lead__c = primaryProperty.Id,
            Annual_Cost_of_Electricity__c = 1201, // should result in 5 kW DC
            Name_on_Account__c = 'Primary 2'
        );
        Utility_Account_Log__c ual3 = new Utility_Account_Log__c(
            Lead__c = additionalProperty.Id,
            Annual_Cost_of_Electricity__c = 7207, // should result in 30 kW DC
            Name_on_Account__c = 'Additional 1'
        );
        insert new List<Utility_Account_Log__c>{ual1, ual2, ual3};

        Contract contract = new Contract(
            Lead__c = primaryProperty.Id,
            Product__c = csProduct.Id,
            RecordTypeId = CustomerContractService.RECORD_TYPE_ID,
            AccountId = parentAccount.Id,
            Contract_Type__c = 'Generic',
            Customer_Signature_Date_Time__c = System.now()
        );
        Contract contract2 = new Contract(
            Lead__c = additionalProperty.Id,
            Product__c = csProduct.Id,
            RecordTypeId = CustomerContractService.RECORD_TYPE_ID,
            AccountId = parentAccount.Id,
            Contract_Type__c = 'Project Specific',
            Customer_Signature_Date_Time__c = System.now()
        );
        insert new List<Contract>{contract, contract2};

        List<Opportunity> opps = [SELECT Id FROM Opportunity];
        List<Utility_Account_Subscription__c> uases = [SELECT Id FROM Utility_Account_Subscription__c];
        System.assertEquals(0, opps.size(), 'There should be no opps to start');
        System.assertEquals(0, uases.size(), 'There should be no uases to start');

        Test.startTest();
        Test.setMock(WebServiceMock.class, new DocuSignAPIMockImpl());
        Test.setMock(HttpCalloutMock.class, new DocuSignAPIMockImpl());
        // Since there are contracts to send here, we will run into "You have uncommitted work pending"
        // because of the DML in convertCSLead. The customerSubscriptionProcessTest method tests
        // the sendCSPackage method (which convertCSLead and sendContracts wraps) explicitly.
        LeadTriggerHandler.skipContractSend = true;
        CSAPController.convertCSLead(primaryProperty.Id, primaryProperty.Email);
        Test.stopTest();

        List<Lead> eversourceLeads = [SELECT Id, ConvertedAccountId FROM Lead WHERE Utility_relationship__r.Name = 'Eversource'];
        System.assertEquals(1, eversourceLeads.size(), 'There should be one Eversource lead');
        
        
        opps = [
            SELECT Id, Name, Shared_Solar_System__c, AccountId, ACH_Bank_Name__c, ACH_Bank_Routing_Number__c,
                CC_Account_Number__c, ACH_Account_Number__c, CC_Card_Type__c, Lead__c, Product__c, ContractId, 
                Contract.AccountId, Contract.Contract_Type__c, Contract.Customer_Signature_Date_Time__c, 
                Contract.Lead__c, Contract.Parent_Contract__c, Contract.Product__c
            FROM Opportunity
            WHERE Shared_Solar_System__r.Utility__r.Name = 'Eversource'
            AND AccountId =: eversourceLeads[0].ConvertedAccountId
        ];
        System.assertEquals(2, opps.size(), 'Lead conversion should have produced two Opportunities for Eversource, one for each SSS');

        for (Opportunity opp : opps) {
            System.assertNotEquals(contract.Id, opp.ContractId, 'A new Contract should have been created for each Opportunity');
            System.assertEquals(opp.AccountId, opp.Contract.AccountId, 'Opportunity\'s Contract should have the same Account as its Opportunity');
            System.assertEquals(opp.Lead__c, opp.Contract.Lead__c, 'Opportunity\'s Contract should have the same Lead as its Opportunity');
            System.assertEquals(opp.Product__c, opp.Contract.Product__c, 'Opportunity\'s Contract should have the same Product as its Opportunity');
            System.assertEquals('Project Specific', opp.Contract.Contract_Type__c, 'Opportunity\'s Contract type should be Project-Specific, as the parent Lead has a Generic contract type');
            System.assertEquals(contract.Customer_Signature_Date_Time__c, opp.Contract.Customer_Signature_Date_Time__c, 'Opportunity\'s Contract should have the same customer signature date time as its parent Contract');
            System.assertEquals(contract.Id, opp.Contract.Parent_Contract__c, 'Opportunity\'s Contract should have the parent Lead\'s original Contract as its parent Contract');
        }

        List<AggregateResult> uasAggregate = [
            SELECT Opportunity__r.AccountId, COUNT(Id) num, SUM(Customer_Subscription_KW_DC__c) total,
                MIN(Customer_Subscription_KW_DC__c) minimum, MAX(Customer_Subscription_KW_DC__c) maximum,
                SUM(Future_Customer_Subscription_KWDC_Rollup__c) kwTotal,
                MIN(Future_Customer_Subscription_KWDC_Rollup__c) kwMinimum,
                MAX(Future_Customer_Subscription_KWDC_Rollup__c) kwMaximum
            FROM Utility_Account_Subscription__c
            WHERE Opportunity__r.AccountId =: eversourceLeads[0].ConvertedAccountId
            GROUP BY Opportunity__r.AccountId
        ];

        
        System.assertEquals(3, uasAggregate[0].get('num'), 'Should be three UASes created by lead conversion');
        FeatureService featureService = new FeatureService();
        if (featureService.isEnabled('Subscription_Orders')) {
            System.assertEquals(35, ((Decimal) uasAggregate[0].get('kwTotal')).setScale(0), 'Should be a 25kW, 10kW and 5kW UAS created by lead conversion, for a kwTotal of 35 when subscription orders are active');
            System.assertEquals(25.013378, uasAggregate[0].get('kwMaximum'), 'Should be a 25kW, 10kW and 5kW UAS created by lead conversion, for a kwMaximum of 25.013378 when subscription orders are active');
            System.assertEquals(5, ((Decimal) uasAggregate[0].get('kwMinimum')).setScale(0), 'Should be a 25kW, 10kW and 5kW UAS created by lead conversion, for a kwMinimum of 5 when subscription orders are active');
        } else {
            System.assertEquals(35, ((Decimal) uasAggregate[0].get('total')).setScale(0), 'Should be a 25kW, 10kW and 5kW UAS created by lead conversion, for a total of 35 when subscription orders are NOT active');
            System.assertEquals(25, uasAggregate[0].get('maximum'), 'Should be a 25kW, 10kW and 5kW UAS created by lead conversion, for a maximum of 25 when subscription orders are NOT active');
            System.assertEquals(5, ((Decimal) uasAggregate[0].get('minimum')).setScale(0), 'Should be a 25kW, 10kW and 5kW UAS created by lead conversion, for a minimum of 5 when subscription orders are NOT active');
        }

        List<Lead> ngridLeads = [SELECT Id, ConvertedAccountId FROM Lead WHERE Utility_relationship__r.Name = 'National Grid'];
        System.assertEquals(1, ngridLeads.size(), 'There should be one National Grid lead');

        opps = [
            SELECT Id, Name, Shared_Solar_System__c, AccountId, ACH_Bank_Name__c, ContractId
            FROM Opportunity
            WHERE Shared_Solar_System__r.Utility__r.Name = 'National Grid'
            AND AccountId =: ngridLeads[0].ConvertedAccountId
        ];
        System.assertEquals(1, opps.size(), 'There should only be 1 opp for NGrid since there\'s only one SSS for National Grid');
        System.assertEquals(contract2.Id, opps[0].ContractId, 'This Opportunity should have been assigned the parent Contract, not had a new one created');
        

        uasAggregate = [
            SELECT Opportunity__r.AccountId, COUNT(Id) num, SUM(Customer_Subscription_KW_DC__c) total,
                MIN(Customer_Subscription_KW_DC__c) minimum, MAX(Customer_Subscription_KW_DC__c) maximum,
                SUM(Future_Customer_Subscription_KWDC_Rollup__c) kwTotal,
                MIN(Future_Customer_Subscription_KWDC_Rollup__c) kwMinimum,
                MAX(Future_Customer_Subscription_KWDC_Rollup__c) kwMaximum
            FROM Utility_Account_Subscription__c
            WHERE Opportunity__r.AccountId =: ngridLeads[0].ConvertedAccountId
            GROUP BY Opportunity__r.AccountId
        ];
        
        System.assertEquals(1, uasAggregate[0].get('num'), 'There should just be one 25kW UAS');
        if (featureService.isEnabled('Subscription_Orders')) {
            System.assertEquals(25, ((Decimal) uasAggregate[0].get('kwTotal')).setScale(0), 'Should be one 25kW UAS created by lead conversion, for a kwTotal of 25 when subscription orders are active');
            System.assertEquals(25.013378, uasAggregate[0].get('kwMaximum'), 'Should be one 25kW UAS created by lead conversion, for a kwMaximum of 25.013378 when subscription orders are active');
            System.assertEquals(25, ((Decimal) uasAggregate[0].get('kwMinimum')).setScale(0), 'Should be one 25kW UAS created by lead conversion, for a kwMinimum of 25 when subscription orders are active');
        } else {
            System.assertEquals(25, ((Decimal) uasAggregate[0].get('total')).setScale(0), 'Should be one 25kW UAS created by lead conversion, for a total of 25 when subscription orders are NOT active');
            System.assertEquals(25, uasAggregate[0].get('maximum'), 'Should be one 25kW UAS created by lead conversion, for a maximum of 25 when subscription orders are NOT active');
            System.assertEquals(25, ((Decimal) uasAggregate[0].get('minimum')).setScale(0), 'Should be one 25kW UAS created by lead conversion, for a minimum of 25 when subscription orders are NOT active');
        }
    }


    @IsTest static void testMultipleSubscriptionsBykWh() {
        System_Properties__c sysProp = new System_Properties__c(
            Name = 'System',
            DocuSign_API_Account_ID__c = '123',
            DocuSign_Customer_Care_User__c = '123@123.com',
            DocuSign_Guest_User__c = '123@345.com',
            DocuSign_Guest_User_Credential__c = '234234',
            DocuSign_Integrator_Key__c = '123123-123123'
        );
        insert sysProp;
        
        Utility__c eversource = new Utility__c(
            Name = 'Eversource',
            Number_of_Decimal_Places__c = 2
        );

        Utility__c nationalGrid = new Utility__c(
            Name = 'National Grid',
            Number_of_Decimal_Places__c = 2
        );

        insert new List<Utility__c>{eversource, nationalGrid};
        
        Utility_NMC_Tariff__c nmcRate =  new Utility_NMC_Tariff__c(
            Value_of_Net_Metering_Credit__c = .1848,
            Name = 'Nation Grid WCMA Class 2 - S/F 2016',
            Sizing_Rate__c = true,
            Size_Ratio__c = 1.5,
            Date__c = Date.today()
        );
        insert nmcRate;
        Product2 csProduct = new Product2( Name = 'Community Solar - SMART 18-02',
            Family = 'Community Solar',
            Product_Type__c = 'Community Solar',
            Program__c = 'SMART - Community Solar',
            Sizing_Method__c = 'Project Ratio',
            State__c = 'MA',
            ProductCode = 'CS - BlueWave - 10%',
            IsActive = true,
            Lender_of_Record__c = 'BlueWave',
            NMC_Discount__c = 10,
            Annual_kWh_Maximum__c = 100000000,
            NM_Rate_Floor__c = 0,
            Customer_Subscription_Type__c = 'kWh',
            Monthly_Late_Fee__c = 1);
        insert csProduct;

        PostSandboxRefresher.SolarSystemHelper helper = new PostSandboxRefresher.SolarSystemHelper(null);
        helper.insertTariffsForProduct(csProduct.Id, eversource.Id, nationalGrid.Id);

        Shared_Solar_System__c sss1 = getSharedSolarSystem(nmcRate, csProduct, eversource, 'Eversource P1');
        Shared_Solar_System__c sss2 = getSharedSolarSystem(nmcRate, csProduct, eversource, 'Eversource P2');
        Shared_Solar_System__c sss4 = getSharedSolarSystem(nmcRate, csProduct, eversource, 'Eversource P3');
        Shared_Solar_System__c sss5 = getSharedSolarSystem(nmcRate, csProduct, eversource, 'Eversource P4');
        Shared_Solar_System__c sss3 = getSharedSolarSystem(nmcRate, csProduct, nationalGrid, 'National Grid P1');
        List<Shared_Solar_System__c> sharedSolarSystems = new List<Shared_Solar_System__c>{sss1, sss2, sss3, sss4, sss5};
        insert sharedSolarSystems;
        Shared_Solar_System__c sssCheck = [
            SELECT Maximum_Subscription_Cost__c, Maximum_Subscription_Capacity_kWDC__c
            FROM Shared_Solar_System__c
            WHERE Id = :sss1.Id
        ];
        System.assertEquals(25, sssCheck.Maximum_Subscription_Capacity_kWDC__c, 'SSS should have a Maximum_Subscription_Capacity_kWDC__c of 25');
        System.assertEquals(6006, sssCheck.Maximum_Subscription_Cost__c, 'SSS should have a Maximum_Subscription_Cost__c of 6006');
        Account partnerAccount = new Account(
            Name = 'BlueWave Customer Care',
            RecordTypeId = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get('Partner_Account').getRecordTypeId()
        );
        insert partnerAccount;
        Partner__c partner = new Partner__c(
            Name = 'BlueWave Customer Care',
            Account__c = partnerAccount.Id
        );
        insert partner;
        partnerAccount.Partner__c = partner.Id;
        update partnerAccount;
        insert SharedSolarSystemsTest.getPartnerEligibilities(sharedSolarSystems, [SELECT Id FROM Account WHERE RecordType.Name = 'Partner Account']);
        BSST__c salesTeam = new BSST__c (Name = 'Partner',
            Partner__c = partner.Id,
            Custom_ID__c = 'partner'
        );
        insert salesTeam;
        Account parentAccount = new Account(Name = 'Parent');
        insert parentAccount;
        Lead primaryProperty = new Lead(
            FirstName = 'Test',
            LastName = 'Testcase',
            Email = 'test@test.com',
            Electricity_Provider__c = 'Eversource',
			Utility_relationship__c = eversource.Id,
            LoadZone__c = 'WCMA',
            Company = 'Test',
            Status = 'Qualified',
            Product_line__c = 'Community Solar',
            Customer_type__c = 'Residential',
            Product__c = csProduct.Id,
            Custom_ID__c = 'partner',
            System_Assignment__c = 'Automatic - Assignment Order',
            Parent_Account__c = parentAccount.Id
        );
        Lead additionalProperty = primaryProperty.clone();
        additionalProperty.Utility_relationship__c = nationalGrid.Id;
        additionalProperty.Electricity_Provider__c = 'National Grid';
        additionalProperty.Customer_type__c = 'Non-Residential';
        insert new List<Lead>{primaryProperty, additionalProperty};
        LASERCA__Personal_Credit_Report__c pcr = new LASERCA__Personal_Credit_Report__c(
            LASERCA__Lead__c = primaryProperty.Id,
            LASERCA__Credit_Score_TransUnion__c = '720'
        );
        insert pcr;
        primaryProperty.Personal_Credit_Report__c = pcr.Id;
        additionalProperty.Personal_Credit_Report__c = pcr.Id;
        update new List<Lead>{primaryProperty, additionalProperty};
        // kW DC = Annual kWh / NMC Rate / Yield
        //Annual kwh = 26,000
        //proposed kwh = 39,000
        Utility_Account_Log__c ual1 = new Utility_Account_Log__c(
            Lead__c = primaryProperty.Id,
            Annual_kWh__c = (1300 * 20), // sss yield 1300 kWh/kW * 30 kW subscription
            Name_on_Account__c = 'Primary 1'
        );
        //Annual kwh = 4333.33
        //proposed kwh = 6500
        Utility_Account_Log__c ual2 = new Utility_Account_Log__c(
            Lead__c = primaryProperty.Id,
            Annual_kWh__c = (1300 * 5 / 1.5).setScale(2), // sss yield 1300 kWh/kW * 5 kW subscription / 1.5 for Eversource R1
            Name_on_Account__c = 'Primary 2'
        );
        Utility_Account_Log__c ual3 = new Utility_Account_Log__c(
            Lead__c = additionalProperty.Id,
            Annual_kWh__c = (1300 * 25 / 1.45), // sss yield 1300 kWh/kW * 25 kW subscription / 1.45 for NG G2
            Name_on_Account__c = 'Additional 1'
        );

        insert new List<Utility_Account_Log__c>{ual1, ual2, ual3};
        List<Opportunity> opps = [SELECT Id FROM Opportunity];
        List<Utility_Account_Subscription__c> uases = [SELECT Id FROM Utility_Account_Subscription__c];
        System.assertEquals(0, opps.size(), 'There should be no opps to start');
        System.assertEquals(0, uases.size(), 'There should be no uases to start');

        Test.startTest();
        Test.setMock(WebServiceMock.class, new DocuSignAPIMockImpl());
        Test.setMock(HttpCalloutMock.class, new DocuSignAPIMockImpl());
        // Since there are contracts to send here, we will run into "You have uncommitted work pending"
        // because of the DML in convertCSLead. The customerSubscriptionProcessTest method tests
        // the sendCSPackage method (which convertCSLead and sendContracts wraps) explicitly.
        LeadTriggerHandler.skipContractSend = true;
        CSAPController.convertCSLead(primaryProperty.Id, primaryProperty.Email);
        Test.stopTest();
        List<Lead> eversourceLeads = [SELECT Id, ConvertedAccountId FROM Lead WHERE Utility_Relationship__r.Name = 'Eversource'];
        System.assertEquals(1, eversourceLeads.size(), 'There should be one Eversource lead');
        // 2 opps for the Eversource lead (one for each SSS)
        opps = [
            SELECT Id, Name, Shared_Solar_System__c, AccountId, ACH_Bank_Name__c, ACH_Bank_Routing_Number__c,
                CC_Account_Number__c, ACH_Account_Number__c
            FROM Opportunity
            WHERE Shared_Solar_System__r.Utility__r.Name = 'Eversource'
            AND AccountId =: eversourceLeads[0].ConvertedAccountId
        ];
        System.assertEquals(2, opps.size(), 'Lead conversion should have produced two Opportunities for Eversource, one for each SSS');
        
        List<AggregateResult> uasAggregate = [
            SELECT Opportunity__r.AccountId, COUNT(Id) num, SUM(Customer_Subscription_KW_DC__c) total,
                MIN(Customer_Subscription_KW_DC__c) minimum, MAX(Customer_Subscription_KW_DC__c) maximum,
                SUM(Future_Customer_Subscription_KWDC_Rollup__c) kwTotal,
                MIN(Future_Customer_Subscription_KWDC_Rollup__c) kwMinimum,
                MAX(Future_Customer_Subscription_KWDC_Rollup__c) kwMaximum
            FROM Utility_Account_Subscription__c
            WHERE Opportunity__r.AccountId =: eversourceLeads[0].ConvertedAccountId
            GROUP BY Opportunity__r.AccountId
        ];
        //Should be 25kW, 5kWh and 5kWh UASes for a total of 35
        System.assertEquals(3, uasAggregate[0].get('num'), 'Should be three UASes created by lead conversion');

        FeatureService featureService = new FeatureService();
        if (featureService.isEnabled('Subscription_Orders')) {
            System.assertEquals(35, ((Decimal) uasAggregate[0].get('kwTotal')).setScale(0), 'Should be a 25kW, 5kW and 5kW UAS created by lead conversion, for a kwTotal of 35 when subscription orders are active');
            System.assertEquals(25.013378, uasAggregate[0].get('kwMaximum'), 'Should be a 25kW, 5kW and 5kW UAS created by lead conversion, for a kwMaximum of 25.013378 when subscription orders are active');
            System.assertEquals(5, ((Decimal) uasAggregate[0].get('kwMinimum')).setScale(0), 'Should be a 25kW, 5kW and 5kW UAS created by lead conversion, for a kwMinimum of 5 when subscription orders are active');
        } else {
            System.assertEquals(35, ((Decimal) uasAggregate[0].get('total')).setScale(0), 'Should be a 25kW, 5kW and 5kW UAS created by lead conversion, for a total of 35 when subscription orders are NOT active');
            System.assertEquals(25, uasAggregate[0].get('maximum'), 'Should be a 25kW, 5kW and 5kW UAS created by lead conversion, for a maximum of 25 when subscription orders are NOT active');
            System.assertEquals(5, ((Decimal) uasAggregate[0].get('minimum')).setScale(0), 'Should be a 25kW, 5kW and 5kW UAS created by lead conversion, for a minimum of 5 when subscription orders are NOT active');
        }

        List<Lead> ngridLeads = [SELECT Id, ConvertedAccountId FROM Lead WHERE Utility_Relationship__r.Name  = 'National Grid'];
        System.assertEquals(1, ngridLeads.size(), 'There should be one National Grid lead');
        
        opps = [
            SELECT Id, Name, Shared_Solar_System__c, AccountId
            FROM Opportunity
            WHERE Shared_Solar_System__r.Utility__r.Name = 'National Grid'
            AND AccountId =: ngridLeads[0].ConvertedAccountId
        ];
        System.assertEquals(1, opps.size(), 'There should only be 1 opp for NGrid since there\'s only one SSS for National Grid');
        uasAggregate = [
            SELECT Opportunity__r.AccountId, COUNT(Id) num, SUM(Customer_Subscription_KW_DC__c) total,
                MIN(Customer_Subscription_KW_DC__c) minimum, MAX(Customer_Subscription_KW_DC__c) maximum,
                SUM(Future_Customer_Subscription_KWDC_Rollup__c) kwTotal,
                MIN(Future_Customer_Subscription_KWDC_Rollup__c) kwMinimum,
                MAX(Future_Customer_Subscription_KWDC_Rollup__c) kwMaximum
            FROM Utility_Account_Subscription__c
            WHERE Opportunity__r.AccountId =: ngridLeads[0].ConvertedAccountId
            GROUP BY Opportunity__r.AccountId
        ];
        // Just one 25kW UAS
        System.assertEquals(1, uasAggregate[0].get('num'), 'There should just be one 25kW UAS');
        if (featureService.isEnabled('Subscription_Orders')) {
            System.assertEquals(25, ((Decimal) uasAggregate[0].get('kwTotal')).setScale(0), 'Should be one 25kW UAS created by lead conversion, for a kwTotal of 25 when subscription orders are active');
            System.assertEquals(25.013378, uasAggregate[0].get('kwMaximum'), 'Should be one 25kW UAS created by lead conversion, for a kwMaximum of 25.013378 when subscription orders are active');
            System.assertEquals(25, ((Decimal) uasAggregate[0].get('kwMinimum')).setScale(0), 'Should be one 25kW UAS created by lead conversion, for a kwMinimum of 25 when subscription orders are active');
        } else {
            System.assertEquals(25, ((Decimal) uasAggregate[0].get('total')).setScale(0), 'Should be one 25kW UAS created by lead conversion, for a total of 25 when subscription orders are NOT active');
            System.assertEquals(25, uasAggregate[0].get('maximum'), 'Should be one 25kW UAS created by lead conversion, for a maximum of 25 when subscription orders are NOT active');
            System.assertEquals(25, ((Decimal) uasAggregate[0].get('minimum')).setScale(0), 'Should be one 25kW UAS created by lead conversion, for a minimum of 25 when subscription orders are NOT active');
        }
    }

    @IsTest
    private static void testGetSortedSharedSolarSystems() {
        SharedSolarSystems sssList = new SharedSolarSystems(new List<Shared_Solar_System__c>{getMockSSSIgnoringLoadZones(true, 'SEMA')});
        System.assertEquals(1, sssList.getQualifiedForLead(getMockLead('NEMA')).size(),
            'Should have found a qualifying system if ignoring load zones:\n' +
                JSON.serializePretty(sssList) + '\n' + JSON.serializePretty(getMockLead('NEMA')));

        sssList = new SharedSolarSystems(new List<Shared_Solar_System__c>{getMockSSSIgnoringLoadZones(false, 'SEMA')});
        System.assertEquals(0, sssList.getQualifiedForLead(getMockLead('NEMA')).size(),
            'Should not have found a qualifying system if ignoring load zones:\n' +
                JSON.serializePretty(sssList) + '\n' + JSON.serializePretty(getMockLead('NEMA')));

        sssList = new SharedSolarSystems(new List<Shared_Solar_System__c>{getMockSSSIgnoringLoadZones(false, 'SEMA')});
        System.assertEquals(1, sssList.getQualifiedForLead(getMockLead('SEMA')).size(),
            'Should have found a qualifying system if not ignoring load zones but getting a lead that matches:\n' +
                JSON.serializePretty(sssList) + '\n' + JSON.serializePretty(getMockLead('SEMA')));
    }

    private static Lead getMockLead(String loadZone) {
        sfab_FabricatedSObject fabbedLead = new sfab_FabricatedSObject(Lead.class);
        fabbedLead.setField(Lead.Utility_relationship__c, Util.getFakeId(Utility__c.SObjectType));
        fabbedLead.setField(Lead.LoadZone__c, loadZone);
        fabbedLead.setField(Lead.Partner_Lookup__c, Util.getFakeId(Partner__c.SObjectType));
        fabbedLead.setField(Lead.Product__c, Util.getFakeId(Product2.SObjectType));
        fabbedLead.setField(Lead.Underwriting_Criteria__c, 'FICO');
        fabbedLead.setField(Lead.LASER_Credit_Score__c, '800');
        return (Lead) fabbedLead.toSObject();
    }
    private static Shared_Solar_System__c getMockSSSIgnoringLoadZones(Boolean ignoreLoadZones, String serviceTerritories) {
        sfab_FabricatedSObject fabbedSSS = new sfab_FabricatedSObject(Shared_Solar_System__c.class);
        sfab_FabricatedSObject fabbedProduct = new sfab_FabricatedSObject(Product2.class);
        fabbedProduct.setField(Product2.Ignore_Load_Zones_When_Qualifying__c, ignoreLoadZones);
        fabbedSSS.setParent('Product__r', fabbedProduct);
        fabbedSSS.setField(Shared_Solar_System__c.Product__c, Util.getFakeId(Product2.SObjectType));
        fabbedSSS.setField(Shared_Solar_System__c.Service_Territories__c, serviceTerritories);
        fabbedSSS.setField(Shared_Solar_System__c.Utility__c, Util.getFakeId(Utility__c.SObjectType));
        fabbedSSS.setField(Shared_Solar_System__c.Available_SMB_Underwriting_Method_FICO__c, true);
        fabbedSSS.setField(Shared_Solar_System__c.Credit_Score_Requirement__c, 200);
        sfab_FabricatedSObject fabbedPartnerEligibility = new sfab_FabricatedSObject(Partner_Shared_Solar_System_Eligibility__c.class);
        sfab_FabricatedSObject fabbedPartnerAccount = new sfab_FabricatedSObject(Account.class);
        fabbedPartnerAccount.setField(Account.Partner__c, Util.getFakeId(Partner__c.SObjectType));
        fabbedPartnerEligibility.setParent('Account__r', fabbedPartnerAccount);
        fabbedSSS.setChildren('Partner_Shared_Solar_System_Accesses__r', new List<sfab_FabricatedSObject>{fabbedPartnerEligibility});
        return (Shared_Solar_System__c) fabbedSSS.toSObject();
    }

    @SuppressWarnings('PMD.AvoidDmlStatementsInLoops')
    public static Shared_Solar_System__c getSharedSolarSystem(Utility_NMC_Tariff__c nmcRate, Product2 csProduct,
        Utility__c utility, String name) {
        Shared_Solar_System__c sss1 = new Shared_Solar_System__c(
            Name = name,
            Service_Territories__c = 'WCMA; SEMA',
            Open__c = true,
            Reserved_Capacity_kW_DC__c = '0',
            Capacity_Committed_kW_DC__c = 0,
            Total_System_Size_kWh_DC__c = 1445.86,
            Total_System_Size_kW_AC__c = 996,
            Utility__c = utility.Id,
            Credit_Score_Requirement__c = 700,
            Assignment_Order__c = '1',
            Utility_NMC_Tariff__c = nmcRate.Id,
            Product__c = csProduct.Id,
            Expected_Yield_kWh_kW__c = 1300,
            Assemblage_Count__c = 1,
            Maximum_Subscription_Capacity_kWDC__c = 25,
            Available_SMB_Underwriting_Method_Docs__c = true,
            Available_SMB_Underwriting_Method_FICO__c = true
        );
        return sss1;
    }
}