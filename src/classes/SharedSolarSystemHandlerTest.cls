/**
 * Created by AlyssaCooper on 3/20/2019.
 */
@IsTest
public with sharing class SharedSolarSystemHandlerTest {
    @TestSetup
    public static void setupData() {
        Test.startTest();
        Utility__c eversource = new Utility__c(
            Name = 'Eversource',
            Number_of_Decimal_Places__c = 2
        );

        Utility__c nationalGrid = new Utility__c(
            Name = 'National Grid',
            Number_of_Decimal_Places__c = 2
        );
        Utility__c noSSS = new Utility__c(
            Name = 'No SSS Utility',
            Number_of_Decimal_Places__c = 2
        );

        insert new List<Utility__c>{
            eversource, nationalGrid, noSSS
        };
        Entity__c entity1 = new Entity__c(Name = 'Oxford Barrett St. P1');
        insert entity1;

        Utility_NMC_Tariff__c everbillNMC = new Utility_NMC_Tariff__c(Name = 'Eversource SEMA Class 2',
            Utility__c = 'Eversource',
            Class__c = 'Class 2',
            Value_of_Net_Metering_Credit__c = 0.1848,
            Current_Billing_Rate__c = TRUE);

        Utility_NMC_Tariff__c eversizeNMC = new Utility_NMC_Tariff__c(Name = 'Eversource SEMA Class 2',
            Utility__c = 'Eversource',
            Class__c = 'Class 2',
            Value_of_Net_Metering_Credit__c = 0.1848,
            Sizing_Rate__c = TRUE);

        insert new List<Utility_NMC_Tariff__c>{
            everbillNMC, eversizeNMC
        };

        Load_U__c everLZU = new Load_U__c(Name = '02633',
            LZ__c = 'SEMA',
            Town__c = 'Medfield');
        insert everLZU;

        ZipCode_Utility_Junction__c junction = new ZipCode_Utility_Junction__c(
            Load_Zone_Utility__c = everLZU.Id,
            Utility__c = eversource.Id
        );
        insert junction;

        Account clientAccount = new Account(name = 'Test Client');
        insert clientAccount;

        Product2 normalCSProduct = new Product2( Name = 'BlueWave Community Solar',
            Family = 'Community Solar',
            Product_Type__c = 'Community Solar',
            State__c = 'MA',
            ProductCode = 'CS - BlueWave - 10%',
            IsActive = True,
            Lender_of_Record__c = 'BlueWave',
            NMC_Discount__c = 10,
            Annual_kWh_Maximum__c = 100000000,
            NM_Rate_Floor__c = 0,
            Days_in_Bill_Period__c = 20,
            Customer_Subscription_Type__c = 'kWH',
            Monthly_Late_Fee__c = 1);

        Product2 publicCSProduct = new Product2(  Name = 'BlueWave Public Offtake CS',
            Family = 'Community Solar',
            Product_Type__c = 'Community Solar',
            State__c = 'MA',
            ProductCode = 'CS - Bluewave - Public CS - 20%',
            IsActive = True,
            Lender_of_Record__c = 'BlueWave',
            NMC_Discount__c = 20,
            Annual_kWh_Maximum__c = 63000,
            NM_Rate_Floor__c = 0.09,
            Days_in_Bill_Period__c = 20,
            Monthly_Late_Fee__c = 0.8333);
        insert new List<Product2>{normalCSProduct, publicCSProduct};

        Shared_Solar_System__c sss1 = new Shared_Solar_System__c(Name = 'SSS 1',
            Service_Territory__c = 'SEMA',
            Service_Territories__c = 'SEMA',
            Open__c = true,
            Stage__c = 'Onboarding',
            Client_Account__c = clientAccount.Id,
            Product__c = normalCSProduct.Id,
            Utility_NMC_Tariff__c = everbillNMC.Id,
            Reserved_Capacity_kW_DC__c = '10',
            Capacity_Committed_kW_DC__c = 0,
            Total_System_Size_kWh_DC__c = 48,
            Total_System_Size_kW_AC__c = 80,
            Utility__c = eversource.Id,
            Credit_Score_Requirement__c = 300,
            Assignment_Order__c = '1',
            Expected_Yield_kWh_kW__c = 100,
            Assemblage_Count__c = 1,
            Sales_Partners__c = 'All'

        );

        Shared_Solar_System__c sss2 = new Shared_Solar_System__c(Name = 'SSS 2',
            Service_Territory__c = 'NEMA',
            Service_Territories__c = 'NEMA',
            Open__c = true,
            Stage__c = 'Onboarding',
            Client_Account__c = clientAccount.Id,
            Reserved_Capacity_kW_DC__c = '10',
            Capacity_Committed_kW_DC__c = 0,
            Total_System_Size_kWh_DC__c = 32,
            Total_System_Size_kW_AC__c = 996,
            Utility__c = eversource.Id,
            Credit_Score_Requirement__c = 300,
            Assignment_Order__c = '2',
            Expected_Yield_kWh_kW__c = 1300,
            Assemblage_Count__c = 1,
            Sales_Partners__c = 'All'
        );


        Shared_Solar_System__c sss3 = new Shared_Solar_System__c(Name = 'SSS 3',
            Service_Territory__c = 'NEMA',
            Service_Territories__c = 'NEMA',
            Open__c = true,
            Client_Account__c = clientAccount.Id,
            Reserved_Capacity_kW_DC__c = '10',
            Capacity_Committed_kW_DC__c = 0,
            Total_System_Size_kWh_DC__c = 1445.86,
            Total_System_Size_kW_AC__c = 996,
            Utility__c = eversource.Id,
            Credit_Score_Requirement__c = 300,
            Assignment_Order__c = '3',
            Expected_Yield_kWh_kW__c = 1300,
            Assemblage_Count__c = 1,
            Sales_Partners__c = 'All',
            Maximum_Subscription_Assemblage__c = 25);


        insert new List<Shared_Solar_System__c>{sss1, sss2, sss3};

        List<Shared_Solar_System__c> noSharedSolarSystems =
            SharedSolarSystemsSelector.selectSharedSolarSystemsWithCapacityByUtilityAndLoadZone(
                new Set<Id>{
                    noSSS.Id
                },
                new Set<String>{
                    'No Load Zone'
                }
            );

        System.assertEquals(0, noSharedSolarSystems.size());

        noSharedSolarSystems =
            SharedSolarSystemsSelector.selectSharedSolarSystemsWithCapacityByUtilityAndLoadZone(
                new Set<Id>{
                    eversource.Id
                },
                new Set<String>{
                    'No Load Zone'
                }
            );

        System.assertEquals(0, noSharedSolarSystems.size());

        noSharedSolarSystems =
            SharedSolarSystemsSelector.selectSharedSolarSystemsWithCapacityByUtilityAndLoadZone(
                new Set<Id>(),
                new Set<String>()
            );

        System.assertEquals(0, noSharedSolarSystems.size());

        noSharedSolarSystems =
            SharedSolarSystemsSelector.selectSharedSolarSystemsWithCapacityByUtilityAndLoadZone(
                new Set<Id>{
                    noSSS.Id
                },
                new Set<String>{
                    'SEMA'
                }
            );

        System.assertEquals(0, noSharedSolarSystems.size());

        List<Shared_Solar_System__c> eversourceSharedSolarSystems =
            SharedSolarSystemsSelector.selectSharedSolarSystemsWithCapacityByUtilityAndLoadZone(
                new Set<Id>{
                    eversource.Id
                },
                new Set<String>{
                    'SEMA', 'NEMA'
                }
            );

        System.assertEquals(3, eversourceSharedSolarSystems.size());


        List<Shared_Solar_System__c> ngAndEversourceSharedSolarSystems =
            SharedSolarSystemsSelector.selectSharedSolarSystemsWithCapacityByUtilityAndLoadZone(
                new Set<Id>{
                    nationalGrid.Id, eversource.Id
                },
                new Set<String>{
                    'SEMA', 'NEMA'
                }
            );

        System.assertEquals(3, ngAndEversourceSharedSolarSystems.size());

        Account accountParent1 = new Account(Name = 'Parent Account 1', Client_Brand_Key__c = 'BluewaveLogo');
        Account accountParent2 = new Account(Name = 'Parent Account 2', Client_Brand_Key__c = 'AmpRed');
        Account accountParent3 = new Account(Name = 'Parent Account 3', Client_Brand_Key__c = 'BluewaveLogo');
        insert new List<Account>{accountParent1, accountParent2, accountParent3};

        Contact contactA = new Contact( FirstName = 'Contact A',
            LastName = 'Last',
            Account = accountParent1,
            Email = 'acooper@bluewavesolar.com');
        Contact contactB = new Contact( FirstName = 'Contact B',
            LastName = 'Last',
            Account = accountParent2,
            Email = 'acooper@bluewavesolar.com');
        Contact contactC = new Contact( FirstName = 'Contact C',
            LastName = 'Last',
            Account = accountParent3,
            Email = 'acooper@bluewavesolar.com');

        insert new List<Contact>{contactA, contactB, contactC};

        Account propAcct1 = new Account( Name = 'Prop Account 1',
            Parent_Account__c = accountParent1.Id,
            Send_Bills_Contact__c = contactA.Id,
            RecordTypeId = '012j00000010HeQ',
            Client_Brand_Key__c = 'BluewaveLogo');
        Account propAcct2 = new Account( Name = 'Prop Account 2',
            Parent_Account__c = accountParent2.Id,
            Send_Bills_Contact__c = contactB.Id,
            RecordTypeId = '012j00000010HeQ',
            Client_Brand_Key__c = 'AmpRed');
        Account propAcct3 = new Account( Name = 'Prop Account 3',
            Parent_Account__c = accountParent3.Id,
            Send_Bills_Contact__c = contactC.Id,
            RecordTypeId = '012j00000010HeQ',
            Client_Brand_Key__c = 'BluewaveLogo');

        insert new List<Account>{propAcct1, propAcct2, propAcct3};

        Utility_Account_Log__c ualog1 = new Utility_Account_Log__c(
            Name = '0000234',
            Account__c = propAcct1.Id,
            Annual_Cost_of_Electricity__c = 10000,
            Name_on_Account__c = 'Name one');

        Utility_Account_Log__c ualog2 = new Utility_Account_Log__c(
            Name = '0000236',
            Account__c = propAcct2.Id,
            Annual_Cost_of_Electricity__c = 10000,
            Name_on_Account__c = 'Name two');

        Utility_Account_Log__c ualog3 = new Utility_Account_Log__c(
            Name = '0000238',
            Account__c = propAcct3.Id,
            Annual_Cost_of_Electricity__c = 10000,
            Name_on_Account__c = 'Name three');

        insert new List<Utility_Account_Log__c>{ualog1, ualog2, ualog3};


        Opportunity opportunityone =
            new Opportunity(Name = 'Alyssa Testcase1 0000234',
                AccountId = propAcct1.Id,
                Shared_Solar_System__c = sss1.Id,
                StageName = 'Complete',
                NMC_Tariff__c = everbillNMC.Id,
                Product__c = normalCSProduct.Id,
                Product_Line__c = 'Community Solar',
                CloseDate = System.today());

        Opportunity opportunitytwo =
            new Opportunity(Name = 'Alyssa Testcase2 0000236',
                AccountId = propAcct2.Id,
                Shared_Solar_System__c = sss2.Id,
                StageName = 'Complete',
                Product__c = normalCSProduct.Id,
                Product_Line__c = 'Community Solar',
                CloseDate = System.today());

        Opportunity opportunitythree =
            new Opportunity(Name = 'Alyssa Testcase3 0000238',
                AccountId = propAcct3.Id,
                Shared_Solar_System__c = sss2.Id,
                StageName = 'Complete',
                Product__c = normalCSProduct.Id,
                Product_Line__c = 'Community Solar',
                CloseDate = System.today());

        Opportunity opportunityFour =
            new Opportunity(Name = 'Alyssa Anchor 0000238',
                AccountId = propAcct3.Id,
                Shared_Solar_System__c = sss2.Id,
                StageName = 'Complete',
                Customer_Group__c = 'Anchor',
                Product__c = normalCSProduct.Id,
                Product_Line__c = 'Community Solar',
                CloseDate = System.today());
        insert new List<Opportunity>{opportunityone, opportunitytwo, opportunitythree, opportunityFour};

        Utility_Account_Subscription__c uasOne =
            new Utility_Account_Subscription__c(Name = '0000234',
                Utility_Account_Log__c = ualog1.Id,
                Opportunity__c = opportunityone.Id,
                Next_Schedule_Z_Status__c = 'Active Subscription',
                Annual_kwh_subscription_future__c = 4000,
                Calculated_Annual_Cost_of_Electricity__c = 4000,
                Subscribed_Annual_Cost_of_Electricity__c = 4000);
        Utility_Account_Subscription__c uasTwo =
            new Utility_Account_Subscription__c(Name = '0000236',
                Utility_Account_Log__c = ualog2.Id,
                Opportunity__c = opportunitytwo.Id,
                Next_Schedule_Z_Status__c = 'Active Subscription',
                Annual_kwh_subscription_future__c = 8000,
                Calculated_Annual_Cost_of_Electricity__c = 8000,
                Subscribed_Annual_Cost_of_Electricity__c = 8000);
        Utility_Account_Subscription__c uasThree =
            new Utility_Account_Subscription__c(Name = '0000238',
                Utility_Account_Log__c = ualog3.Id,
                Opportunity__c = opportunitythree.Id,
                Next_Schedule_Z_Status__c = 'Active Subscription',
                Annual_kwh_subscription_future__c = 300,
                Calculated_Annual_Cost_of_Electricity__c = 300,
                Subscribed_Annual_Cost_of_Electricity__c = 300);
        Utility_Account_Subscription__c uasFour =
            new Utility_Account_Subscription__c(Name = '0000239',
                Utility_Account_Log__c = ualog3.Id,
                Opportunity__c = opportunityFour.Id,
                Next_Schedule_Z_Status__c = 'Active Subscription',
                Annual_kwh_subscription_future__c = 30000,
                Calculated_Annual_Cost_of_Electricity__c = 30000,
                Subscribed_Annual_Cost_of_Electricity__c = 30000);

        insert new List<Utility_Account_Subscription__c>{uasOne, uasTwo, uasThree, uasFour};

        Schedule_Z__c scheduleZ1 = new Schedule_Z__c(
            Name = '18-0515 Oxford Barrett St. P1',
            Shared_Solar_System__c = sss1.Id,
            Date_Enacted_by_Utility__c = Date.newInstance(2018,1,1),
            Status__c = 'Billing'
        );

        Schedule_Z__c scheduleZ2 = new Schedule_Z__c(
            Name = '18-0515 Oxford Barrett St. P2',
            Shared_Solar_System__c = sss2.Id,
            Date_Enacted_by_Utility__c = Date.newInstance(2018,1,1),
            Status__c = 'Billing'
        );

        Schedule_Z__c scheduleZ3 = new Schedule_Z__c(
            Name = '18-0515 Oxford Barrett St. P3',
            Shared_Solar_System__c = sss3.Id,
            Date_Enacted_by_Utility__c = Date.newInstance(2018,1,1),
            Status__c = 'Billing'
        );

        insert new List<Schedule_Z__c>{scheduleZ1, scheduleZ2, scheduleZ3};
        Test.stopTest();
    }

    @IsTest
    public static void testApexContext() {
        Shared_Solar_System__c sss = [
            SELECT Id, Apex_Context__c, Stage__c, Estimated_COD_Date__c, Estimated_PTO_Date__c
            FROM Shared_Solar_System__c
            WHERE Name = 'SSS 1'
            LIMIT 1
        ];

        //Change SSS Stage to Acquisition so Validation Rule is active
        sss.Estimated_COD_Date_Manual__c = System.today();
        sss.Estimated_PTO_Date_MANUAL__c = System.today();
        sss.Stage__c = 'Acquisition';
        update sss;

        sss = [
            SELECT Id, Apex_Context__c, Total_System_Size_kWh_DC__c
            FROM Shared_Solar_System__c
            WHERE Id = :sss.Id
            LIMIT 1
        ];

        //Before setting Apex Context - should not be able to update system size due to Validation Rule
        sss.Total_System_Size_kWh_DC__c = 80;

        try {
            update sss;
        } catch (Exception e) {
            System.assertNotEquals(null, e.getMessage(), 'Update of SSS should fail due to Validation Rule');
        }

        sss = [
            SELECT Id, Apex_Context__c, Total_System_Size_kWh_DC__c
            FROM Shared_Solar_System__c
            WHERE Id = :sss.Id
            LIMIT 1
        ];

        System.assertEquals(48, sss.Total_System_Size_kWh_DC__c);

        //Set Apex_Context to true to bypass validation rule
        sss.Apex_Context__c = true;
        sss.Total_System_Size_kWh_DC__c = 80;
        update sss;

        sss = [
            SELECT Id, Apex_Context__c, Total_System_Size_kWh_DC__c
            FROM Shared_Solar_System__c
            WHERE Id = :sss.Id
            LIMIT 1
        ];

        //Apex Context is automatically set back to false after updating SSS
        System.assertEquals(false, sss.Apex_Context__c);
        System.assertEquals(80, sss.Total_System_Size_kWh_DC__c);
    }

    @IsTest
    public static void testSharedSolarSystemUpdate() {
        Test.startTest();

        List<Utility_Account_Subscription__c> uas = [SELECT Utility_Account_Log__c,
            Opportunity__c,
            Next_Schedule_Z_Status__c,
            Calculated_Annual_Cost_of_Electricity__c,
            Subscribed_Annual_Cost_of_Electricity__c,
            Customer_Subscription_KW_DC__c,
            Opportunity__r.Shared_Solar_System__c
        FROM Utility_Account_Subscription__c
        WHERE Name = '0000234'
        LIMIT  1];

        List<Shared_Solar_System__c> testSSS = [SELECT Name, Capacity_Committed_kW_DC__c
        FROM Shared_Solar_System__c
        WHERE Id =: uas[0].Opportunity__r.Shared_Solar_System__c];

        System.assertNotEquals(0, uas[0].Customer_Subscription_KW_DC__c);
        update testSSS;

        System.assertEquals(uas[0].Customer_Subscription_KW_DC__c, testSSS[0].Capacity_Committed_kW_DC__c);
        System.assertNotEquals(0, testSSS[0].Capacity_Committed_kW_DC__c);
        Test.stopTest();
    }

    @IsTest
    public static void testMultipleUASes() {
        Shared_Solar_System__c originalSSS = [
            SELECT Id, Capacity_Committed_kW_DC__c, Anchor_capacity_reserved__c
            FROM Shared_Solar_System__c
            WHERE Name = 'SSS 2'
            LIMIT 1
        ];

        // 2 UASes:  6.1538 , 0.2308 = 6.3846
        // 1 Anchor: 23.0769
        System.assertEquals(6.3846,originalSSS.Capacity_Committed_kW_DC__c);
        System.assertEquals(23.0769,originalSSS.Anchor_capacity_reserved__c);

        Utility_Account_Subscription__c selectedUAS = [
            SELECT Utility_Account_Log__c,
                Opportunity__c,
                Next_Schedule_Z_Status__c,
                Annual_kwh_subscription_future__c,
                Calculated_Annual_Cost_of_Electricity__c,
                Subscribed_Annual_Cost_of_Electricity__c,
                Customer_Subscription_KW_DC__c,
                Opportunity__r.Shared_Solar_System__c
            FROM Utility_Account_Subscription__c
            WHERE Name = '0000236'
            LIMIT 1
        ];

        // Increase one subscription:
        selectedUAS.Annual_kwh_subscription_future__c = 12000;
        update selectedUAS;

        Test.startTest();
        SharedSolarSystemHandler handler = new SharedSolarSystemHandler();
        handler.updateSSS();
        Test.stopTest();

        Shared_Solar_System__c sssUpdated = [
            SELECT Id, Capacity_Committed_kW_DC__c, Anchor_capacity_reserved__c
            FROM Shared_Solar_System__c
            WHERE Name = 'SSS 2'
            LIMIT 1
        ];

        // 2 UASes:  6.1538 , 0.2308 = 6.3846
        // 1 Anchor: 23.0769
        System.assertEquals(9.4616,sssUpdated.Capacity_Committed_kW_DC__c);
        System.assertEquals(23.0769,sssUpdated.Anchor_capacity_reserved__c);
    }

    @IsTest
    public static void testStageUpdate(){
        List<Shared_Solar_System__c> testSSS = [
            SELECT Name, Capacity_Committed_kW_DC__c, Stage__c
            FROM Shared_Solar_System__c
            WHERE Name = 'SSS 1'
        ];

        String response = SharedSolarSystemHandler.updateStage(testSSS[0].Id,'Pending');
        System.assertEquals('Success',response);

        //Does not update because of validation rules
        String responseTwo = SharedSolarSystemHandler.updateStage(testSSS[0].Id,'Management');
        System.assertNotEquals('Success',responseTwo);
    }

    @IsTest
    public static void testReservedAnchorCapacity(){
        List<Shared_Solar_System__c> sssList = [
            SELECT Name, Capacity_Committed_kW_DC__c, Stage__c, Anchor_Capacity_Reserved__c
            FROM Shared_Solar_System__c
            ORDER BY Name
            LIMIT 2
        ];

        sssList[0].Reserved_Anchor_Capacity__c = 7;
        update sssList[0];

        List<Shared_Solar_System__c> checkSSS = [
            SELECT Name, Capacity_Committed_kW_DC__c, Stage__c, Anchor_Capacity_Reserved__c, Reserved_Anchor_Capacity__c,
                Capacity_Available_to_be_Reserved__c, Total_Capacity_Committed_Reserved__c, Total_System_Size_kWh_DC__c
            FROM Shared_Solar_System__c
            ORDER BY Name
            LIMIT 2
        ];

        //SSS1 does NOT have anchors but the Reserved Anchor Capacity field is populated
        //SSS2 does have anchors --> Anchor Capacity should be sum of anchor opps
        System.assertEquals(7, checkSSS[0].Reserved_Anchor_Capacity__c);
        System.assertEquals(7, checkSSS[0].Anchor_Capacity_Reserved__c);
        System.assertEquals(23.0769, checkSSS[1].Anchor_Capacity_Reserved__c);

        checkSSS[0].Open__c = false;
        checkSSS[1].Open__c = false;

        update checkSSS;

        //Move the SSS1 into management --> Anchor Capacity should be 0
        //Move SSS2 into Management --> should be sum of anchor opps
        String response = SharedSolarSystemHandler.updateStage(checkSSS[0].Id,'Management');
        System.assertEquals('Success', response);
        String responseTwo = SharedSolarSystemHandler.updateStage(checkSSS[1].Id,'Management');
        System.assertEquals('Success', responseTwo);

        checkSSS = [
            SELECT Name, Capacity_Committed_kW_DC__c, Stage__c, Anchor_Capacity_Reserved__c
            FROM Shared_Solar_System__c
            ORDER BY Name
            LIMIT 2
        ];

        System.assertEquals('Management', checkSSS[0].Stage__c);
        System.assertEquals(0, checkSSS[0].Anchor_Capacity_Reserved__c);

        System.assertEquals('Management', checkSSS[1].Stage__c);
        System.assertEquals(23.0769, checkSSS[1].Anchor_Capacity_Reserved__c);
    }
}