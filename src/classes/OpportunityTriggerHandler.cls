/*************************************************************************************
 * Test: OpportunityTriggerTest,LeadTriggerHandlerTest,CSCancellationServiceTest, ClientBrandingServiceTest
 *************************************************************************************/

public without sharing class OpportunityTriggerHandler {
    private Boolean m_isExecuting = false;
    private Integer batchSize = 0;

    public void onBeforeInsert(List<Opportunity> newOppList){
        customIdSwapOpp(newOppList, null);
        mapDocuSignRS(newOppList, null);
        setLeadLookup(newOppList);
        eventHandling(newOppList, null);
    }

    public void onBeforeUpdate(List<Opportunity> oldOppList, List<Opportunity> updatedOppList, Map<ID, Opportunity> oldOppMap, Map<ID, Opportunity> newOppMap){
        customIdSwapOpp(updatedOppList, oldOppMap);
        mapDocuSignRS(updatedOppList, oldOppMap);
        updateInvoicedSubscription(oldOppMap, newOppMap);
        eventHandling(updatedOppList, oldOppMap);
    }

    public void onAfterUpdate(Map<Id, Opportunity> oldMap, Map<Id, Opportunity> newMap) {
        List<Account> acctsToCancel = CSCancellationService.getAccountsToClose(newMap, oldMap);
        if (!acctsToCancel.isEmpty()) {
            CSCancellationService.closeAccounts(acctsToCancel);
        }

        ClientReportingService.updateClientUAS(newMap, oldMap);
    }

    public void queueNMCTariffChange(List<Opportunity> oppList, Map<Id, Opportunity> oldMap) {
        Set<Id> oppsWithNMCTariffChange = new Set<Id>();
        for (Opportunity opp : oppList) {
            if (opp.NMC_Tariff__c != oldMap.get(opp.Id).NMC_Tariff__c) {
                oppsWithNMCTariffChange.add(opp.Id);
            }
        }
        if (oppsWithNMCTariffChange.size() > 0 ) {
            SubscriptionManagementService subscriptionService = new SubscriptionManagementService();
            subscriptionService.oppIdsWithChangedNMCTariff = oppsWithNMCTariffChange;
            System.enqueueJob(subscriptionService);
        }
    }

    public void customIdSwapOpp(List<Opportunity> oppList, Map<ID, Opportunity> oldOppMap){
        Set<String> customIdSet = new Set<String>();
        for (Opportunity opp : oppList){
            if (opp.Custom_Id__c != null){
                customIdSet.add(opp.Custom_Id__c);
            }
        }
        if (customIdSet.size() > 0 ){
            Map<String, BSST__c> salesIdMap = new Map<String, BSST__c>();
            for (BSST__c obj : [SELECT Id, Custom_Id__c FROM BSST__c WHERE Custom_Id__c IN : customIdSet] ){
                salesIdMap.put(obj.Custom_Id__c, obj);
            }
            for (Opportunity opp : oppList){
                if (( Trigger.isInsert || oldOppMap.get(opp.Id).Custom_Id__c != opp.Custom_Id__c) && salesIdMap.containsKey(opp.Custom_Id__c)){
                    opp.BS_Sales_Id__c = salesIdMap.get(opp.Custom_Id__c).id;
                }else if (
                    Trigger.isUpdate &&
                    oldOppMap.get(opp.Id).Custom_Id__c != opp.Custom_Id__c &&
                    !salesIdMap.containsKey(opp.Custom_Id__c)){
                    opp.BS_Sales_Id__c = null;
                }
            }
        }
    }

    public Map<Id,Subscription_Change_Event__e> eventHandling(List<Opportunity> newOpps, Map<Id, Opportunity> oldOpps){
        Map<Id,Subscription_Change_Event__e> subscriptionEventMap = new Map<Id,Subscription_Change_Event__e>();
        for (Opportunity newOpp : newOpps){
            Opportunity oldOpp;
            if (oldOpps != null && oldOpps.containsKey(newOpp.Id)){
                oldOpp = oldOpps.get(newOpp.Id);
            }
            // Fire Subscription Change Event on insert, or on update if the Account, SSS or Stage change:
            if (oldOpp == null){
                subscriptionEventMap = createSubscriptionChangeEvent(newOpp.AccountId, subscriptionEventMap);
            } else if (newOpp.AccountId != oldOpp.AccountId){
                subscriptionEventMap = createSubscriptionChangeEvent(newOpp.AccountId, subscriptionEventMap);
                subscriptionEventMap = createSubscriptionChangeEvent(oldOpp.AccountId, subscriptionEventMap);
            } else if (newOpp.Shared_Solar_System__c != oldOpp.Shared_Solar_System__c){
                subscriptionEventMap = createSubscriptionChangeEvent(newOpp.AccountId, subscriptionEventMap);
            } else if ((newOpp.StageName == 'Cancelled' && oldOpp.StageName != 'Cancelled') ||
                (newOpp.StageName == 'DUPLICATE' && oldOpp.StageName != 'DUPLICATE') ||
                (newOpp.StageName == 'Expired' && oldOpp.StageName != 'Expired') ||
                (newOpp.StageName == 'Dead' && oldOpp.StageName != 'Dead') ||
                (newOpp.StageName == 'Complete' && oldOpp.StageName != 'Complete')){
                subscriptionEventMap = createSubscriptionChangeEvent(newOpp.AccountId, subscriptionEventMap);
            }
        }
        if (subscriptionEventMap.values().size() > 0){
            EventBus.publish(subscriptionEventMap.values());
        }
        return subscriptionEventMap;
    }

    private static Map<Id,Subscription_Change_Event__e> createSubscriptionChangeEvent(Id accountId, Map<Id,Subscription_Change_Event__e> eventMap){
        Subscription_Change_Event__e stageChange = new Subscription_Change_Event__e(
            Property_Account_Id__c = accountId
        );
        eventMap.put(accountId,stageChange);
        return eventMap;
    }

    public void mapDocuSignRS(List<Opportunity> oppList, Map<ID, Opportunity> oldOppMap){
        Set<String> oppIdSet = new Set<String>();
        for (Opportunity opp : oppList) {
            if (opp.Email__c != null) {
                oppIdSet.add(opp.Email__c);
            }
        }
        if (oppIdSet.size() > 0){
            Map<String, dsfs__DocuSign_Recipient_Status__c> mapDocRS = new Map<String, dsfs__DocuSign_Recipient_Status__c>();
            for (dsfs__DocuSign_Recipient_Status__c obj : [SELECT Id, Name, dsfs__Parent_Status_Record__c, dsfs__Recipient_Status__c, dsfs__DocuSign_Recipient_Email__c
                                                          FROM dsfs__DocuSign_Recipient_Status__c
                                                          WHERE dsfs__DocuSign_Recipient_Email__c IN : oppIdSet]){
                mapDocRS.put(obj.dsfs__DocuSign_Recipient_Email__c, obj);
            }
            for (Opportunity opp : oppList) {
                if (Trigger.isInsert || Trigger.isUpdate || oldOppMap.get(opp.Id). Email__c != opp.Email__C){
                    if (mapDocRS.containsKey(opp.Email__c)){
                       opp.DocuSign_Recipient__c = mapDocRS.get(opp.Email__c).Id;
                    }
                }
                else if (oldOppMap.get(opp.Id).Email__c != opp.Email__c && !mapDocRS.containsKey(opp.Email__c)) {
                    opp.DocuSign_Recipient__c = null;
                }
            }
        }
    }

   @InvocableMethod
   public static void activatePortalUser(List<Id> oppIdList) {
       List<Opportunity> updatedOpps = OpportunitiesSelector.selectByIds(oppIdList);

       List<Id> parentAccountIdList = new List<Id>();

       for (Opportunity newOpp : updatedOpps) {
           if (newOpp.Parent_Account_ID__c != null) {
               parentAccountIdList.add(newOpp.Parent_Account_ID__c);
           }
       }

       if (parentAccountIdList.size() > 0){
            List<Contact> contactList = ContactSelector.selectByParentAccountIds(parentAccountIdList);
            UserHandler userInsertJob = new UserHandler(contactList);
            System.enqueueJob(userInsertJob);
        }
    }

    public void updateInvoicedSubscription(Map<ID, Opportunity> oldOpps, Map<ID, Opportunity> newOpps){
        List<Opportunity> opportunityList = new List<Opportunity>();
        Map<Id, Decimal> oppUASTotalMap = new Map<Id, Decimal>();

        for (Opportunity newOpp : newOpps.values()) {
            if (oldOpps.get(newOpp.Id).StageName != 'Complete'
                && newOpp.StageName == 'Complete'
                && newOpp.Product_Line__c == 'Community Solar'
                && newOpp.Subscription_Size_for_Invoicing__c == null){
                    opportunityList.add(newOpp);
            }

            //if sss changes

            // query for client uas where Opportunity ID = opp
            // update client uas
        }
        if (opportunityList.size() > 0){
            for (AggregateResult uasSUM : [SELECT Opportunity__r.Id oppId,
                                                SUM(Customer_Subscription_KW_DC__c) subscriptionSum
                                            FROM Utility_Account_Subscription__c
                                            WHERE Opportunity__r.Id IN : opportunityList
                                            GROUP BY Opportunity__r.Id]){
                oppUASTotalMap.put((Id)uasSUM.get('oppId'), (Decimal)uasSUM.get('subscriptionSum'));
            }
            for (Opportunity oppToUpdate : opportunityList){
                if (oppUASTotalMap.containsKey(oppToUpdate.Id)){
                    oppToUpdate.Subscription_Size_for_Invoicing__c = oppUASTotalMap.get(oppToUpdate.Id);
                }
            }
        }
    }

    public void setLeadLookup(List<Opportunity> insertedOpportunities) {
        for (Opportunity o : insertedOpportunities) {
            if (o.Lead_ID__c != null && o.Lead_ID__c != '') {
                o.Lead__c = o.Lead_ID__c;
            }
        }
    }
}