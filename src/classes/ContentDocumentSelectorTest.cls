/*************************************************************************************
 * Created By: peteryao on 9/12/19  
 *************************************************************************************/
@IsTest
public with sharing class ContentDocumentSelectorTest {
    @TestSetup
    public static void testSetup() {
        // I couldn't figure out how to mock the ContentDocumentSelector which returns a ContentDocument with
        // ContentVersion data. Deserializing JSON would results in various JSONExceptions.
        // So this will need to create the data
        ContentVersion cv = new ContentVersion(
            ContentLocation = 'S',
            VersionData = EncodingUtil.base64Decode('shorter invoice body'),
            Title = 'InvoiceNumber.pdf',
            PathOnClient = '/InvoiceNumber.pdf'
        );
        insert cv;
        ContentVersion cv2 = new ContentVersion(
            ContentLocation = 'S',
            VersionData = EncodingUtil.base64Decode('longer invoice body should be sorted first'),
            Title = 'InvoiceNumber2.pdf',
            PathOnClient = '/InvoiceNumber2.pdf'
        );
        insert cv2;

        Shared_Solar_System__c sss1 = new Shared_Solar_System__c(
            Name = 'Test SSS',
            Total_System_Size_kWh_DC__c = 1445.86,
            Total_System_Size_kW_AC__c  = 996,
            Expected_Yield_kWh_kW__c = 1300
        );
        insert sss1;

        Transfer__c transfer = new Transfer__c(
            Shared_Solar_System__c = sss1.Id,
            Transfer_Type__c = 'Main',
            Attempted_kWh_Transfer__c = 73072.00,
            Attempted_Transfer__c =  12033.73,
            Transfer_Amount__c =  12033.73,
            Default_Credit_Value__c = 0.1848
        );
        insert transfer;
        
    }

    @IsTest
    private static void testSelectById() {
        List<String> titleList = new List<String>{'InvoiceNumber.pdf', 'InvoiceNumber2.pdf'};
        List<ContentVersion> cvList = [
            SELECT Id, ContentDocumentId, ContentDocument.ContentSize
            FROM ContentVersion
            WHERE Title IN :titleList
            ORDER BY Title
        ];
        ContentVersion cv = cvList[0];
        ContentVersion cv2 = cvList[1];

        ContentDocumentSelector documentSelector = new ContentDocumentSelector();
        Test.startTest();
        List<ContentDocument> contentDocuments =
            documentSelector.selectById(new Set<Id>{cv.ContentDocumentId, cv2.ContentDocumentId});
        Test.stopTest();
        System.assertEquals(2, contentDocuments.size());
        System.assertEquals('InvoiceNumber2.pdf', contentDocuments[0].LatestPublishedVersion.Title);
        System.assertEquals('InvoiceNumber.pdf', contentDocuments[1].LatestPublishedVersion.Title);
    }

    @IsTest
    private static void testGetMostRecentTransferSheet(){
        List<ContentVersion> cvList = [
            SELECT Id, ContentDocumentId, ContentDocument.ContentSize
            FROM ContentVersion
            ORDER BY Title
        ];
        ContentVersion cv = cvList[0];
        cv.File_Category__c = 'Transfer Sheet';
        update cv;

        Transfer__c transfer = [
            SELECT Id
            FROM Transfer__c
            LIMIT 1
        ];

        ContentDocumentLink linkToTransfer = new ContentDocumentLink(
            LinkedEntityId = transfer.Id,
            ContentDocumentId = cv.ContentDocumentId,
            ShareType = 'V'
        );
        insert linkToTransfer;

        Test.startTest();
            ContentDocumentSelector documentSelector = new ContentDocumentSelector();
            ContentDocument doc = documentSelector.getMostRecentTransferSheet(transfer);
        Test.stopTest();

        System.assertEquals(cvList[0].ContentDocumentId, doc.Id);
    }

    @IsTest
    private static void testGetLeadDocsCreatedWithinRange() {
        Lead l1 = new Lead(
            FirstName = 'test',
            LastName = 'testerson',
            Company = 'test',
            Email = 'ttesterson@email.com',
            LeadSource = 'Switch'
        );
        Lead l2 = new Lead(
            FirstName = 'test2',
            LastName = 'testerson2',
            Company = 'test2',
            Email = 'ttesterson2@email.com',
            LeadSource = 'Switch'
        );
        insert new List<Lead>{l1, l2};

        List<ContentVersion> cvList = [SELECT Id, ContentDocumentId FROM ContentVersion];
        System.assertEquals(2, cvList.size());
        Test.setCreatedDate(cvList[1].ContentDocumentId, Datetime.now().addDays(-70));

        // this CDL should be returned by the selector
        ContentDocumentLink cdl1 = new ContentDocumentLink(
            ContentDocumentId = cvList[0].ContentDocumentId,
            LinkedEntityId = l1.Id,
            ShareType = 'V',
            Visibility = 'AllUsers'
        );
        // this CDL should NOT be returned by the selector due to visibility
        ContentDocumentLink cdl2 = new ContentDocumentLink(
            ContentDocumentId = cvList[0].ContentDocumentId,
            LinkedEntityId = l2.Id,
            ShareType = 'V',
            Visibility = 'InternalUsers'
        );
        // this CDL should NOT be returned by the selector due to parent CD created date
        ContentDocumentLink cdl3 = new ContentDocumentLink(
            ContentDocumentId = cvList[1].ContentDocumentId,
            LinkedEntityId = l2.Id,
            ShareType = 'V',
            Visibility = 'AllUsers'
        );
        insert new List<ContentDocumentLink>{cdl1, cdl2, cdl3};

        ContentDocumentSelector selector = new ContentDocumentSelector();
        Test.startTest();
            List<ContentDocument> cdList = selector.getLeadDocsCreatedWithinRange(Datetime.now().addDays(-1), Datetime.now().addDays(1));
        Test.stopTest();
        
        List<Error_Log__c> errList = [SELECT Id, Message__c FROM Error_Log__c];
        System.assert(errList.isEmpty(), 'There should be no errors');
        System.assertEquals(1, cdList.size(), 'Selector should have returned one Content Document');
        System.assertEquals(1, cdList[0].ContentDocumentLinks.size(), 'Selector should have returned one Content Document Link');
        System.assertEquals(l1.Id, cdList[0].ContentDocumentLinks[0].LinkedEntityId, 'Selector should have returned the Content Document Link associated with Lead l1');
    }

    @IsTest
    private static void testGetContractsAfterDateByLinkedEntity() {
        Lead l = new Lead(
            FirstName = 'test',
            LastName = 'testerson',
            Company = 'test',
            Email = 'ttesterson@email.com',
            LeadSource = 'Switch'
        );
        insert l;
        
        List<String> titleList = new List<String>{'InvoiceNumber.pdf', 'InvoiceNumber2.pdf'};
        List<ContentVersion> cvList = [SELECT Id, ContentDocumentId FROM ContentVersion WHERE Title IN :titleList];
        System.assertEquals(2, cvList.size());
        Test.setCreatedDate(cvList[0].ContentDocumentId, Datetime.now().addDays(-70));

        ContentDocumentLink cdl = new ContentDocumentLink(
            ContentDocumentId = cvList[0].ContentDocumentId,
            LinkedEntityId = l.Id,
            ShareType = 'V',
            Visibility = 'AllUsers'
        );
        ContentDocumentLink cdl2 = new ContentDocumentLink(
            ContentDocumentId = cvList[1].ContentDocumentId,
            LinkedEntityId = l.Id,
            ShareType = 'V',
            Visibility = 'AllUsers'
        );
        insert new List<ContentDocumentLink>{cdl, cdl2};

        ContentDocumentSelector selector = new ContentDocumentSelector();
        Test.startTest();
            List<ContentDocumentLink> cdlList = selector.getContractsAfterDateByLinkedEntity(l.Id, Datetime.now().addDays(-2));
        Test.stopTest();
        
        List<Error_Log__c> errList = [SELECT Id, Message__c FROM Error_Log__c];
        System.assert(errList.isEmpty(), 'There should be no errors');
        System.assertEquals(1, cdlList.size(), 'Selector should have returned one Content Document');
        System.assertNotEquals(cvList[0].ContentDocumentId, cdlList[0].ContentDocumentId, 'Selector should not have returned the Content Document created 70 days ago');
        System.assertEquals(cvList[1].ContentDocumentId, cdlList[0].ContentDocumentId, 'Selector should have returned the Content Document created today');
    }

    @IsTest
    private static void testSelectByLinkedEntitiesWithoutData() {
        List<Shared_Solar_System__c> sssList = [
            SELECT Id
            FROM Shared_Solar_System__c
        ];
        List<ContentVersion> cvList = [
            SELECT Id, ContentDocumentId, ContentDocument.ContentSize
            FROM ContentVersion
            ORDER BY Title
        ];
        ContentVersion cv = cvList[0];
        ContentVersion cv2 = cvList[1];

        ContentDocumentLink linkOne = new ContentDocumentLink(LinkedEntityId = sssList[0].Id, ContentDocumentId = cv.ContentDocumentId);
        ContentDocumentLink linkTwo = new ContentDocumentLink(LinkedEntityId = sssList[0].Id, ContentDocumentId = cv2.ContentDocumentId);
        insert new List<ContentDocumentLink>{linkOne, linkTwo};

        ContentDocumentSelector documentSelector = new ContentDocumentSelector();

        Test.startTest();
        List<ContentDocumentLink> links =
            documentSelector.selectByLinkedEntitiesWithoutData(new Set<Id>{sssList[0].Id});
        Test.stopTest();

        System.assertEquals(2, links.size());
    }
    
    @IsTest
    private static void testSelectCountersignedByLinkedEntities(){
        Account account1 = new Account(
            Name = 'testAccount1'
        );
        insert account1;
        
        Contract contract1 = new Contract(
            Name = 'testContract1',
            AccountId = account1.Id
        );
        insert contract1;
        
        ContentVersion cv3 = new ContentVersion(
            VersionData = EncodingUtil.base64Decode('df'),
            Title = 'Disclosure Form.pdf',
            PathOnClient = '/Disclosure_Form.pdf',
            Signing_Status__c = 'Countersigned'
        );
        insert cv3;
        
         List<Contract> contractList = [
            SELECT Id, Name, AccountId, Account.Send_Bills_Contact__r.Id
            FROM Contract 
            WHERE Name = 'testContract1'
        ];
        List<ContentVersion> cvList = [
            SELECT Id, ContentDocumentId, ContentDocument.ContentSize, Signing_Status__c
            FROM ContentVersion
            ORDER BY Title
        ];
        ContentVersion cv = cvList[0];

        ContentDocumentLink linkOne = new ContentDocumentLink(LinkedEntityId = contractList[0].Id, ContentDocumentId = cv.ContentDocumentId);
        insert linkOne;

        ContentDocumentSelector documentSelector = new ContentDocumentSelector();

        Test.startTest();
        
        Map<Id,Contract> contractMap = new Map<Id,Contract>();
        contractMap.put(contractList[0].Id, contractList[0]);
        
        MultiMap links = documentSelector.selectCountersignedByLinkedEntities(contractMap);
        
        Test.stopTest();

        System.assertEquals(1, links.size());
    }
    
}