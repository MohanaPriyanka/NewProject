/**
 * Created by SarahRenfro on 11/15/2019.
 */
@IsTest
public class SubscriptionManagementServiceTest {
    private static String sssId = 'a1J29000000tjOkEAI';
    @TestSetup
    public static void setupData() {
        Utility__c eversource = new Utility__c(
            Name = 'Eversource',
            Number_of_Decimal_Places__c = 2
        );
        insert eversource;
        Shared_Solar_System__c sss = new Shared_Solar_System__c(   Name = 'Shared Solar System Test',
            Service_Territory__c = 'SEMA',
            Service_Territories__c = 'SEMA',
            Open__c = true,
            Reserved_Capacity_kW_DC__c = '10',
            Capacity_Committed_kW_DC__c = 0,
            Total_System_Size_kWh_DC__c = 1095.84,
            Total_System_Size_kW_AC__c  = 996,
            Utility__c = eversource.Id,
            Credit_Score_Requirement__c = 300,
            Assignment_Order__c = '1',
            Expected_Yield_kWh_kW__c = 1300,
            Assemblage_Count__c = 1,
            Maximum_Subscription_Capacity_kWDC__c = 25);
        insert sss;
        Shared_Solar_System_Order__c sssoSize = new Shared_Solar_System_Order__c(
            Shared_Solar_System__c = sss.Id,
            Total_System_Size_kW_DC__c = 2891.72,
            Approval_Status__c = 'Approved'
        );
        Shared_Solar_System_Order__c sssoUpdate = new Shared_Solar_System_Order__c(
            Shared_Solar_System__c = sss.Id,
            Total_System_Size_kW_DC__c = 2891.72,
            Approval_Status__c = 'New'
        );
        insert new List<Shared_Solar_System_Order__c>{sssoSize, sssoUpdate};
    }
    @IsTest
    static void testHandleSSSChange() {
        useMocks(true);
        SubscriptionManagementService subscriptionManagementService = new SubscriptionManagementService();
        subscriptionManagementService.transferSubscriptionsOnSSSChange();
        System.assertEquals(2, subscriptionManagementService.uasOrders.size());
        System.assertEquals(4, subscriptionManagementService.upsertUASes.size());
        //Only going to have the zeroed subscription orders - cloned ones are added in execute method
        System.assertEquals(2, subscriptionManagementService.soInsertList.size());
        // loop through the 4, should have 2 inactive for one sss and 2 active for other sss
        for (Utility_Account_Subscription__c uas : subscriptionManagementService.upsertUASes) {
            if (uas.Shared_Solar_System__c != sssId) {
                System.assertEquals('Active Subscription', uas.Next_Schedule_Z_Status__c);
            } else {
                System.assertEquals('Inactive Subscription', uas.Next_Schedule_Z_Status__c);
            }
        }
        //Check Zeroed Subscription Orders
        System.assertEquals(0, subscriptionManagementService.soInsertList[0].New_Annual_Cost__c);
        System.assertEquals('a1d29000001C3xuAAC', subscriptionManagementService.soInsertList[0].Utility_Account_Subscription__c);
        System.assertEquals(0, subscriptionManagementService.soInsertList[1].New_Annual_Cost__c);
        System.assertEquals('a1d2900000222xuAAC', subscriptionManagementService.soInsertList[1].Utility_Account_Subscription__c);
        //Check cloned Subscription Orders and UASes
        System.assertEquals(2420, subscriptionManagementService.uasOrders[0].sOrder.New_Annual_Cost__c);
        System.assertEquals('Active Subscription', subscriptionManagementService.uasOrders[0].uas.Next_Schedule_Z_Status__c);
        System.assertNotEquals(sssId, subscriptionManagementService.uasOrders[0].uas.Shared_Solar_System__c);
        System.assertEquals(3000, subscriptionManagementService.uasOrders[1].sOrder.New_Annual_Cost__c);
        System.assertEquals('Active Subscription', subscriptionManagementService.uasOrders[1].uas.Next_Schedule_Z_Status__c);
        System.assertNotEquals(sssId, subscriptionManagementService.uasOrders[1].uas.Shared_Solar_System__c);
    }
    @IsTest
    static void testSubscriptionOrderInsert() {
        useMocks(true);
        Subscription_Order__c so = new Subscription_Order__c(
            Utility_Account_Subscription__c = 'a1d29000001C3xuAAC'
        );
        SubscriptionManagementService subscriptionManagementService = new SubscriptionManagementService();
        subscriptionManagementService.populateSubscriptionOrder(new List<Subscription_Order__c> {so});
        System.assertNotEquals(null, so);
        System.assertEquals(1300, so.Expected_Yield_kWh_kW__c);
        System.assertEquals(1095.84, so.Total_System_Size_kW_DC__c);
        System.assertEquals(2, so.Utility_Number_of_Decimal_Places__c );
        System.assertEquals(0.1848, so.Value_of_NMC__c);
        System.assertEquals(1.5, so.Size_Ratio__c);
        System.assertEquals(2600, so.Previous_Annual_Cost__c);
        System.assertEquals(5.1979, so.Previous_kw_DC_Subscription__c);
        System.assertEquals(0.37, so.Previous_Percent_Share_of_System__c);
        System.assertNotEquals(null, so.Product__c);
    }

    @IsTest
    private static void testFailInsertSO() {
        Util.disableTrigger('Disable_Client_Objects_Trigger__c');

        Utility_Account_Log__c ual = new Utility_Account_Log__c(
            Name = '000123'
        );
        insert ual;
        Utility_Account_Subscription__c uas = new Utility_Account_Subscription__c(
            Name = '000234',
            Utility_Account_Log__c = ual.Id
        );
        insert uas;
        Subscription_Order__c so = new Subscription_Order__c(
            Utility_Account_Subscription__c = uas.Id
        );

        try {
            insert so;
            throw new Util.BWException('An exception should have been thrown by the validation rule Require_All_Data_for_Share_Formula');
        } catch (Exception e) {
            Boolean expectedExceptionThrown =  e.getMessage().contains('UAS missing required data') ? true : false;
            System.assertEquals(true, expectedExceptionThrown, 'Should not be able to insert a SO without all required data');
        }
    }

    @IsTest
    private static void testSharedSolarSystemOrderTrigger() {
        useMocks(true);
        Shared_Solar_System_Order__c ssso = [
            SELECT Id
            FROM Shared_Solar_System_Order__c
            WHERE Approval_Status__c = 'New'
            LIMIT 1
        ];
        ssso.Total_System_Size_kW_DC__c = 3000;
        update ssso;
        ssso = [
            SELECT Id, Total_System_Size_kW_DC__c
            FROM Shared_Solar_System_Order__c
            WHERE Id = :ssso.Id
            LIMIT 1
        ];
        List<Subscription_Order__c> soList = [
            SELECT Id
            FROM Subscription_Order__c
            WHERE Shared_Solar_System_Order__c = :ssso.Id
        ];
        System.assertEquals(3000, ssso.Total_System_Size_kW_DC__c);
        System.assertEquals(0, soList.size());
    }
    @IsTest
    private static void testApprovedSSSO() {
        useMocks(true);
        Shared_Solar_System_Order__c sssoApproved = new Shared_Solar_System_Order__c(
            Shared_Solar_System__c = sssId,
            Total_System_Size_kW_DC__c = 2891.72,
            Approval_Status__c = 'Approved'
        );
        Shared_Solar_System_Order__c sssoOld = new Shared_Solar_System_Order__c(
            Shared_Solar_System__c = sssId,
            Total_System_Size_kW_DC__c = 2891.72,
            Approval_Status__c = 'New'
        );
        SubscriptionManagementService service = new SubscriptionManagementService();
        Map<Id, Shared_Solar_System_Order__c> oldMap = new Map<Id, Shared_Solar_System_Order__c>();
        oldMap.put(sssoOld.Id, sssoOld);
        List<Shared_Solar_System_Order__c> checkSSSO = service.checkSSSOApproval(new List<Shared_Solar_System_Order__c>{sssoApproved}, oldMap);
        System.assertEquals(1, checkSSSO.size());
    }
    @IsTest
    private static void testUpdateSSS() {
        useMocks(true);
        Shared_Solar_System_Order__c ssso = [
            SELECT Id, Shared_Solar_System__c, Yield__c, Total_System_Size_kW_DC__c
            FROM Shared_Solar_System_Order__c
            WHERE Total_System_Size_kW_DC__c != null
            LIMIT 1
        ];
        SubscriptionManagementService service = new SubscriptionManagementService();
        Shared_Solar_System__c checkSSS = service.updateSSSFromSSSO(ssso);
        System.assertEquals('Test SSS', checkSSS.Name);
        System.assertEquals(ssso.Total_System_Size_kW_DC__c, checkSSS.Total_System_Size_kWh_DC__c);
    }
    @IsTest
    private static void testCreateSubscriptionOrders() {
        useMocks(true);
        Shared_Solar_System_Order__c ssso = [
            SELECT Id, Shared_Solar_System__c, Yield__c, Total_System_Size_kW_DC__c
            FROM Shared_Solar_System_Order__c
            LIMIT 1
        ];
        UASSelector uasSelector = (UASSelector) Test.createStub(UASSelector.class, new MockUASSelector());
        List<Utility_Account_Subscription__c> uasList = uasSelector.selectActiveUASBySSS(new Set<Id>{ssso.Shared_Solar_System__c});
        SubscriptionManagementService service = new SubscriptionManagementService();
        List<Subscription_Order__c> soToInsert = service.createSystemChangeSubscriptionOrders(uasList, ssso);
        System.assertEquals(2, soToInsert.size());
    }
    @IsTest
    private static void testCreateSystemChangeOrdersWithoutSSSO() {
        useMocks(true);
        SubscriptionManagementService service = new SubscriptionManagementService();
        UASSelector uasSelector = (UASSelector) Test.createStub(UASSelector.class, new MockUASSelector());
        List<Utility_Account_Subscription__c> mockUASes = uasSelector.selectByOpp(null);
        List<Subscription_Order__c> checkSOs = service.createSystemChangeSubscriptionOrders(mockUASes, null);
        System.assertEquals(2, checkSOs.size());
        System.assertEquals('Resize', checkSOs[0].Type__c);
        System.assertEquals(null, checkSOs[0].Shared_Solar_System_Order__c);
    }

    @IsTest
    private static void testApprovedSO() {
        useMocks(true);
        SubscriptionManagementService service = new SubscriptionManagementService();
        List<Subscription_Order__c> soList = SubscriptionManagementService.soSelector.selectByIds(null);
        List<Subscription_Order__c> checkSOs = service.stampApprovedValues(soList);
        System.assertEquals(2, checkSOs.size());
        //SO 0001234 is an Initial Subscription Order - Previous values are 0
        for (Subscription_Order__c so : checkSOs) {
            if (so.Name == '0001234') {
                System.assertEquals(25.0000, so.System_Change_kW_DC_Rounded__c);
                System.assertEquals(15000, so.Change_in_Annual_kWh__c);
                System.assertEquals(1.73000, so.Approved_Change_in_Percent_Share__c);
                System.assertEquals(25.0000, so.Approved_Change_in_Subscription__c);
            } else {
                System.assertEquals(25.0000, so.System_Change_kW_DC_Rounded__c);
                System.assertEquals(10000, so.Change_in_Annual_kWh__c);
                System.assertEquals(1.00, so.Approved_Change_in_Percent_Share__c);
                System.assertEquals(5.0000, so.Approved_Change_in_Subscription__c);
            }
        }
    }

    @IsTest
    static void testSubscriptionOrdersForTestSetup() {
        useMocks(true);
        UASSelector uasSelector  = (UASSelector) Test.createStub(UASSelector.class, new MockUASSelector());
        List<Utility_Account_Subscription__c> uasList = uasSelector.selectByOpp(new Set<Id>{'00629000008boJ7AAI'});
        System.assertEquals(2, uasList.size());
        SubscriptionManagementService subscriptionService = new SubscriptionManagementService();
        List<Subscription_Order__c> soList = subscriptionService.createSubscriptionOrdersForTests(uasList);
        System.assertEquals(2, soList.size());
    }
    private static void useMocks(Boolean featureOn) {
        FeatureService.featureSelector = (FeatureSelector) Test.createStub(FeatureSelector.class, new FeatureServiceTest.MockCustomFeatureSelector(featureOn));
        SubscriptionManagementService.uasSelector = (UASSelector) Test.createStub(UASSelector.class, new MockUASSelector());
        SubscriptionManagementService.sssSelector = (SharedSolarSystemsSelector) Test.createStub(SharedSolarSystemsSelector.class, new MockSSSSelector());
        SubscriptionManagementService.soSelector = (SubscriptionOrderSelector) Test.createStub(SubscriptionOrderSelector.class, new MockSOSelector());
        SubscriptionManagementService.oppSelector = (OpportunitiesSelector) Test.createStub(OpportunitiesSelector.class, new MockOppSelector());
    }
    public class MockSSSSelector extends MockProvider {
        public MockSSSSelector() {
        }
        public override Object handleMethodCall(MethodCall methodCall) {
            return new Shared_Solar_System__c(
                Name = 'Test SSS',
                Id = 'a1J29000000tjOkEAI',
                Expected_Yield_kWh_kW__c = 1300.0000,
                Total_System_Size_kWh_DC__c = 1095.84,
                Stage__c = 'Acquisition'
            );
        }
    }
    public class MockSOSelector extends MockProvider {
        public MockSOSelector() {
        }
        public override Object handleMethodCall(MethodCall methodCall){
            String soList ='[{"attributes" : {"type" : "Subscription_Order__c","url" : "/services/data/v47.0/sobjects/Subscription_Order__c/a9W8A0000000xL5UAI"},' +
                '"Id" : "a9W8A0000000xL5UAI",' +
                '"Name" : "0001234",' +
                '"Approval_Status__c" : "Approved",' +
                '"New_Annual_kWh__c" : 15000,' +
                '"Previous_Annual_kWh__c" : 0,' +
                '"Previous_Percent_Share_of_System__c" : 0,' +
                '"Previous_kw_DC_Subscription__c" : 0,' +
                '"System_Change_Percent_Share_of_System__c" : 1.73000,' +
                '"System_Change_kW_DC_Rounded__c" : 25.0000,' +
                '"Utility_Number_of_Decimal_Places__c" : 2,' +
                '"Total_System_Size_kW_DC__c" : 1095.84,' +
                '"Product__c" : "01t3F000005XDZGQA4",' +
                '"Product__r": {"attributes" : {"type" : "Product2","url" : "/services/data/v47.0/sobjects/Product2/01t3F000005XDZGQA4"},' +
                '"Id" : "01t3F000005XDZGQA4",' +
                '"Customer_Subscription_Type__c" : "kWh" }' +
                '},' +
                '{"attributes" : {"type" : "Subscription_Order__c","url" : "/services/data/v47.0/sobjects/Subscription_Order__c/a9W8A0000000xL5UAI"},' +
                '"Id" : "a9W8A0000000xL5UAI",' +
                '"Name" : "0005678",' +
                '"Approval_Status__c" : "Approved",' +
                '"New_Annual_kWh__c" : 25000,' +
                '"Previous_Annual_kWh__c" : 15000,' +
                '"Previous_Percent_Share_of_System__c" : 0.73000,' +
                '"Previous_kw_DC_Subscription__c" : 20.0000,' +
                '"System_Change_Percent_Share_of_System__c" : 1.73000,' +
                '"System_Change_kW_DC_Rounded__c" : 25.0000,' +
                '"Utility_Number_of_Decimal_Places__c" : 2,' +
                '"Total_System_Size_kW_DC__c" : 1095.84,' +
                '"Product__r": {"attributes" : {"type" : "Product2","url" : "/services/data/v47.0/sobjects/Product2/01t3F000005XDZGQA4"},' +
                '"Id" : "01t3F000005XDZGQA4",' +
                '"Customer_Subscription_Type__c" : "kWh" }' +
                '}]';
            return (List<Subscription_Order__c>) JSON.deserialize(soList, List<Subscription_Order__c>.class);
        }
    }
    public class MockUASSelector extends MockProvider {
        public MockUASSelector() {
        }
        //TODO: Need to deprecate the Opp.UtilityNMCTariff fields when Sizing Method is live
        public override Object handleMethodCall(MethodCall methodCall) {
            String uasBySSS = '[{"attributes" : {"type" : "Utility_Account_Subscription__c","url" : "/services/data/v47.0/sobjects/Utility_Account_Subscription__c/a1d29000001C3xuAAC"},' +
                '"Id" : "a1d29000001C3xuAAC",' +
                '"Name" : "0001234",' +
                '"Future_Customer_Subscription_KWDC_Rollup__c" : 12.5,' +
                '"Annual_kWh_Subscription_Future_Rollup__c" : 16240.38,' +
                '"Future_Share_of_System_Rollup__c" : 1.14,' +
                '"Annual_Cost_Future_Rollup__c" : 2420.00,' +
                '"Next_Schedule_Z_Status__c" : "Active Subscription",' +
                '"Shared_Solar_System__c" : "' + sssId + '"' +
                '},' +
                '{"attributes" : {"type" : "Utility_Account_Subscription__c","url" : "/services/data/v47.0/sobjects/Utility_Account_Subscription__c/a1d29000001C3xuAAC"},' +
                '"Id" : "a1d2900000222xuAAC",' +
                '"Name" : "0001234",' +
                '"Future_Customer_Subscription_KWDC_Rollup__c" : 12.5,' +
                '"Annual_kWh_Subscription_Future_Rollup__c" : 16240.38,' +
                '"Future_Share_of_System_Rollup__c" : 1.14,' +
                '"Annual_Cost_Future_Rollup__c" : 2420.00,' +
                '"Next_Schedule_Z_Status__c" : "Active Subscription",' +
                '"Shared_Solar_System__c" : "' + sssId + '"' +
                '}]';
            String uasByMap = '[{"attributes" : {"type" : "Utility_Account_Subscription__c","url" : "/services/data/v47.0/sobjects/Utility_Account_Subscription__c/a1d29000001C3xuAAC"},' +
                '"Id" : "a1d29000001C3xuAAC",' +
                '"Next_Schedule_Z_Status__c" : "Active Subscription",' +
                '"Annual_Cost_Future_Rollup__c": "' + 2600 + '",' +
                '"Annual_kWh_Subscription_Future_Rollup__c": "' + 11000 + '",' +
                '"Future_Customer_Subscription_KWDC_Rollup__c": "' + 5.1979 + '",' +
                '"Future_Share_of_System_Rollup__c": "' + 0.37 + '",' +
                '"Sizing_Method__c" : "a1D29000000cScGEAU",' +
                '"Sizing_Method__r":{ "attributes" : {"type" : "Utility_NMC_Tariff__c","url" : "/services/data/v47.0/sobjects/Utility_NMC_Tariff__c/a1D29000000cScGEAU"},' +
                '"Id" : "a1D29000000cScGEAU",' +
                '"Value_of_NMC__c" : 0.184800, ' +
                '"Size_Ratio__c": 1.5},' +
                '"Opportunity__c" : "00629000008boK7AAI",' +
                '"Opportunity__r":{"attributes" : {"type" : "Opportunity","url" : "/services/data/v47.0/sobjects/Opportunity/00629000009SnvfAAC"},' +
                '"Id" : "00629000008boK7AAI",' +
                '"NMC_Tariff__c" : "a1D29000000cScGEAU",' +
                '"NMC_Tariff__r":{ "attributes" : {"type" : "Utility_NMC_Tariff__c","url" : "/services/data/v47.0/sobjects/Utility_NMC_Tariff__c/a1D29000000cScGEAU"},' +
                '"Id" : "a1D29000000cScGEAU",' +
                '"Value_of_NMC__c" : 0.184800},' +
                '"Product__c" : "01t29000003pkTBAAY"},' +
                '"Shared_Solar_System__c" : "' + sssId + '",' +
                '"Shared_Solar_System__r": { "attributes" : {"type" : "Shared_Solar_System__c","url" : "/services/data/v47.0/sobjects/Shared_Solar_System__c/a1J29000000tjOkEAI"},' +
                '"Id" : "' + sssId + '",' +
                '"Name" : "SSS Test",' +
                '"Client_Account__c" : "0012900000WKlZoAAL",' +
                '"Expected_Yield_kWh_kW__c" : 1300.0000,' +
                '"Total_System_Size_kWh_DC__c" : 1095.84,' +
                '"Utility__c" : "a1M290000013TkMEAU",' +
                '"Utility__r": {"attributes" : {"type" : "Utility__c","url" : "/services/data/v47.0/sobjects/Utility__c/a1M290000013TkMEAU"},' +
                '"Id" : "a1M290000013TkMEAU",' +
                '"Number_of_Decimal_Places__c" : 2 }' +
                '}' +
                '}, ' +
                '{ "attributes" : {"type" : "Utility_Account_Subscription__c","url" : "/services/data/v47.0/sobjects/Utility_Account_Subscription__c/a1d29000001C3xuAAC"},' +
                '"Id" : "a1d2900000222xuAAC",' +
                '"Next_Schedule_Z_Status__c" : "Active Subscription",' +
                '"Annual_Cost_Future_Rollup__c": "' + 2600 + '",' +
                '"Annual_kWh_Subscription_Future_Rollup__c": "' + 11000 + '",' +
                '"Future_Customer_Subscription_KWDC_Rollup__c": "' + 5.1979 + '",' +
                '"Future_Share_of_System_Rollup__c": "' + 0.37 + '",' +
                '"Sizing_Method__c" : "a1D29000000cScGEAU",' +
                '"Sizing_Method__r":{ "attributes" : {"type" : "Utility_NMC_Tariff__c","url" : "/services/data/v47.0/sobjects/Utility_NMC_Tariff__c/a1D29000000cScGEAU"},' +
                '"Id" : "a1D29000000cScGEAU",' +
                '"Value_of_NMC__c" : 0.184800, ' +
                '"Size_Ratio__c": 1.5},' +
                '"Opportunity__c" : "00629000008boJ7AAI",' +
                '"Opportunity__r":{"attributes" : {"type" : "Opportunity","url" : "/services/data/v47.0/sobjects/Opportunity/00629000009SnvfAAC"},' +
                '"Id" : "00629000008boJ7AAI",' +
                '"NMC_Tariff__c" : "a1D29000000cScGEAU",' +
                '"NMC_Tariff__r":{ "attributes" : {"type" : "Utility_NMC_Tariff__c","url" : "/services/data/v47.0/sobjects/Utility_NMC_Tariff__c/a1D29000000cScGEAU"},' +
                '"Id" : "a1D29000000cScGEAU",' +
                '"Value_of_NMC__c" : 0.184800},' +
                '"Product__c" : "01t29000003pkTBAAY"},' +
                '"Shared_Solar_System__c" : "' + sssId + '",' +
                '"Shared_Solar_System__r": { "attributes" : {"type" : "Shared_Solar_System__c","url" : "/services/data/v47.0/sobjects/Shared_Solar_System__c/a1J29000000tjOkEAI"},' +
                '"Id" : "' + sssId + '",' +
                '"Name" : "SSS Test",' +
                '"Client_Account__c" : "0012900000WKlZoAAL",' +
                '"Expected_Yield_kWh_kW__c" : 1300.0000,' +
                '"Total_System_Size_kWh_DC__c" : 1095.84,' +
                '"Utility__c" : "a1M290000013TkMEAU",' +
                '"Utility__r": {"attributes" : {"type" : "Utility__c","url" : "/services/data/v47.0/sobjects/Utility__c/a1M290000013TkMEAU"},' +
                '"Id" : "a1M290000013TkMEAU",' +
                '"Number_of_Decimal_Places__c" : 2 }' +
                '}' +
                '}]';
            String uasByOpp =
                '[{"attributes" : {"type" : "Utility_Account_Subscription__c","url" : "/services/data/v47.0/sobjects/Utility_Account_Subscription__c/a1d29000001C3xuAAC"},' +
                    '"Id" : "a1d29000001C3xuAAC",' +
                    '"Opportunity__c" : "00629000008boK7AAI",' +
                    '"Next_Schedule_Z_Status__c" : "Active Subscription",' +
                    '"Shared_Solar_System__c" : "' + sssId + '",' +
                    '"Future_Customer_Subscription_KWDC_Rollup__c" : 12.5,' +
                    '"Annual_kWh_Subscription_Future_Rollup__c" : 16240.38,' +
                    '"Future_Share_of_System_Rollup__c" : 1.14,' +
                    '"Annual_Cost_Future_Rollup__c" : 2420.00' +
                    '}, ' +
                    '{ "attributes" : {"type" : "Utility_Account_Subscription__c","url" : "/services/data/v47.0/sobjects/Utility_Account_Subscription__c/a1d29000001C3xuAAC"},' +
                    '"Id" : "a1d2900000222xuAAC",' +
                    '"Opportunity__c" : "00629000008boK7AAI",' +
                    '"Next_Schedule_Z_Status__c" : "Active Subscription",' +
                    '"Shared_Solar_System__c" : "' + sssId + '",' +
                    '"Future_Customer_Subscription_KWDC_Rollup__c" : 12.5,' +
                    '"Annual_kWh_Subscription_Future_Rollup__c" : 16240.38,' +
                    '"Future_Share_of_System_Rollup__c" : 1.14,' +
                    '"Annual_Cost_Future_Rollup__c" : 3000.00' +
                    '}]';
            switch on methodCall.stubbedMethodName {
                when 'selectActiveUASBySSS' {
                    return (List<Utility_Account_Subscription__c>) JSON.deserialize(uasBySSS, List<Utility_Account_Subscription__c>.class);
                } when 'getUASMap' {
                    Map<Id, Utility_Account_Subscription__c> uasMap = new Map<Id, Utility_Account_Subscription__c>();
                    List<Utility_Account_Subscription__c> uasList = (List<Utility_Account_Subscription__c>) JSON.deserialize(uasByMap, List<Utility_Account_Subscription__c>.class);
                    for (Utility_Account_Subscription__c uas : uasList) {
                        uasMap.put(uas.Id, uas);
                    }
                    return uasMap;
                } when 'selectByOpp', 'getUASForCloneByOpp' {
                    return (List<Utility_Account_Subscription__c>) JSON.deserialize(uasByOpp, List<Utility_Account_Subscription__c>.class);
                }
            }
            return null;
        }
    }
    public class MockOppSelector extends MockProvider {
        public MockOppSelector() {
        }
        public override Object handleMethodCall(MethodCall methodCall) {
            Opportunity opp = new Opportunity(
                Name = 'Test Opp',
                Shared_Solar_System__c = 'a1J29000000tjKKeee',
                Id = '00629000008boK7AAI'
            );
            return new Map<Id, Opportunity>{'00629000008boK7AAI' => opp};
        }
    }
}