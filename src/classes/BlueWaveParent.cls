/*************************************************************************************
 * Created By: Peter Yao
 * Description: Controller for BlueWaveParent super component that can be used for all
 *              custom lightning components
 *
 * Tested By: LoanUnderwritingTest / SLPControllersTestclass
 *************************************************************************************/

public without sharing class BlueWaveParent {
    @AuraEnabled
    public static String getLicenseType() {
        SLPUserHelper.PartnerProfile profile = SLPUserHelper.getPartnerProfile();
        return profile.LicenseType;
    }

    public static Map<String, Schema.SObjectType> globalDescribe = Schema.getGlobalDescribe();

    @AuraEnabled 
    public static SObject updateSObject(SObject sobj) {
        update sobj;
        return sobj;
    }

    @AuraEnabled 
    public static SObject insertSObject(SObject sobj) {
        insert sobj;
        return sobj;
    }

    @AuraEnabled 
    public static Boolean sendAnEmail(String emailTemplateName, String orgWideEmail, String subjectLine, List<String> addressList, String templateField, String replaceText) {
        Boolean hasSuccess = false;
        Boolean hasFailure = false;
        EmailTemplate template = MessagingService.getHtml(emailTemplateName);
        String templateHtml = template.HtmlValue;
        templateHtml = templateHtml.replace(templateField, replaceText);

        Messaging.SendEmailResult[] result = MessagingService.createAndSendEmail(templateHtml, orgWideEmail, subjectLine, addressList);
        for(Messaging.SendEmailResult rr : result){
            if(rr.IsSuccess()){
                hasSuccess = true;
            } else {
                hasFailure = true;
            }
        } 
        if(hasFailure){
            return false;
        } else if (hasSuccess){
            return true;
        } else {
            return false;
        }
    }

    @AuraEnabled 
    public static List<String> getPicklistFields(String objectName, String fieldName){
        Schema.SObjectType ctype = globalDescribe.get(objectName); 
        Map<String, Schema.SobjectField> fmap = ctype.getDescribe().fields.getMap();

        List<String> options = new List<String>();
        Schema.DescribeFieldResult fieldResult = fmap.get(fieldName).getDescribe();
        List<Schema.PicklistEntry> ple = fieldResult.getPicklistValues();
        for (Schema.PicklistEntry f: ple) {
            options.add(f.getLabel());
        }

        return options;
    }

    @AuraEnabled
    public static List<SLPortal_Settings__c> getSLPortalCustomSetting() { 
        List<SLPortal_Settings__c> slpSettings = SLPortal_Settings__c.getall().values();
        return slpSettings;
    }

    @AuraEnabled
    public static Id saveTheFile(Id parentId, String fileName, String base64Data, String contentType, String description) {
        base64Data = EncodingUtil.urlDecode(base64Data, 'UTF-8');
        
        Attachment a = new Attachment();
        a.parentId = parentId;
        a.Body = EncodingUtil.base64Decode(base64Data);
        a.Name = fileName;
        a.ContentType = contentType;
        a.Description = description;
        insert a;
        return a.Id;
    }

    @AuraEnabled
    public static Id saveTheChunk(Id parentId, String fileName, String base64Data, String contentType, String fileId) {
        String description = '';
        Id fileUploaded = saveTheChunkWithDescription(parentId, fileName, base64Data, contentType, description, null, fileId);
        return fileUploaded;
    }

    @AuraEnabled
    public static Id saveTheChunkWithDescription(Id parentId, String fileName, String base64Data, String contentType, String description,  String emailNotification, String fileId) {
        if (fileId == '') {
            fileId = saveTheFile(parentId, fileName, base64Data, contentType, description);
            if (emailNotification != null){
                String emailBody = 'A file has been uploaded'+  
                                    + '<br>  Parent Id: ' + parentId 
                                    + '<br>  File Name: ' + fileName;
                List<String> addressList = new List<String>{};   
                addressList.add(emailNotification);
                MessagingService.createAndSendEmail(emailBody, 'customercare@bluewavesolar.com', 'File Uploaded From Portal', addressList);
            }
        } else {
            appendToFile(fileId, base64Data);
        }
        return Id.valueOf(fileId);
    }    

    private static void appendToFile(Id fileId, String base64Data) {
        base64Data = EncodingUtil.urlDecode(base64Data, 'UTF-8');
        
        Attachment a = [
            SELECT Id, Body
            FROM Attachment
            WHERE Id = :fileId
            ];
        
        String existingBody = EncodingUtil.base64Encode(a.Body);
        a.Body = EncodingUtil.base64Decode(existingBody + base64Data); 
        
        update a;
    }    

    public static Map<String, String> stateMap = new Map<String, String>{
        'Alabama' => 'AL','Alaska' => 'AK','Arizona' => 'AZ','Arkansas' => 'AR','California' => 'CA',
        'Colorado' => 'CO','Connecticut' => 'CT','Delaware' => 'DE','Florida' => 'FL','Georgia' => 'GA',
        'Hawaii' => 'HI','Idaho' => 'ID','Illinois' => 'IL','Indiana' => 'IN','Iowa' => 'IA','Kansas' => 'KS',
        'Kentucky' => 'KY','Louisiana' => 'LA','Maine' => 'ME','Maryland' => 'MD','Massachusetts' => 'MA',
        'Michigan' => 'MI','Minnesota' => 'MN','Mississippi' => 'MS','Missouri' => 'MO','Montana' => 'MT',
        'Nebraska' => 'NE','Nevada' => 'NV','New Hampshire' => 'NH','New Jersey' => 'NJ','New Mexico' => 'NM',
        'New York' => 'NY','North Carolina' => 'NC','North Dakota' => 'ND','Ohio' => 'OH','Oklahoma' => 'OK',
        'Oregon' => 'OR','Pennsylvania' => 'PA','Rhode Island' => 'RI','South Carolina' => 'SC',
        'South Dakota' => 'SD','Tennessee' => 'TN','Texas' => 'TX','Utah' => 'UT','Vermont' => 'VT',
        'Virginia' => 'VA','Washington' => 'WA','West Virginia' => 'WV','Wisconsin' => 'WI','Wyoming' => 'WY',
        'AL' => 'Alabama','AK' => 'Alaska','AZ' => 'Arizona','AR' => 'Arkansas','CA' => 'California',
        'CO' => 'Colorado','CT' => 'Connecticut','DE' => 'Delaware','FL' => 'Florida','GA' => 'Georgia',
        'HI' => 'Hawaii','ID' => 'Idaho','IL' => 'Illinois','IN' => 'Indiana','IA' => 'Iowa','KS' => 'Kansas',
        'KY' => 'Kentucky','LA' => 'Louisiana','ME' => 'Maine','MD' => 'Maryland','MA' => 'Massachusetts',
        'MI' => 'Michigan','MN' => 'Minnesota','MS' => 'Mississippi','MO' => 'Missouri','MT' => 'Montana',
        'NE' => 'Nebraska','NV' => 'Nevada','NH' => 'New Hampshire','NJ' => 'New Jersey','NM' => 'New Mexico',
        'NY' => 'New York','NC' => 'North Carolina','ND' => 'North Dakota','OH' => 'Ohio','OK' => 'Oklahoma',
        'OR' => 'Oregon','PA' => 'Pennsylvania','RI' => 'Rhode Island','SC' => 'South Carolina',
        'SD' => 'South Dakota','TN' => 'Tennessee','TX' => 'Texas','UT' => 'Utah','VT' => 'Vermont',
        'VA' => 'Virginia','WA' => 'Washington','WV' => 'West Virginia','WI' => 'Wisconsin','WY' => 'Wyoming'};


    public static String convertStateToAbbreviation(String stateName ) {
        if (stateMap.get(stateName) != null) {
            return stateMap.get(stateName);
        } else {
            return stateName;
        }
    }

    public static String convertAbbreviationToState(String abbreviation) {
        if (stateMap.get(abbreviation) != null) {
            return stateMap.get(abbreviation);
        } else {
            return abbreviation;
        }
    }

    @AuraEnabled
    public static List<String> getUSStates(Boolean abbreviated) {
        List<String> states = new List<String>();
        if (!abbreviated) {
            for (String s : stateMap.keySet()) {
                if (s.length() > 2) {
                    states.add(s);
                }
            }
        } else {
            for (String s : stateMap.values()) {
                if (s.length() == 2) {
                    states.add(s);
                }
            }
        }
        return states;
    }
}
