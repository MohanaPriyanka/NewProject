/**
* Created by Sarah Renfro on 12/6/2018.
*
* Description: Implements cancellation functionality as specified in the Automated Cancellation Process epic:
* https://bluewavesolar.my.salesforce.com/a2g0a000000K7sX and Lucid chart:
* https://www.lucidchart.com/documents/edit/28ddde15-529b-4b09-b858-35bba5e77e37/2
*
* Provides four ways to initiate a CS cancellation:
* 1. Via customer request (by updating Cancellation Request Date and Cancellation Reason)
* 2. Via processing a utility account that's been finaled by the utility
* 3. Via lack of payment after 67 days
* 4. Via removal of all subscriptions
*
* We maintain the CS Status (open vs closed) and Cancellation Reasons at the account level.
*
* Tested By: CSCancellationServiceTest
*/

public without sharing class CSCancellationService {
    private static String AUTOMATED_CANCELLATION_COMMENT = 'Automated Cancellation';

    // W-008422: Finds accounts that are overdue, and sets the Account's cancellation reason, comments, and request date,
    // which in turn triggers the cancellation process. We skip Anchor or Public Offtake accounts as well as those that
    // have an override checkbox checked.
    public static List<Account> handleOverdueAccounts() {
        List<Account> updatedAccounts = new List<Account>();
        List<Account> accountList = AccountsSelector.selectCS67DaysPastDueWithAnchorOpps();

        for (Account acct : accountList) {
            if (acct.Opportunities.isEmpty()){
                acct.Cancellation_Reason__c = 'Lack of Payment';
                acct.Cancellation_Request_Date__c = System.today();
                acct.Cancellation_Comments__c = AUTOMATED_CANCELLATION_COMMENT;
                updatedAccounts.add(acct);
            }
        }

        if (!updatedAccounts.isEmpty()) {
            update updatedAccounts;
        }
        return updatedAccounts;
    }

    // W-008413: Called by the AccountTrigger after Property Accounts are updated with a Cancellation Request Date, to
    // remove all UASes from the next schedule Z, and send the customer(s) an email confirming their cancellation request.
    public static void processSubscriptionCancellations(List<Utility_Account_Subscription__c> uasesToMarkInactive) {
        UtilityAccountSubscriptions subscriptions = new UtilityAccountSubscriptions(uasesToMarkInactive);
        subscriptions.removeFromNextScheduleZ();
        sendCancellationConfirmationEmails(uasesToMarkInactive);
    }

    private static void sendCancellationConfirmationEmails(List<Utility_Account_Subscription__c> uasesCancelled) {
        Map<Id, Messaging.SingleEmailMessage> cancellationEmailMap = new Map<Id, Messaging.SingleEmailMessage>();

        for (Utility_Account_Subscription__c uas : uasesCancelled) {
            // Because we only want one email per property account, not per UAS, skip the uas if we already have an email for it
            if (cancellationEmailMap.containsKey(uas.Utility_Account_Log__r.Account__c) ||
                uas.Utility_Account_Log__r.Account__r.Cancellation_Comments__c == AUTOMATED_CANCELLATION_COMMENT) {
                continue;
            }
            try {
                cancellationEmailMap.put(
                    uas.Utility_Account_Log__r.Account__c,
                    createCSEmail(
                        uas.Utility_Account_Log__r.Account__r,
                        'CS_Cancellation_Request_Confirmation',
                        'We\'ve received your cancellation request'
                    )
                );
            } catch (Util.BWException bwe) {
                Logger.logLater('CSCancellationService', 'sendCancellationConfirmationEmails', bwe.getMessage());
            }
        }
        MessagingService.sendEmail(cancellationEmailMap.values());
        Logger.flushLogs();
    }

    private static Messaging.SingleEmailMessage createCSEmail(Account account, String template, String subject) {
        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
        mail.setOrgWideEmailAddressId(MessagingService.getCustomerCareEmail().Id);
        mail.setSubject(subject);
        if (account.Send_Bills_Contact__r.Email != null) {
            mail.setToAddresses(new List<String>{account.Send_Bills_Contact__r.Email});
        } else {
            throw new Util.BWException('Expected a Send Bills Contact Email for account (' +
                account.Id + '), but found none');
        }
        mail.setHtmlBody(MessagingService.getHtml(template).HtmlValue.replace('{!Account.Name}',
            account.Send_Bills_Contact__r.FirstName));
        List<String> ccEmails = new List<String>();
        MessagingService.safeAddCC(account.Send_Bills_Contact__r.Additional_Email__c, ccEmails);
        MessagingService.safeAddCC(account.Additional_Contact__r.Email, ccEmails);
        MessagingService.safeAddCC(account.Additional_Contact__r.Additional_Email__c, ccEmails);
        mail.setCcAddresses(ccEmails);
        mail.setTargetObjectId(account.Send_Bills_Contact__c);
        mail.setSaveAsActivity(true);
        return mail;
    }

    // W-008411: Called by the UtilityAccountLog trigger when Ops receives an email from the Utility that an account has been
    // finaled. Updates the "Date Utility Account Cancelled" date on the Utility Account Log and creates a Partner Support case
    public static void processFinaledUtilityAccounts(List<Utility_Account_Subscription__c> uasesToMarkInactive) {
        UtilityAccountSubscriptions subscriptions = new UtilityAccountSubscriptions(uasesToMarkInactive);
        subscriptions.removeFromProject();
        createCaseToTransferOrTerminate(subscriptions);
    }

    public static List<Utility_Account_Subscription__c> getUASesForFinaledUALs(List<Utility_Account_Log__c> newUALList, Map<Id, Utility_Account_Log__c> oldUALMap) {
        Set<Id> recentlyCancelledUALIds = new Set<Id>();
        List<Utility_Account_Subscription__c> uasesToMarkInactive = new List<Utility_Account_Subscription__c>();
        for (Utility_Account_Log__c ual : newUALList) {
            if (ual.Date_Utility_Account_Cancelled__c != null &&
                oldUALMap.get(ual.Id).Date_Utility_Account_Cancelled__c == null) {
                recentlyCancelledUALIds.add(ual.Id);
            }
        }

        if (recentlyCancelledUALIds.isEmpty()) {
            return uasesToMarkInactive;
        }

        uasesToMarkInactive = UASSelector.selectByUAL(recentlyCancelledUALIds);
        return uasesToMarkInactive;
    }

    private static void createCaseToTransferOrTerminate(UtilityAccountSubscriptions subscriptionList) {
        String caseOwner;
        List<System_Properties__c> systemProperties = System_Properties__c.getAll().values();
        if (systemProperties.isEmpty() || String.isBlank(systemProperties[0].Finaled_Case_Owner__c)) {
            return;
        } else {
            caseOwner = systemProperties[0].Finaled_Case_Owner__c;
        }
        Map<Id, Case> accountToCaseMap = new Map<Id, Case>();
        for (Utility_Account_Subscription__c uas : subscriptionList.records) {
            if (!accountToCaseMap.containsKey(uas.Utility_Account_Log__r.Account__c)) {
                Case transferCase = new CaseFactory().getCase(caseOwner);
                transferCase.Product_Line__c = 'Community Solar';
                transferCase.Origin = 'Other';
                transferCase.Category__c = 'Cancelled Utility Account';
                transferCase.Description = uas.Utility_Account_Log__r.Account__r.Name +
                        ' (' + uas.Utility_Account_Log__r.Account__c + ') has recently had a Utility Account ' +
                        'moved to Cancelled status. Please follow up with the customer to see if they want to transfer ' +
                        'the subscription or pay an early termination fee.';
                transferCase.AccountId = uas.Utility_Account_Log__r.Account__c;
                transferCase.ContactId = uas.Utility_Account_Log__r.Account__r.Send_Bills_Contact__c;
                accountToCaseMap.put(uas.Utility_Account_Log__r.Account__c, transferCase);
            }
        }

        insert accountToCaseMap.values();
    }

    // W-008425: Called by the CSCancellationScheduler daily to mark Opportunities as cancelled if:
    // 1. Opportunity Stage is Complete AND
    // 2. All UASes are inactive and there are no SZSes for them (waitlist cancellation) OR
    // 3. We've sent System Bills, but not for 45 days (15 days after we expect to send), so we're finished billing
    //
    // Once all opportunities under a property account are cancelled (or Duplicate, Expired, or Dead), another scheduled job
    // will send a termination letter
    public static List<Opportunity> cancelOpportunities(List<Opportunity> oppToCancelList) {
        Opportunities opportunities = new Opportunities(oppToCancelList);
        opportunities.cancel();
        return opportunities.records;
    }

    public static List<Opportunity> getOpportunitiesToCancel() {
        List<Opportunity> completeCSOpps = OpportunitiesSelector.selectAllCompleteCSWithUASesAndSystemBills();

        List<Opportunity> oppsToCancel = new List<Opportunity>();
        for (Opportunity opportunity : completeCSOpps) {
            if (Opportunities.isCancelledWaitlist(opportunity) ||
                Opportunities.finishedBilling(opportunity)) {
                oppsToCancel.add(opportunity);
            }
        }

        return oppsToCancel;
    }

    // W-008424: When ALL UASes with a Schedule Z Subscription have a "Date Removed from Project" (which is set when
    // Ops marks a Utility Account Log as Finaled or a customer has cancelled), we want to update the latest
    // Date Removed from Project on the Account and confirm with the removal with the customer.
    public static List<Account> processAccountsRemovedFromAllProjects(List<Account> acctsReadyForCancellation) {
        Map<Id, Messaging.SingleEmailMessage> confirmationEmailMap = new Map<Id, Messaging.SingleEmailMessage>();

        for (Account acct : acctsReadyForCancellation) {
            if (!confirmationEmailMap.containsKey(acct.Id)) {
                try {
                    confirmationEmailMap.put(
                        acct.Id,
                        createCSEmail(
                            acct,
                            'CS_Project_Removal_Confirmation',
                            'You\'ve been removed from all of your BlueWave CS Projects'
                        )
                    );
                } catch (Util.BWException bwe) {
                    Logger.logLater('CSCancellationService', 'processAccountsRemovedFromAllProjects', bwe.getMessage());
                }
            }
        }

        if (!acctsReadyForCancellation.isEmpty()){
            update acctsReadyForCancellation;
            MessagingService.sendEmail(confirmationEmailMap.values());
            Logger.flushLogs();
        }
        return acctsReadyForCancellation;
    }

    public static List<Account> getAccountsRemovedFromAllProjects() {
        List<Account> csAccounts = AccountsSelector.selectCSNotRemoved();
        List<Account> accountsToCancel = new List<Account>();
        for (Account account : csAccounts) {
            Integer numberOfRemovedUASes = 0;
            Integer numberOfSubscribedUASes = 0;
            Date latestDateRemoved = null;
            // For each UAL, include the account for cancellation if all subscribed UASes are removed.
            for (Utility_Account_Log__c ual : account.Utility_Account_Logs__r) {
                numberOfRemovedUASes += (Integer) ual.Number_of_Removed_UASes__c;
                numberOfSubscribedUASes += (Integer) ual.Number_of_Subscribed_UASes__c;
                if (latestDateRemoved == null ||
                    ual.Last_Date_UAS_Removed_From_Project__c > latestDateRemoved) {
                    latestDateRemoved = ual.Last_Date_UAS_Removed_From_Project__c;
                }
            }
            if (numberOfRemovedUASes == numberOfSubscribedUASes &&
                numberOfSubscribedUASes > 0) {
                account.Date_Removed_from_Project__c = latestDateRemoved;
                accountsToCancel.add(account);
            }
        }
        return accountsToCancel;
    }

    // W-008426: Called by the OpportunityTrigger to check to see if all CS opportunities are Cancelled, Expired, Duplicate,
    // or Dead. If so, we update the Account Status__c field and send the final termination letter email.
    public static List<Account> getAccountsToClose(Map<Id, Opportunity> newOppMap, Map<Id, Opportunity> oldOppMap) {
        //get all accounts where opportunities are either Cancelled, DUPLICATE, Expired or Dead
        Set<Id> accountIds = new Set<Id>();
        List<Account> accountsToClose = new List<Account>();
        for (Opportunity opp : newOppMap.values()) {
            if (opp.Product_Line__c == 'Community Solar' &&
                (opp.StageName == 'Cancelled' && oldOppMap.get(opp.Id).StageName != 'Cancelled') ||
                (opp.StageName == 'DUPLICATE' && oldOppMap.get(opp.Id).StageName != 'DUPLICATE') ||
                (opp.StageName == 'Expired' && oldOppMap.get(opp.Id).StageName != 'Expired') ||
                (opp.StageName == 'Dead' && oldOppMap.get(opp.Id).StageName != 'Dead')) {
                accountIds.add(opp.AccountId);
            }
        }

        if (!accountIds.isEmpty()) {
            List<Account> acctsToCheck = AccountsSelector.selectNotClosed(accountIds);
            for (Account acct : acctsToCheck) {
                Boolean readyForClose = true;
                for (Opportunity opp : acct.Opportunities) {
                    if (opp.StageName != 'Cancelled' &&
                        opp.StageName != 'DUPLICATE' &&
                        opp.StageName != 'Expired' &&
                        opp.StageName != 'Dead') {
                        readyForClose = false;
                        break;
                    }
                }

                if (readyForClose) {
                    accountsToClose.add(acct);
                }
            }
        }

        return accountsToClose;
    }

    public static void closeAccounts(List<Account> acctList) {
        Accounts csAccts = new Accounts(acctList);
        csAccts.close();
        sendTerminationConfirmationEmails(acctList);
    }

    private static void sendTerminationConfirmationEmails(List<Account> acctList) {
        Map<Id, Messaging.SingleEmailMessage> terminationEmailMap = new Map<Id, Messaging.SingleEmailMessage>();
        for (Account account : acctList) {
            // We should only send a termination email if the Account has been cancelled, not for instance, an account
            // that has a bunch of Dead opps.
            if (terminationEmailMap.containsKey(account.Id) ||
                account.Cancellation_Request_Date__c == null) {
                continue;
            }
            try {
                terminationEmailMap.put(
                    account.Id,
                    createCSEmail(account,
                        'CS_Termination_Confirmation',
                        'Your CS account has been terminated')
                );
            } catch (Util.BWException bwe) {
                Logger.logLater('CSCancellationService', 'sendTerminationConfirmationEmails', bwe.getMessage());
            }
        }

        if (!terminationEmailMap.values().isEmpty()) {
            MessagingService.sendEmail(terminationEmailMap.values());
            Logger.flushLogs();
        }
    }
}