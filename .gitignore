#################
## Eclipse
#################

*.pydevproject
.project
.metadata
bin/
tmp/
*.tmp
*.bak
*.swp
*~.nib
local.properties
.classpath
.settings/
.loadpath

# External tool builders
.externalToolBuilders/

# Locally stored "Eclipse launch configurations"
*.launch

# CDT-specific
.cproject

# PDT-specific
.buildpath


#################
## Visual Studio
#################

## Ignore Visual Studio temporary files, build results, and
## files generated by popular Visual Studio add-ons.

# User-specific files
*.suo
*.user
*.sln.docstates

# Build results

[Dd]ebug/
[Rr]elease/
x64/
build/
[Bb]in/
[Oo]bj/

# MSTest test Results
[Tt]est[Rr]esult*/
[Bb]uild[Ll]og.*

*_i.c
*_p.c
*.ilk
*.meta
*.obj
*.pch
*.pdb
*.pgc
*.pgd
*.rsp
*.sbr
*.tlb
*.tli
*.tlh
*.tmp_proj
*.log
*.vspscc
*.vssscc
.builds
*.pidb
*.scc

# Visual C++ cache files
ipch/
*.aps
*.ncb
*.opensdf
*.sdf
*.cachefile

# Visual Studio profiler
*.psess
*.vsp
*.vspx

# Guidance Automation Toolkit
*.gpState

# ReSharper is a .NET coding add-in
_ReSharper*/
*.[Rr]e[Ss]harper

# TeamCity is a build add-in
_TeamCity*

# DotCover is a Code Coverage Tool
*.dotCover

# NCrunch
*.ncrunch*
.*crunch*.local.xml

# Installshield output folder
[Ee]xpress/

# DocProject is a documentation generator add-in
DocProject/buildhelp/
DocProject/Help/*.HxT
DocProject/Help/*.HxC
DocProject/Help/*.hhc
DocProject/Help/*.hhk
DocProject/Help/*.hhp
DocProject/Help/Html2
DocProject/Help/html

# Click-Once directory
publish/

# Publish Web Output
*.Publish.xml
*.pubxml
*.publishproj

# NuGet Packages Directory
## TODO: If you have NuGet Package Restore enabled, uncomment the next line
#packages/

# Windows Azure Build Output
csx
*.build.csdef

# Windows Store app package directory
AppPackages/

# Others
sql/
*.Cache
ClientBin/
[Ss]tyle[Cc]op.*
~$*
*~
*.dbmdl
*.[Pp]ublish.xml
*.pfx
*.publishsettings

# RIA/Silverlight projects
Generated_Code/

# Backup & report files from converting an old project file to a newer
# Visual Studio version. Backup files are not needed, because we have git ;-)
_UpgradeReport_Files/
Backup*/
UpgradeLog*.XML
UpgradeLog*.htm

# SQL Server files
App_Data/*.mdf
App_Data/*.ldf

#############
## Windows detritus
#############

# Windows image file caches
Thumbs.db
ehthumbs.db

# Folder config file
Desktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Mac crap
.DS_Store


#############
## Python
#############

*.py[cod]

# Packages
*.egg
*.egg-info
dist/
eggs/
parts/
var/
sdist/
develop-eggs/
.installed.cfg

# Installer logs
pip-log.txt

# Unit test / coverage reports
.coverage
.tox

#Translations
*.mo

#Mr Developer
.mr.developer.cfg

#OSX-specific exclusions
.[dD][sS]_[sS]tore

# Sublime
*.sublime-project
*.sublime-workspace
*.sublime-settings

# MavensMate
deploy/
debug/

# emacs save files
*.*~
#*#

# ant
build.properties

# Intellij: https://github.com/github/gitignore/blob/master/Global/JetBrains.gitignore
# User-specific stuff:
.idea/**/workspace.xml
.idea/**/tasks.xml
.idea/dictionaries
.idea/dbnavigator.xml
.idea/shelf
.idea/misc.xml
.idea/inspectionProfiles/*
.idea/vcs.xml

# Sensitive or high-churn files:
.idea/**/dataSources/
.idea/**/dataSources.ids
.idea/**/dataSources.xml
.idea/**/dataSources.local.xml
.idea/**/sqlDataSources.xml
.idea/**/dynamic.xml
.idea/**/uiDesigner.xml

# IntelliJ
out/


#############
## Atom w/ atom-force
#############

# local user token and configuration
.atomforce

###############
#Copado
###############
#package.xml file is recreated on the fly by Copado, no need to track
#unnecessary changes of this file
src/package.xml
#Managed packages can trigger the installation or uninstallation of
#applications, it is recommended to manage this outside git
#installedPackages/*
#if you are not customizing a managed package, you can keep your
#repository clean by ignoring all files for that package.
#For example, to ignore all files of the "Copado" managed package
#just add to your .gitignore file the following text: *copado__*
#if you will be customizing managed packages, make sure that the
#same version of the package is installed on all your environments
#so that deployments will only update existing managed components.
#Creation of managed components is not permitted by the API.
#It is recommended that you ignore managed components that cannot be
#modified since there is no need to track them in Git,
#like for example:
*copado__*
!src/objects/copado__*
!src/layouts/copado__*
!src/permissionsets/copado__*


# Conga
*APXTConga4__*
*APXT_BPM__*
*CongaWorkflow__*
!src/objects/APXTConga4__*
!src/objects/APXT_BPM__*
!src/objects/CongaWorkflow__*

# Field Trip
*Field_Trip__*
!src/objects/Field_Trip__*

# LASERCA
*LASERCA__*
!src/objects/LASERCA__*

# Docusign
*dsfs__*
!src/objects/dsfs__*
!src/layouts/dsfs__*

# Agile Accelerator
*agf__*
/src/aura/ADM_*
/src/lwc/adm*
!src/objects/agf__*
!src/layouts/agf__*

# Exact Target
*et4ae5__*
!src/objects/et4ae5__*

# Zuora
*zqu__*
*Zuora__*
!src/objects/zqu__*
!src/objects/Zuora__*

#Datamask
*datamask__*
!src/objects/datamask__*

*flowmagic__*
!src/objects/flowmagic__*

*standard__*
!src/objects/standard__*

#If we want to promote certain metadata changes for installed pacakges, we can't ignore them.
!src/layouts/*
!src/settings/*
!src/customMetadata/*
!src/CustomApplication/*
!src/globalValueSets/*
!src/tabs/*
!src/objectTranslations/*
!src/duplicateRules/*
!src/matchingRules/*
!src/flows/*
!src/remoteSiteSettings/*
!force-app/main/default/objects/*


#profiles and permission sets are complex Files. If your Org's
#metadata and Git are in sync, you can track incremental changes on
#Profiles and Permission sets using Copado "commit files" functionality.
#Otherwise ignore profiles and permission sets until you are ready for it.
#You can deploy profiles and permission sets using
#Copado Deployer steps: Full profiles and Full Permission sets.
# Below is how to ignore them
# profiles/*
# permissionsets/*
#Translations are complex since get updated indirectly across
#multiple files, they can make a deployment fail if a field is
#translated in source and it doesn't exist on destination.
#If you are committing incrementally new fields and new Translations
#you can track them in Git, just be careful.
#If you choose  to ignore them in Git, you can always create a deployment
#with the Copado Deployer "Translation" Step.
# translations/*
# objectTranslations/*
#Sites which has Domain mapping has environment specific information.
#Make sure you setup Copado Environment Variables to make sites config
#files environment agnostic.
#Until the above is achieved, you can ignore them as follows
# sites/*
# siteDotComSites/*
/IlluminatedCloud/
/.idea/illuminatedCloud.xml
SMP.iml
/manifest/package.xml


#pmdCache file is used for the PMD plugin in VS Code
.pmdCache

# Salesforce cache
.sf/
.sfdx/
.localdevserver/
deploy-options.json

# LWC VSCode autocomplete
**/lwc/jsconfig.json
.vscode/

# LWC Jest coverage reports
coverage/

npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Dependency directories
node_modules/

# Eslint cache
.eslintcache


# Local environment variables
.env
/sfpowerkit-cache.db
/force-app/main/default/wave/**

# Report Types
/force-app/main/default/reportTypes